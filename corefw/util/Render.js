// Generated by CoffeeScript 1.8.0
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Ext.define('Corefw.util.Render', {
  singleton: true,
  pendingLayouts: [],
  layoutVars: {
    panelRowHeight: 48,
    panelHeaderHeight: 24,
    fieldHeight: 40,
    fieldHMargin: 12,
    leftMargin: 8,
    rightMargin: 8,
    topMargin: 0,
    totalWidthShrinkFudge: 20,
    totalHeightExpandFudge: 20
  },
  checkboxTypes: ['CHECKBOX', 'CHECKGROUP', 'RADIOGROUP'],
  labelTypes: ['LABEL', 'LINK'],
  fieldTypes: ['COMBOBOX', 'TEXTFIELD', 'NUMBERFIELD'],
  navTypes: ['NAVIGATION'],
  appendPendingLayout: function(comp) {
    Corefw.util.Render.pendingLayouts.push(comp);
  },
  flushLayouts: function() {
    var id, pendingLayout, pendingLayouts, _i, _len;
    pendingLayouts = Corefw.util.Render.pendingLayouts;
    Ext.suspendLayouts();
    for (id = _i = 0, _len = pendingLayouts.length; _i < _len; id = ++_i) {
      pendingLayout = pendingLayouts[id];
      if (typeof pendingLayout.isVisible === "function" ? pendingLayout.isVisible(true) : void 0) {
        if (pendingLayout.layoutManager) {
          pendingLayout.layoutManager.resize();
        } else {
          pendingLayout.doLayout();
        }
      } else {
        pendingLayout.resizeWhenVisible = true;
      }
    }
    Ext.resumeLayouts(true);
    Corefw.util.Render.pendingLayouts = [];
  },
  attachToolbarToTopTabpanel: function(perspective) {
    var toppanel;
    toppanel = Ext.ComponentQuery.query('toptabpanel')[0];
    if (toppanel != null) {
      toppanel.addTopToolbar(perspective.toolbarObj);
    }
  },
  prepareNavConfig: function(nav, navType, parentComponent) {
    var activateEvent, addlConfig, evt, menu, newNavObj, su;
    su = Corefw.util.Startup;
    evt = Corefw.util.Event;
    newNavObj = {
      cache: {
        _myProperties: nav
      },
      xtype: 'button',
      scale: 'small',
      margin: '3 10 3 10',
      uipath: nav.uipath,
      coretype: 'nav',
      name: nav.name,
      disabled: !nav.enabled,
      formBind: nav.onValidationCheck
    };
    if (su.getThemeVersion() === 2) {
      newNavObj.margin = '0 4 0 4';
    }
    if (nav.title) {
      newNavObj.text = nav.title;
    } else {
      newNavObj.text = ' ';
    }
    if (nav.toolTip) {
      newNavObj.tooltip = nav.toolTip + '\n<br>';
    }
    if (!su.useClassicTheme() && nav.navigationType !== 'TOOLBAR' && !nav.isToolBar) {
      if (nav.style && nav.style !== 'PRIMARY') {
        newNavObj.ui = "" + (nav.style.toLowerCase()) + "button";
      } else {
        newNavObj.ui = 'primarybutton';
      }
    }
    if (nav.cssClass) {
      newNavObj.cls = nav.cssClass;
    }
    if (nav.style) {
      if (nav.style !== 'PRIMARY' && nav.style !== 'SECONDARY') {
        if (newNavObj.text.trim()) {
          newNavObj.cls = '';
          newNavObj.ui = 'primarybutton';
          newNavObj.text = '&nbsp;&nbsp;&nbsp;' + newNavObj.text;
          newNavObj.iconCls = 'hasIcon icon icon-' + Corefw.util.Cache.cssclassToIcon[nav.style];
        } else if (navType !== 'ribbon') {
          newNavObj.cls = 'icon icon-' + Corefw.util.Cache.cssclassToIcon[nav.style];
        }
      }
      if (nav.cssClass) {
        newNavObj.iconCls = 'icon icon-' + Corefw.util.Cache.cssclassToIcon[nav.cssClass];
      }
    }
    evt.addEvents(nav, 'nav', newNavObj);
    menu = nav.menu;
    if (menu) {
      newNavObj.coretype = 'navmenubutton';
      activateEvent = menu.activateEvent;
      if (activateEvent) {
        newNavObj.activateEvent = activateEvent;
      }
    }
    if ((nav.started != null) && (nav.interval != null)) {
      newNavObj.started = nav.started;
      newNavObj.interval = nav.interval;
      newNavObj.hidden = true;
    }
    addlConfig = this.getAddlConfigByType[navType](nav);
    Ext.apply(newNavObj, addlConfig);
    return newNavObj;
  },
  getNavType: function(nav, parentComponent) {
    var navType;
    if (nav.coordinate && ((parentComponent != null ? parentComponent.coretype : void 0) === 'element' || parentComponent.xtype === 'corefieldset' || ((parentComponent != null ? parentComponent.coretype : void 0) === 'toolbar' && (parentComponent != null ? parentComponent.layoutManager : void 0)))) {
      navType = 'absolute';
    } else if (nav.type === 'TOOLBAR' || nav.navigationType === 'TOOLBAR' || nav.isToolBar) {
      navType = 'ribbon';
    } else {
      navType = 'bottom';
    }
    return navType;
  },
  getAddlConfigByType: {
    absolute: function(nav) {
      var addlConfig, buttonHeight, su;
      su = Corefw.util.Startup;
      if (su.getThemeVersion() === 2) {
        buttonHeight = 28;
      } else {
        buttonHeight = 22;
      }
      addlConfig = {
        height: buttonHeight,
        buttonHeight: buttonHeight,
        border: false,
        padding: '0 0 0 0',
        margin: '',
        componentCls: 'cv-form-abs-btn'
      };
      if (su.getThemeVersion() === 2) {
        if (nav.style !== 'PRIMARY' && nav.style !== 'SECONDARY') {
          addlConfig.margin = '10 0 0 0';
        }
      }
      return addlConfig;
    },
    ribbon: function(nav) {
      var addlConfig, iconCls, su, _ref;
      su = Corefw.util.Startup;
      addlConfig = {
        height: 28,
        minWidth: 37,
        border: false,
        padding: '0 0 0 0',
        margin: '',
        iconAlign: 'left',
        isToolBar: true,
        align: nav.align
      };
      if (su.getThemeVersion() === 2) {
        addlConfig.minWidth = 18;
        addlConfig.margin = '0 2 0 0';
        delete addlConfig.padding;
        delete addlConfig.height;
      }
      if (nav.style) {
        iconCls = Corefw.util.Cache.cssclassToIcon[nav.style];
        if (su.getThemeVersion() === 2) {
          if (iconCls) {
            addlConfig.iconCls = "hasIcon icon icon-" + iconCls;
          }
        } else if ((_ref = nav.style) !== 'PRIMARY' && _ref !== 'SECONDARY') {
          addlConfig.iconCls = nav.style;
        }
      }
      return addlConfig;
    },
    bottom: function() {}
  },
  prepareNavItems: function(nav, parentComponent, navItems, customizeConfig) {
    var absoluteItems, bottomItems, layoutManager, navConfig, navType, ribbonItems, su;
    su = Corefw.util.Startup;
    absoluteItems = navItems.absoluteItems;
    ribbonItems = navItems.ribbonItems;
    bottomItems = navItems.bottomItems;
    navType = this.getNavType(nav, parentComponent);
    navConfig = this.prepareNavConfig(nav, navType, parentComponent);
    layoutManager = parentComponent.layoutManager;
    if (navType === 'absolute') {
      absoluteItems.push(navConfig);
    } else if (navType === 'ribbon') {
      Ext.apply(navConfig, customizeConfig);
      if (nav.align === 'RIGHT' && ribbonItems.indexOf('->') === -1) {
        ribbonItems.push('->');
      }
      ribbonItems.push(navConfig);
      if (parentComponent.isBreadcrumb) {
        navConfig.text = nav.label;
        if (su.getThemeVersion() === 2) {
          ribbonItems.push({
            xtype: 'label',
            style: 'width:21px; top:1px !important; padding:5px 0;',
            html: '<i style="margin-left:8px; color:#53565A;" class="icon icon-next"></i>'
          });
        } else {
          ribbonItems.push('>');
        }
      }
    } else {
      bottomItems.push(navConfig);
    }
  },
  renderNavs: function(objProperties, parentComponent, attachTop, customizeConfig, navAlign) {
    var config, evt, nav, navArray, navItems, navs, timerNav, timerNavs, _i, _j, _len, _len1;
    navs = objProperties.navs;
    evt = Corefw.util.Event;
    if (!navs) {
      return;
    }
    navArray = navs._ar;
    if (!navArray || !navArray.length) {
      return;
    }
    navItems = {
      absoluteItems: [],
      bottomItems: [],
      ribbonItems: []
    };
    timerNavs = [];
    for (_i = 0, _len = navArray.length; _i < _len; _i++) {
      nav = navArray[_i];
      if (nav.isRemovedFromUI || !nav.visible) {
        continue;
      }
      if ((nav.started != null) && (nav.interval != null)) {
        config = {};
        evt.addEvents(nav, 'nav', config);
        Ext.apply(nav, config);
        timerNavs.push(nav);
        continue;
      }
      this.prepareNavItems(nav, parentComponent, navItems, customizeConfig);
    }
    this.renderNavItems(parentComponent, navItems, objProperties, attachTop, navAlign);
    for (_j = 0, _len1 = timerNavs.length; _j < _len1; _j++) {
      timerNav = timerNavs[_j];
      if (timerNav.interval > 0 && timerNav.eventURLs['ONTIMER']) {
        this.startTask(timerNav, parentComponent);
      }
    }
  },
  startTask: function(timerNav, parentComponent) {
    var iv, me, rq, runner, startNavTimer, task;
    me = parentComponent;
    rq = Corefw.util.Request;
    iv = Corefw.util.InternalVar;
    runner = iv.getTaskByUipath(timerNav.uipath);
    if (timerNav.started) {
      if (!runner) {
        runner = iv.addTaskByUipath(timerNav.uipath);
      }
      task = runner.tasks[0];
      if (!task) {
        startNavTimer = function() {
          var postData, url;
          postData = me.generatePostData();
          url = rq.objsToUrl3(timerNav.events['ONTIMER'].url);
          rq.sendRequest5(url, rq.processResponseObject, me.uipath, postData);
        };
        task = runner.start({
          run: startNavTimer,
          interval: timerNav.interval,
          fireOnStart: false
        });
      } else {
        if (task.interval !== timerNav.interval) {
          runner.stop(task);
          task.interval = timerNav.interval;
          runner.start(task);
        }
      }
    } else {
      if (runner) {
        iv.deleteTaskByUipath(timerNav.uipath);
      }
    }
  },
  renderNavItems: function(parentComponent, navItems, objProperties, attachTop, navAlign) {
    var absoluteItems, bottomItems, me, ribbonItems;
    absoluteItems = navItems.absoluteItems;
    ribbonItems = navItems.ribbonItems;
    bottomItems = navItems.bottomItems;
    me = this;
    if (absoluteItems.length) {
      this.renderAbsoluteItems(parentComponent, absoluteItems);
    }
    if (ribbonItems.length) {
      me.renderRibbonItems(parentComponent, ribbonItems, objProperties, attachTop);
    }
    if (bottomItems.length) {
      this.renderBottomItems(parentComponent, bottomItems, navAlign);
    }
  },
  renderAbsoluteItems: function(parentComponent, absoluteItems) {
    var item, layoutManager, _i, _len;
    layoutManager = parentComponent.layoutManager;
    if (!layoutManager || !layoutManager.add) {
      return;
    }
    for (_i = 0, _len = absoluteItems.length; _i < _len; _i++) {
      item = absoluteItems[_i];
      layoutManager.add(item);
    }
  },
  renderRibbonItems: function(parentComponent, ribbonItems, objProperties, attachTop) {
    var dockedTopItem, dockedTopItems, ind, index, len, ribbonItem, su, toolbarObj, widgetType, _i, _len;
    su = Corefw.util.Startup;
    if (parentComponent.isBreadcrumb) {
      Ext.Array.erase(ribbonItems, ribbonItems.length - 1, 1);
    }
    widgetType = objProperties.widgetType;
    if (widgetType === 'TOOLBAR' || widgetType === 'BREADCRUMB') {
      parentComponent.removeAll(true);
      len = ribbonItems.length;
      for (ind = _i = 0, _len = ribbonItems.length; _i < _len; ind = ++_i) {
        ribbonItem = ribbonItems[ind];
        if (ind === len - 1 && widgetType === 'BREADCRUMB') {
          Ext.apply(ribbonItem, {
            cls: 'x-btn-lst'
          });
        }
        parentComponent.add(ribbonItem);
      }
    } else if (widgetType === 'FORM_BASED_ELEMENT' || widgetType === 'COMPOSITE_ELEMENT') {
      Ext.defer(function() {
        var pHeader, toolbar, toolbarObj, toolbarUipath, _j, _len1, _ref, _ref1, _ref2;
        if (!(parentComponent.header && parentComponent.header.el)) {
          return;
        }
        if (parentComponent != null ? (_ref = parentComponent.header) != null ? (_ref1 = _ref.items) != null ? (_ref2 = _ref1.items[0]) != null ? _ref2.flex : void 0 : void 0 : void 0 : void 0) {
          delete parentComponent.header.items.items[0].flex;
          delete parentComponent.header.items.items[0].flex;
        }
        toolbarUipath = objProperties.toolbar.uipath;
        pHeader = parentComponent.header;
        toolbar = pHeader.down('toolbar');
        if (toolbar) {
          pHeader.remove(toolbar);
        }
        len = ribbonItems.length;
        for (ind = _j = 0, _len1 = ribbonItems.length; _j < _len1; ind = ++_j) {
          ribbonItem = ribbonItems[ind];
          if (!ribbonItem.iconCls) {
            ribbonItem.cls = 'toolbarBtn';
            ribbonItem.height = '24px';
          }
          if (ind === len - 1) {
            ribbonItem.margin = '0 10';
          }
        }
        toolbarObj = {
          xtype: 'toolbar',
          cls: 'panel-tb',
          defaultButtonUI: 'toolbutton',
          flex: 1,
          style: {
            border: 0,
            backgroundImage: 'none',
            backgroundColor: 'transparent'
          },
          uipath: toolbarUipath,
          cache: {
            _myProperties: {
              widgetType: 'TOOLBAR',
              uipath: toolbarUipath
            }
          },
          items: ribbonItems
        };
        pHeader.add(toolbarObj);
        return pHeader.padding = 0;
      }, 50);
    } else {
      toolbarObj = {
        xtype: 'toolbar',
        ui: 'commandbar',
        dock: 'top',
        padding: 3,
        border: '1 1 1 1',
        items: ribbonItems
      };
      parentComponent.toolbarObj = toolbarObj;
      if (attachTop) {
        this.attachToolbarToTopTabpanel(parentComponent);
      } else {
        dockedTopItems = parentComponent.getDockedItems("toolbar[dock='top']");
        for (index in dockedTopItems) {
          dockedTopItem = dockedTopItems[index];
          parentComponent.removeDocked(dockedTopItem);
        }
        parentComponent.addDocked(toolbarObj);
      }
    }
  },
  renderBottomItems: function(parentComponent, bottomItems, navAlign) {
    var layoutManager, pack, toolbarObj;
    layoutManager = parentComponent.layoutManager;
    if (!layoutManager || !layoutManager.addToolbar) {
      return;
    }
    switch (navAlign) {
      case 'left':
        pack = 'start';
        break;
      case 'center':
        pack = 'center';
        break;
      case 'right':
        pack = 'end';
        break;
      default:
        pack = 'end';
    }
    toolbarObj = {
      xtype: 'container',
      bottomContainer: true,
      listeners: {
        boxready: function(me) {
          var button, buttonGroup, containerWidth, maxWidth, su, _i, _j, _len, _len1, _results;
          this.addCls("bottom-container");
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            if (me.getWidth() !== 0) {
              containerWidth = me.getWidth();
            } else {
              containerWidth = parentComponent.getWidth();
            }
            maxWidth = 0;
            buttonGroup = me.query("button");
            for (_i = 0, _len = buttonGroup.length; _i < _len; _i++) {
              button = buttonGroup[_i];
              if (button.getWidth() > maxWidth) {
                maxWidth = button.getWidth();
              }
            }
            if (containerWidth > buttonGroup.length * (maxWidth + 8) + 20) {
              _results = [];
              for (_j = 0, _len1 = buttonGroup.length; _j < _len1; _j++) {
                button = buttonGroup[_j];
                _results.push(button.setWidth(maxWidth));
              }
              return _results;
            }
          }
        }
      },
      layout: {
        type: 'hbox',
        pack: pack
      },
      items: bottomItems
    };
    layoutManager.addToolbar(toolbarObj);
  },
  loadErrors: function(tab, props) {
    var errArray, error, toolTipText, _i, _len, _ref;
    if (!props) {
      return;
    }
    errArray = (_ref = props.messages) != null ? _ref.ERROR : void 0;
    if (errArray && errArray.length && tab) {
      toolTipText = 'Errors:\n<br>';
      for (_i = 0, _len = errArray.length; _i < _len; _i++) {
        error = errArray[_i];
        toolTipText += error + '\n<br>';
      }
      tab.setTooltip(toolTipText);
    }
  },
  addSecondTitle: function(comp) {
    var gridHeaderText, iconText, su;
    su = Corefw.util.Startup;
    if (!comp.originalTitle) {
      if (!comp.title) {
        comp.originalTitle = '&nbsp;';
      } else {
        comp.originalTitle = comp.title;
      }
    }
    gridHeaderText = comp.originalTitle;
    iconText = '';
    if (comp.collapsible && !su.getThemeVersion()) {
      gridHeaderText = gridHeaderText.replace(/&nbsp;/g, '');
      iconText = '&nbsp;&nbsp;&nbsp;';
    }
    if (comp.setTitle) {
      comp.setTitle(iconText + gridHeaderText);
    }
    if (comp.secondTitle && !comp.secondTitleCmp) {
      comp.secondTitleCmp = comp.header.add({
        html: comp.secondTitle,
        xtype: "component",
        cls: "element-second-title"
      });
    }
  },
  destroyThisComponent: function(comp) {
    var destroyReply, eventName, postData, rq, serverUrl, suppressClosing, uipath, url;
    rq = Corefw.util.Request;
    eventName = 'ONCLOSE';
    uipath = comp.uipath;
    Corefw.util.InternalVar.clearTimersForUipath(uipath);
    if (!comp.eventURLs) {
      return;
    }
    serverUrl = comp.eventURLs[eventName];
    if (!serverUrl) {
      return;
    }
    if (comp.isOncloseEventDisabled) {
      suppressClosing = comp.isOncloseEventDisabled();
      if (suppressClosing) {
        return;
      }
    }
    url = rq.objsToUrl3(serverUrl, comp.localUrl);
    destroyReply = function(respObj) {
      if (respObj) {
        rq.processResponseObject(respObj, null, uipath);
      }
    };
    postData = comp.generatePostData();
    rq.sendRequest5(url, destroyReply, uipath, postData);
  },
  getStyleRule: function(ruleSelectorText, styleSheetHref) {
    var doc, rule, styleSheet, styleSheets, _i, _j, _len, _len1, _ref;
    doc = document;
    styleSheets = doc.styleSheets;
    for (_i = 0, _len = styleSheets.length; _i < _len; _i++) {
      styleSheet = styleSheets[_i];
      if (styleSheetHref) {
        if (styleSheet.href.indexOf(styleSheetHref) === -1) {
          continue;
        }
      }
      _ref = styleSheet.rules;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        rule = _ref[_j];
        if (rule.selectorText === ruleSelectorText) {
          return rule;
        }
      }
    }
    return null;
  },
  getImageDimensions: function(imgStyleRule) {
    var defaultSize, img;
    defaultSize = {
      width: 10,
      height: 30
    };
    if (!imgStyleRule || !imgStyleRule.style || !imgStyleRule.style.backgroundImage) {
      return defaultSize;
    }
    img = new Image();
    img.src = imgStyleRule.style.backgroundImage.replace(/url\(|\)$|"/ig, '');
    return {
      width: img.width,
      height: img.height
    };
  },
  isFormField: function(type) {
    return __indexOf.call(this.checkboxTypes, type) >= 0 || __indexOf.call(this.labelTypes, type) >= 0 || __indexOf.call(this.fieldTypes, type) >= 0 || __indexOf.call(this.navTypes, type) >= 0;
  }
});
