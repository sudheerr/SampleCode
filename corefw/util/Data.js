// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.util.Data', {
  singleton: true,
  cacheData3: function(cache, parentCache) {
    var data, dataObj, field, key, nextCache, oneVal, props, val, valList, valueFieldQuene, valueFirstTypes, widgetType, _i, _j, _len, _len1;
    props = cache != null ? cache._myProperties : void 0;
    if (props) {
      widgetType = props.widgetType;
      switch (widgetType) {
        case 'FORM_BASED_ELEMENT':
        case 'BAR_ELEMENT':
        case 'FIELDSET':
        case 'TOOLBAR':
        case 'BREADCRUMB':
          cache._myProperties.data = {};
          break;
        case 'FIELD':
          if (parentCache._myProperties) {
            data = parentCache._myProperties.data;
            if (!data) {
              data = {};
              parentCache._myProperties.data = data;
            }
            valueFirstTypes = ["combobox"];
            valueFieldQuene = ["displayValue", "value"];
            if (Ext.Array.contains(valueFirstTypes, props.type.toLowerCase())) {
              valueFieldQuene.reverse();
            }
            for (_i = 0, _len = valueFieldQuene.length; _i < _len; _i++) {
              field = valueFieldQuene[_i];
              val = props[field];
              valList = [];
              if (Ext.isArray(val) && props.type.toLowerCase() === 'grid_picker') {
                for (_j = 0, _len1 = val.length; _j < _len1; _j++) {
                  oneVal = val[_j];
                  valList.push(oneVal != null ? oneVal.displayValue : void 0);
                }
                val = valList;
              }
              if (val || val === 0 || val === false) {
                data[props.name] = val;
                return;
              }
            }
          }
          break;
        case 'OBJECT_GRID':
        case 'HIERARCHY_OBJECT_GRID':
          dataObj = {};
          dataObj.items = props.items;
          dataObj.sortHeaders = props.sortHeaders;
          Corefw.view.grid.ObjectGrid.createDataCache(dataObj, cache);
          return;
        case 'CHART':
          return;
        case 'TREE':
        case 'TREE_WITH_GRID':
        case 'TREE_GRID':
        case 'TREE_NAVIGATION':
          this.cacheTreeData(dataObj, cache);
          return;
        case 'GROUPED_GRID':
          props.data = props.values;
          delete props.values;
          return;
        case 'RCGRID':
          Corefw.view.grid.RcGrid.createDataCache(dataObj, cache);
          return;
        case 'MIXED_GRID':
          Corefw.view.tree.TreeMixedGridField.createDataCache(dataObj, cache);
          return;
        default:
          if (widgetType !== 'APPLICATION' && widgetType !== 'PERSPECTIVE' && widgetType !== 'VIEW' && widgetType !== 'COMPOSITE_ELEMENT') {
            console.log('cacheData3 not found: widgetType, cache: ', widgetType, cache);
          }
      }
    }
    for (key in cache) {
      nextCache = cache[key];
      if (key !== '_myProperties') {
        if (!widgetType || (widgetType === 'APPLICATION' || widgetType === 'PERSPECTIVE' || widgetType === 'VIEW' || widgetType === 'COMPOSITE_ELEMENT' || widgetType === 'FIELDSET' || widgetType === 'FORM_BASED_ELEMENT' || widgetType === 'BAR_ELEMENT' || widgetType === 'TOOLBAR' || widgetType === 'BREADCRUMB')) {
          this.cacheData3(nextCache, cache);
        }
      }
    }
  },
  cacheTreeData: function(dataFieldItem, fieldCache) {
    var cm, dataObj, _ref;
    cm = Corefw.util.Common;
    if (dataFieldItem) {
      dataObj = cm.objectClone(dataFieldItem.children);
      fieldCache._myProperties.data = dataObj;
    } else if (fieldCache != null ? (_ref = fieldCache._myProperties) != null ? _ref.allTopLevelNodes : void 0 : void 0) {
      fieldCache._myProperties.data = fieldCache._myProperties.allTopLevelNodes;
    }
  },
  removeStore: function(storeName) {
    var oldSt;
    oldSt = Ext.getStore(storeName);
    if (oldSt) {
      oldSt.destroyStore();
    }
  },
  getDataType: function(val) {
    if (Ext.isBoolean(val)) {
      return 'boolean';
    } else if (Ext.isNumber(val)) {
      if (val === parseInt(val)) {
        return 'int';
      } else {
        return 'float';
      }
    }
    return 'auto';
  },
  getMaxIndex1: function(store) {
    var i, len, maxIndex, mod, _i;
    len = store.getCount();
    if (!len) {
      return;
    }
    mod = store.getAt(0);
    maxIndex = mod.get('__index');
    if (len === 1) {
      return maxIndex;
    }
    for (i = _i = 1; 1 <= len ? _i < len : _i > len; i = 1 <= len ? ++_i : --_i) {
      mod = store.getAt(i);
      maxIndex = Math.max(maxIndex, mod.get('__index'));
    }
    return maxIndex + 1;
  },
  getFieldArray: function(formCache) {
    var data, dt, field, fieldAr, fieldObj, key, props, singleVal, type, val, values, _i, _len, _ref;
    props = formCache._myProperties;
    data = props.data;
    fieldAr = [];
    for (key in formCache) {
      field = formCache[key];
      if (key === '_myProperties') {
        continue;
      }
      fieldObj = {
        name: key
      };
      type = (_ref = field._myProperties.type) != null ? _ref.toLowerCase() : void 0;
      if (type === 'date') {
        fieldObj.type = 'date';
      }
      val = data[key];
      if (Ext.isArray(val)) {
        values = [];
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          singleVal = val[_i];
          if (typeof singleVal === 'object') {
            values.push(singleVal.value);
          } else {
            values.push(singleVal);
          }
        }
        val = values;
      } else if (typeof val === 'object') {
        val = val.value;
      }
      if (typeof val !== 'undefined' && val !== null) {
        if (type === 'date') {
          dt = new Date(parseInt(val));
          data[key] = dt;
        } else if (type === 'datestring') {
          fieldObj.type = 'auto';
          data[key] = Ext.Date.parse(val, 'Y-m-d H:i:s');
        } else {
          fieldObj.type = this.getDataType(val);
          data[key] = val;
        }
      }
      fieldAr.push(fieldObj);
    }
    return fieldAr;
  },
  createFormStore: function(formCache) {
    var appName, cm, config, data, fieldAr, props, store, storeName;
    cm = Corefw.util.Common;
    props = formCache._myProperties;
    data = props.data;
    fieldAr = this.getFieldArray(formCache);
    appName = cm.getAppName();
    storeName = "" + appName + ".store.dynamic." + props.uipath;
    config = {
      fields: fieldAr,
      data: data,
      id: storeName
    };
    store = Ext.create('Ext.data.Store', config);
    return store;
  },
  updateFormStore: function(fieldCache) {
    var appName, cm, config, data, fieldAr, formCache, path, props, store, storeName, uipath;
    cm = Corefw.util.Common;
    uipath = Corefw.util.Uipath;
    path = fieldCache._myProperties.uipath;
    formCache = uipath.uipathToParentCacheItem(path);
    this.cacheData3(fieldCache, formCache);
    props = formCache._myProperties;
    data = props.data;
    fieldAr = this.getFieldArray(formCache);
    appName = cm.getAppName();
    storeName = "" + appName + ".store.dynamic." + props.uipath;
    config = {
      fields: fieldAr,
      data: data,
      id: storeName
    };
    store = Ext.create('Ext.data.Store', config);
    return store;
  },
  displayFormData: function(formComponent, formCache) {
    var store;
    store = this.createFormStore(formCache);
    formComponent.loadRecord(store.getAt(0), true);
  },
  updateDisplayFormData: function(formComponent, fieldCache) {
    var store;
    store = this.updateFormStore(fieldCache);
    formComponent.loadRecord(store.getAt(0));
  },
  arrayToStore: function(name, setName, inputAr, fieldCache) {
    var dataObj, dd, encodeValue, iv, ivKey, oldStoreArray, oldStoreId, st, storeConfig, storeDataAr, storeName, value, _i, _len;
    storeDataAr = [];
    dd = Ext.Date.now();
    storeName = name + dd;
    storeConfig = {
      extend: 'Ext.data.Store',
      storeId: storeName,
      fields: [
        {
          name: 'val'
        }, {
          name: 'dispField'
        }, {
          name: 'sub_dispField'
        }, {
          name: 'sub_val'
        }
      ],
      data: storeDataAr
    };
    if (setName) {
      iv = Corefw.util.InternalVar;
      ivKey = 'arrayToStore' + setName;
      oldStoreArray = iv.getArray(ivKey);
      if (oldStoreArray.length > 1) {
        oldStoreId = oldStoreArray[0];
        this.removeStore(oldStoreId);
        iv.removeIndexFromArray(ivKey, 0);
      }
      iv.addToArray(ivKey, storeName);
    } else {
      storeConfig.autoDestroy = true;
    }
    if (inputAr && Ext.isArray(inputAr) && inputAr.length) {
      encodeValue = this.encodeValue;
      for (_i = 0, _len = inputAr.length; _i < _len; _i++) {
        value = inputAr[_i];
        if (typeof value === 'string' || typeof value === 'number') {
          dataObj = {
            dispField: encodeValue(value),
            val: value,
            sub_dispField: encodeValue(value),
            sub_val: value
          };
          storeDataAr.push(dataObj);
        } else if (typeof value === 'object') {
          if (value.valueField !== null && typeof value.valueField !== 'undefined' && value.displayField !== null && typeof value.displayField !== 'undefined') {
            dataObj = {
              dispField: encodeValue(value.displayField),
              val: value.valueField,
              sub_dispField: encodeValue(value.sub_displayField),
              sub_val: value.sub_valueField
            };
          } else if (value.displayValue !== null && typeof value.displayValue !== 'undefined' && value.value !== null && typeof value.value !== 'undefined') {
            dataObj = {
              dispField: encodeValue(value.displayValue),
              val: value.value,
              sub_dispField: encodeValue(value.sub_displayValue),
              sub_val: value.sub_value
            };
          } else {
            continue;
          }
          storeDataAr.push(dataObj);
        }
      }
    }
    st = Ext.create('Ext.data.Store', storeConfig);
    return st;
  },
  encodeValue: function(value) {
    var error;
    try {
      return Ext.htmlEncode(value);
    } catch (_error) {
      error = _error;
      return value;
    }
  }
});
