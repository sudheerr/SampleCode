// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.util.Event', {
  singleton: true,
  addEvents: function(cacheProperties, componentLevel, configObj) {
    var addOneEvent, event, eventStr, eventURLs, events, key, numEventsFound, remoteUrlProp, su;
    su = Corefw.util.Startup;
    events = cacheProperties.events;
    eventURLs = {};
    numEventsFound = 0;
    addOneEvent = function(e) {
      var eventStr;
      eventStr = "" + componentLevel + e.type + "event";
      if (e.isFrontOnly) {
        configObj[eventStr] = 'local';
      } else {
        configObj[eventStr] = 'remote';
      }
      eventURLs[e.type] = e[remoteUrlProp];
      if (su.isLocalMode() && e.localUrl) {
        configObj.localUrl = e.localUrl;
      }
    };
    if (events) {
      remoteUrlProp = 'url';
      for (key in events) {
        event = events[key];
        numEventsFound++;
        if (key !== '_ar') {
          addOneEvent(event);
        }
      }
      configObj.eventURLs = eventURLs;
    }
    if (componentLevel === 'nav' && !numEventsFound) {
      eventStr = 'navONCLICKevent';
      configObj[eventStr] = 'local';
      eventURLs.ONCLICK = '';
    }
  },
  addHeartBeats: function(cacheProperties) {
    var hb, heartBeats, iv, runner, uipath, _i, _len;
    iv = Corefw.util.InternalVar;
    heartBeats = cacheProperties != null ? cacheProperties.heartBeats : void 0;
    if (heartBeats) {
      for (_i = 0, _len = heartBeats.length; _i < _len; _i++) {
        hb = heartBeats[_i];
        uipath = cacheProperties.uipath;
        runner = iv.getTaskByUipath(uipath, hb.name);
        if (!runner) {
          iv.addTaskByUipath(uipath, hb.name);
        }
      }
    }
  },
  disableUEvent: function(uipath, eventName) {
    var eventDisableName, iv;
    iv = Corefw.util.InternalVar;
    eventDisableName = "event" + eventName + "disable";
    iv.setByUipathProperty(uipath, eventDisableName, true);
  },
  getEnableUEventFlag: function(uipath, eventName) {
    var disableFlag, eventDisableName, iv;
    iv = Corefw.util.InternalVar;
    eventDisableName = "event" + eventName + "disable";
    disableFlag = iv.getByUipathProperty(uipath, eventDisableName);
    if (!disableFlag) {
      return true;
    }
    return false;
  },
  enableUEvent: function(uipath, eventName) {
    var eventDisableName, iv;
    iv = Corefw.util.InternalVar;
    eventDisableName = "event" + eventName + "disable";
    iv.deleteUipathProperty(uipath, eventDisableName);
  },
  toggleUEvent: function(uipath, eventName) {
    var flag;
    flag = this.getEnableUEventFlag(uipath, eventName);
    if (flag) {
      this.disableUEvent(uipath, eventName);
    } else {
      this.enableUEvent(uipath, eventName);
    }
    return !flag;
  },
  fireRenderEvent: function(widgetContainer) {
    var eventName, eventURL, onloadEventFlag, onrefreshEventFlag, parentCache, parentType, props, rq, uip, uipath, url, _ref;
    rq = Corefw.util.Request;
    uip = Corefw.util.Uipath;
    uipath = widgetContainer.uipath;
    onloadEventFlag = this.getEnableUEventFlag(uipath, 'ONLOAD');
    onrefreshEventFlag = this.getEnableUEventFlag(uipath, 'ONREFRESH');
    eventURL = widgetContainer.eventURLs['ONLOAD'];
    if (eventURL && onloadEventFlag) {
      eventName = 'ONLOAD';
      this.disableUEvent(uipath, eventName);
      this.disableUEvent(uipath, 'ONACTIVATE');
      this.toggleUEvent(uipath, 'ONREFRESH');
      if ((_ref = widgetContainer.grid) != null ? _ref.remoteLoadStoreData : void 0) {
        widgetContainer.grid.remoteLoadStoreData();
        return;
      }
    } else {
      eventURL = widgetContainer.eventURLs['ONREFRESH'];
      if (eventURL) {
        eventName = 'ONREFRESH';
        onrefreshEventFlag = this.toggleUEvent(uipath, eventName);
        if (onrefreshEventFlag) {
          return;
        }
      } else {
        return;
      }
    }
    if (widgetContainer.coretype === 'element') {
      parentCache = uip.uipathToCacheItem(uipath);
      props = parentCache._myProperties;
      parentType = props.type;
      if (parentType === 'table') {
        this.loadPage(1);
        return;
      }
    }
    this.disableUEvent(uipath, 'ONCLOSE');
    url = rq.objsToUrl3(eventURL, widgetContainer.localUrl);
    rq.sendRequest5(url, rq.processResponseObject, uipath);
  }
});
