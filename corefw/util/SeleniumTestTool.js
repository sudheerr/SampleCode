// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.util.SeleniumTestTool', {
  singleton: true,
  Combobox: {
    selectByText: function(combobox, value) {
      var displayField, index, itemDom, items, record;
      displayField = combobox.displayField;
      items = combobox.store.data.items;
      record = items.filter(function(r) {
        if (r.data[displayField] === value) {
          return true;
        }
      })[0];
      if (!record) {
        return;
      }
      index = record.index || items.indexOf(record);
      itemDom = Ext.DomQuery.select(".x-boundlist:visible li:nth(" + (index + 1) + ")")[0];
      return itemDom;
    }
  },
  RadioGroup: {
    selectByText: function(radioGroup, value) {
      var dom, radio;
      if (!radioGroup) {
        return;
      }
      radio = radioGroup.items.items.filter(function(r) {
        if (r.boxLabel === value) {
          return true;
        }
      })[0];
      dom = Ext.DomQuery.select('input', radio.el.dom)[0];
      return dom;
    }
  },
  CheckGroup: {
    selectByText: function(checkGroup, value) {
      var check, dom;
      if (!checkGroup) {
        return;
      }
      check = checkGroup.items.items.filter(function(r) {
        if (r.boxLabel === value) {
          return true;
        }
      })[0];
      dom = Ext.DomQuery.select('input', check.el.dom)[0];
      return dom;
    },
    selectByIndex: function(checkGroup, index) {
      var check, dom, _ref;
      if (!checkGroup) {
        return;
      }
      check = checkGroup != null ? (_ref = checkGroup.items) != null ? _ref.items[index] : void 0 : void 0;
      if (check) {
        dom = Ext.DomQuery.select('input', check.el.dom)[0];
        return dom;
      } else {
        return null;
      }
    }
  },
  Grid: {
    getCell: function(header, rowIndex) {
      var cell, grid, record, view;
      grid = header.up('grid');
      view = grid.getView();
      record = grid.store.getAt(rowIndex);
      cell = view.getCell(record, header);
      return cell;
    },
    getCellValue: function(header, rowIndex) {
      var cell;
      cell = this.getCell(header, rowIndex);
      return Ext.String.trim(cell.el.dom.innerText);
    },
    isSelected: function(component, rowIndex) {
      var grid, record, selModel;
      grid = component.grid;
      selModel = grid.getSelectionModel();
      record = grid.store.getAt(rowIndex);
      return selModel.isSelected(record);
    },
    isCheckBoxInColumnShown: function(header, rowIndex) {
      var cell;
      cell = this.getCell(header, rowIndex);
      return Ext.DomQuery.select('img', cell.dom).length > 0;
    }
  },
  TreeGrid: {
    isSelected: function(component, rowIndex) {
      var selModel;
      selModel = component.tree.getSelectionModel();
      return selModel.isSelected(rowIndex);
    },
    isLockedColumns: function(header) {
      return header.locked;
    },
    getNumberOfLockedColumns: function(component) {
      var _ref;
      return (_ref = component.tree.lockedGrid) != null ? _ref.columns.length : void 0;
    },
    getEditingCell: function(component, header) {
      var headerIndex, numberOfLockedColumns, _ref, _ref1;
      headerIndex = component.tree.columnManager.getHeaderIndex(header);
      numberOfLockedColumns = this.getNumberOfLockedColumns(component);
      if (numberOfLockedColumns) {
        if (this.isLockedColumns(header) === false) {
          headerIndex = headerIndex - this.getNumberOfLockedColumns(component);
          if (((_ref = component.cache) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.selectType : void 0 : void 0) !== 'NONE') {
            headerIndex = headerIndex - 1;
          }
          return component.tree.rowEditor.editor.items.items[1].items.items[headerIndex];
        } else {
          return component.tree.rowEditor.editor.items.items[0].items.items[headerIndex];
        }
      } else {
        return component.tree.rowEditor.editor.items.items[headerIndex];
      }
    },
    clickHyperLinkInLockedView: function(component, index) {
      var d, lv, n, r;
      lv = component.up('coretreebase').getView().lockedView;
      n = lv.getNodes()[index];
      r = lv.getRecord(n);
      d = lv.getCell(r, component);
      d.down('a').dom.click();
      return true;
    },
    getTreeCellValue: function(header, rowIndex) {
      var cell, component, node, numberOfLockedColumns, record, view;
      component = header.up('coretreegrid');
      numberOfLockedColumns = this.getNumberOfLockedColumns(component);
      if (numberOfLockedColumns) {
        if (this.isLockedColumns(header) === false) {
          view = component.down().getView().normalView;
        } else {
          view = component.down().getView().lockedView;
        }
      } else {
        view = component.down().getView();
      }
      node = view.getNodes()[rowIndex];
      record = view.getRecord(node);
      cell = view.getCell(record, header);
      return Ext.String.trim(cell.el.dom.innerText);
    }
  },
  TreePicker: {
    selectByText: function(value) {
      var id, picker, pickerDom, root, tree;
      if (!value) {
        return;
      }
      pickerDom = Ext.DomQuery.select('.x-window[id^=coretreepickerwindow]:visible')[0];
      if (!pickerWindow) {
        return;
      }
      id = pickerDom.id;
      picker = Ext.getCmp(id);
      if (!picker) {
        return;
      }
      tree = picker.down('treepanel');
      return root = tree.store.tree.root;
    }
  },
  Menu: {
    selectMenuItemByText: function(value) {
      var menuItem, menuItems, menuWindow, style, visibility, _i, _len;
      menuItems = [];
      menuWindow = Ext.DomQuery.select('.x-menu:last')[0];
      style = window.getComputedStyle(menuWindow);
      visibility = style != null ? style.getPropertyValue('visibility') : void 0;
      if (visibility !== 'hidden') {
        menuItems = Ext.DomQuery.select('.x-menu-item-text', menuWindow);
      }
      for (_i = 0, _len = menuItems.length; _i < _len; _i++) {
        menuItem = menuItems[_i];
        if (menuItem.innerHTML === value) {
          return menuItem;
        }
      }
    }
  },
  MonthPicker: {
    pickMonthByValue: function(value) {
      var monthLink, monthLinks, yearLink, yearLinks, ym, _i, _j, _len, _len1;
      ym = value.split("-");
      monthLinks = Ext.DomQuery.select(".x-monthpicker-months div a");
      for (_i = 0, _len = monthLinks.length; _i < _len; _i++) {
        monthLink = monthLinks[_i];
        if (monthLink.innerText === Ext.Date.getShortMonthName(parseInt(ym[1] - 1))) {
          monthLink.click();
        }
      }
      yearLinks = Ext.DomQuery.select(".x-monthpicker-years div a");
      for (_j = 0, _len1 = yearLinks.length; _j < _len1; _j++) {
        yearLink = yearLinks[_j];
        if (yearLink.innerText === ym[0]) {
          yearLink.click();
        }
      }
      return Ext.DomQuery.select(".x-monthpicker-buttons a")[0];
    }
  },
  Chart: {
    getSerieToolTipValue: function(corechart, serieType, groupBy, index) {
      var chart, item, serie, serieItem, span, spans, spansInnerText, _i, _j, _len, _len1, _ref;
      chart = Ext.ComponentQuery.query('.chart', corechart)[0];
      _ref = chart.series.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.type === serieType && item.xField === groupBy) {
          serie = item;
          break;
        }
      }
      if (serie) {
        serieItem = serie.items[index];
        serie.showTip(serieItem);
        spans = Ext.DomQuery.select('span', serie.tooltip.el.dom);
        spansInnerText = [];
        for (_j = 0, _len1 = spans.length; _j < _len1; _j++) {
          span = spans[_j];
          spansInnerText.push(span.innerText);
        }
        return spansInnerText.join('|');
      }
      return '';
    }
  }
});
