// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.util.Uipath', {
  singleton: true,
  cacheToUipath: function(cache) {
    var _ref;
    return cache != null ? (_ref = cache._myProperties) != null ? _ref.uipath : void 0 : void 0;
  },
  uipathToComponent: function(uipath) {
    var ar;
    if (uipath) {
      ar = Ext.ComponentQuery.query("[uipath=\"" + uipath + "\"]");
      if (ar && ar.length) {
        return ar[0];
      }
    }
  },
  uipathToComponentInElement: function(uipath, element) {
    var ar;
    if (uipath) {
      ar = Ext.ComponentQuery.query("[uipath=\"" + uipath + "\"]", element);
      if (ar && ar.length) {
        return ar[0];
      }
    }
  },
  uipathToParentUipath: function(uipath) {
    var ar;
    if (uipath) {
      ar = uipath.split('/');
      ar.pop();
      return ar.join('/');
    }
    return '';
  },
  uipathToParentComponent: function(uipath) {
    var parentUipath;
    parentUipath = this.uipathToParentUipath(uipath);
    if (parentUipath) {
      return this.uipathToComponent(parentUipath);
    }
  },
  uipathToShortName: function(uipath) {
    var ar;
    if (uipath) {
      ar = uipath.split('/');
      if (ar && ar.length) {
        return ar[ar.length - 1];
      }
    }
    return '';
  },
  uipathToTabNumber: function(uipath) {
    var cache, comp, i, item, items, name, parentComponent, props, tabnum, uniqueKey, _i, _len, _ref;
    comp = this.uipathToComponent(uipath);
    if (!comp) {
      return -1;
    }
    cache = comp.cache;
    props = cache != null ? cache._myProperties : void 0;
    if (!props) {
      return 0;
    }
    uniqueKey = props.uniqueKey;
    name = props.name;
    if (!name && !uniqueKey) {
      return 0;
    }
    parentComponent = comp.up('tabpanel');
    items = parentComponent != null ? (_ref = parentComponent.items) != null ? _ref.items : void 0 : void 0;
    if (!items) {
      return 0;
    }
    tabnum = 0;
    for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
      item = items[i];
      if (uniqueKey) {
        if (item.uniqueKey === uniqueKey) {
          tabnum = i;
          break;
        }
      } else if (item.cache && item.cache._myProperties.name === name) {
        tabnum = i;
        break;
      }
    }
    return tabnum;
  },
  uipathActivateTab: function(uipath) {
    var cache, comp, item, items, name, parentComponent, props, toptabpanel, uniqueKey, _i, _len;
    cache = this.uipathToCacheItem(uipath);
    props = cache != null ? cache._myProperties : void 0;
    uniqueKey = props.uniqueKey;
    name = props.name;
    comp = this.uipathToComponent(uipath);
    parentComponent = comp.up('tabpanel');
    items = parentComponent.items.items;
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      if (uniqueKey) {
        if (item.uniqueKey === uniqueKey) {
          parentComponent.setActiveTab(item);
          return;
        }
      } else if (item.cache && item.cache._myProperties.name === name) {
        parentComponent.setActiveTab(item);
        if (item.coretype === 'view') {
          toptabpanel = parentComponent.up('toptabpanel');
          if (toptabpanel != null) {
            toptabpanel.setActiveTab(parentComponent);
          }
        }
        return;
      }
    }
  },
  uipathToCacheItem: function(uipath, cache) {
    var comp, item, oneCache, result;
    if (!uipath) {
      return;
    }
    if (cache) {
      for (item in cache) {
        oneCache = cache[item];
        if (item === '_myProperties') {
          if (oneCache.uipath === uipath) {
            return cache;
          }
        } else if (oneCache._myProperties) {
          result = arguments.callee(uipath, oneCache);
          if (result) {
            return result;
          }
        }
      }
    } else {
      comp = this.uipathToComponent(uipath);
      if (comp) {
        return comp.cache;
      }
    }
  },
  uipathToParentCacheItem: function(uipath) {
    var comp;
    comp = this.uipathToParentComponent(uipath);
    if (comp) {
      return comp.cache;
    }
  },
  uipathToPostContainer: function(uipath) {
    var comp, parentUipath, uip;
    uip = Corefw.util.Uipath;
    parentUipath = uip.uipathToParentUipath(uipath);
    if (parentUipath) {
      comp = uip.uipathToComponent(parentUipath);
    }
    if (comp.coretype === 'perspective') {
      return comp;
    }
    return uip.uipathToPostContainer(parentUipath);
  }
});
