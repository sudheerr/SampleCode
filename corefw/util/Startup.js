// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.util.Startup', {
  singleton: true,
  startupJSON: 'startup.json',
  startupUrl: '',
  enableSmartPolling: true,
  timeToStopPolling: 180000,
  themeVersion: false,
  launch: function() {
    this.preventBackspaceEventOnDocument();
    this.createViewport();
    this.createAjaxErrorHandling();
    this.createApplication();
    this.attachWindowEvent();
  },
  createViewport: function() {
    var viewport;
    viewport = Ext.create('Ext.container.Viewport', {
      layout: 'fit',
      overflowX: 'auto',
      minWidth: 1024
    });
    return viewport;
  },
  getViewport: function() {
    return Ext.ComponentQuery.query('viewport')[0];
  },
  createApplication: function() {
    this.requestStartupJson(this.processStartupJson);
  },
  prepareContainerConfig: function() {
    var containerConfig;
    containerConfig = {
      xtype: 'container',
      autoScroll: true,
      layout: {
        type: 'vbox',
        align: 'center'
      }
    };
    if (Ext.getElementById("citi-application-header")) {
      containerConfig.margin = '34 0 0 0';
    }
    return containerConfig;
  },
  prepareTopTabPanelConfig: function(appObj) {
    var cache, key, maincache, perspectiveCache, perspectiveCaches, su, tabBarHidden, toptabpanelConfig, withoutTitlePerspectiveCaches;
    su = Corefw.util.Startup;
    cache = Corefw.util.Cache;
    maincache = cache.getMainCache();
    perspectiveCaches = [];
    for (key in maincache) {
      perspectiveCache = maincache[key];
      if (key !== '_myProperties' && perspectiveCache._myProperties.visible) {
        perspectiveCaches.push(perspectiveCache);
      }
    }
    withoutTitlePerspectiveCaches = perspectiveCaches.filter(function(cache) {
      return Ext.isEmpty(cache._myProperties.title);
    });
    tabBarHidden = withoutTitlePerspectiveCaches.length > 0 && perspectiveCaches.length === withoutTitlePerspectiveCaches.length;
    toptabpanelConfig = {
      xtype: 'toptabpanel',
      cache: maincache,
      width: '100%',
      flex: 1,
      appObj: appObj,
      isDeferRenderOn: su.getStartupObj().isDeferRender,
      tabBar: {
        hidden: tabBarHidden,
        style: 'margin-left: -2px;'
      }
    };
    if (su.getThemeVersion() === 2) {
      toptabpanelConfig.tabBar.style = 'margin-left: 0px;';
      toptabpanelConfig.plugins = {
        ptype: 'topTabPanelMenu'
      };
    }
    return toptabpanelConfig;
  },
  requestStartupJson: function(callback) {
    var rq;
    rq = Corefw.util.Request;
    rq.sendRequest5(this.startupJSON, callback, null, null, 'Unable to find a valid startup file "startup.json", quitting...');
  },
  processStartupJson: function(respObj) {
    var su;
    su = Corefw.util.Startup;
    su.verifyStartupJson(respObj);
    su.replaceUrlRoot(respObj);
    su.startupUrl = su.getQueryUrl(respObj);
    su.setStartupObj(respObj);
    if (respObj.externalCallback) {
      Corefw.util.Request.externalCallback = respObj.externalCallback;
    }
    su.requestApplicationJson(respObj, su.processApplicationJson);
  },
  verifyStartupJson: function(respObj) {
    var err, isEmpty;
    if (!respObj) {
      err = "No startup.json.";
    } else {
      isEmpty = Ext.isEmpty;
      err = '';
      if (isEmpty(respObj.startupUrl)) {
        err += "\nNo startupURL set in startup.json.";
      }
      if (isEmpty(respObj.application)) {
        err += "\nNo application set in startup.json.";
      }
      if (isEmpty(respObj.urlRoot)) {
        err += "\nNo urlRoot set in startup.json";
      }
    }
    if (err) {
      throw err;
    }
  },
  replaceUrlRoot: function(respObj) {
    respObj.urlRoot = respObj.urlRoot.replace(/;/, '?');
  },
  createContainers: function(appObj) {
    var container, containerConfig, toptabpanelConfig, viewport;
    viewport = this.getViewport();
    containerConfig = this.prepareContainerConfig();
    toptabpanelConfig = this.prepareTopTabPanelConfig(appObj);
    container = viewport.add(containerConfig);
    container.add(toptabpanelConfig);
  },
  requestApplicationJson: function(respObj, callback) {
    var rq;
    rq = Corefw.util.Request;
    rq.sendRequest5(this.startupUrl, callback, null, null, 'Startup URL contents were invalid');
  },
  processApplicationJson: function(appObj) {
    var applicationContents, redirectUrl, startupObj, su, title;
    if (!appObj) {
      return false;
    }
    su = Corefw.util.Startup;
    applicationContents = appObj.allContents;
    if (!Ext.isArray(applicationContents) || !applicationContents.length) {
      startupObj = su.getStartupObj();
      redirectUrl = startupObj.redirectUrl;
      redirectUrl && (window.location.href = redirectUrl);
      return false;
    }
    su.setupGlobalConfig(appObj);
    su.parseApplicationJson(appObj);
    su.createContainers(appObj);
    title = appObj.title;
    if (title) {
      document.title = title;
    }
    console.log("processApplicationJson done");
    return true;
  },
  setupGlobalConfig: function(appObj) {
    var ov, startupObj, themeConfig, updateUserActionTime;
    ov = Corefw.util.Override;
    startupObj = this.getStartupObj();
    ov.columnComponentLayoutOverride();
    ov.columnGetMaxContentWidthOverride();
    ov.workaroundsForNewTheme();
    ov.xhrStatusOverride();
    ov.measureLabelErrorHeightOverride();
    ov.pieChartEnhancementOverride();
    ov.gridHeaderReordererPluginOverride();
    ov.rowModelOverride();
    themeConfig = this.setThemeConfig();
    if (appObj.enablePush) {
      if (Ext.isBoolean(startupObj.enableSmartPolling) && !startupObj.enableSmartPolling) {
        this.enableSmartPolling = false;
      } else {
        Corefw.getApplication().lastActivity = Date.now();
        updateUserActionTime = function() {
          Corefw.getApplication().lastActivity = Date.now();
        };
        document.addEventListener('mousedown', updateUserActionTime);
        document.addEventListener('keydown', updateUserActionTime);
      }
      this.enablePush(startupObj);
    }
    return appObj.themeConfig = themeConfig;
  },
  setThemeConfig: function() {
    var cm, config, startupObj;
    cm = Corefw.util.Common;
    startupObj = this.getStartupObj();
    config = {
      uipath: startupObj.application
    };
    if (startupObj.localMode || startupObj.coreTheme === 'classic') {
      config.ui = 'default';
    } else {
      config.ui = 'tabnavigator';
    }
    if (this.getThemeVersion()) {
      config.ui = 'primary-tabs';
      config.margin = 0;
    }
    cm.setThemeByGlobalVariable(startupObj.application, 'topTabPanel', config);
    return config;
  },
  parseApplicationJson: function(appObj) {
    var ch, maincache, rq;
    ch = Corefw.util.Cache;
    maincache = ch.parseJsonToCache(appObj);
    ch.setMainCache(maincache);
    rq = Corefw.util.Request;
    rq.initializationSessionAboutToTimeoutTask();
  },
  enablePush: function(startupObj) {
    var iv, pollingFn, pollingInterval, rq, stopPollingOnNoActivity;
    rq = Corefw.util.Request;
    iv = Corefw.util.InternalVar;
    pollingInterval = startupObj.pollingInterval ? startupObj.pollingInterval : 500;
    this.timeToStopPolling = stopPollingOnNoActivity = Ext.isNumber(startupObj.timeToStopPolling) ? startupObj.timeToStopPolling : this.timeToStopPolling;
    pollingFn = function() {
      var pushUrl, userid;
      if (Corefw.util.Startup.enableSmartPolling && (Date.now() - Corefw.getApplication().lastActivity > stopPollingOnNoActivity)) {
        console.log('polling stopped due to inactivity');
        Corefw.util.Startup.checkForUserAction();
        return;
      }
      pushUrl = startupObj.urlRoot.replace(/\?/, '/push');
      userid = iv.getByNameProperty("CoreApp", 'user');
      if (userid) {
        pushUrl += "?sm_user=" + userid;
      }
      Ext.Ajax.request({
        url: pushUrl,
        timeout: 100 * 365 * 24 * 60 * 60 * 1000,
        callback: function(options, success, response) {
          var e, obj;
          if (success) {
            rq.runSessionAboutToTimeOutTask();
          }
          try {
            obj = Ext.decode(response.responseText);
            if (obj) {
              rq.processResponseObject(obj, null, obj.uipath, null, true);
            }
          } catch (_error) {
            e = _error;
            console.log(e);
          } finally {
            Ext.Function.createDelayed((function() {
              pollingFn();
            }), pollingInterval)();
          }
        }
      });
    };
    pollingFn();
  },
  checkForUserAction: function() {
    var listenToUserActions;
    listenToUserActions = function() {
      document.removeEventListener('mousedown', listenToUserActions);
      document.removeEventListener('keydown', listenToUserActions);
      console.log('polling restarted');
      Corefw.util.Startup.enablePush(Corefw.util.Startup.getStartupObj());
    };
    document.addEventListener('mousedown', listenToUserActions);
    document.addEventListener('keydown', listenToUserActions);
  },
  getQueryUrl: function(respObj) {
    var appName, iv, localStorage, localUrl, localUrlParamJson, queryObj, startupUrl, startupUrlArr, startupUrlHost, startupUrlParamJson, userPreferenceValue, userid;
    startupUrl = respObj['startupUrl'];
    startupUrlArr = startupUrl.substr(startupUrl.indexOf(";") + 1).split("?");
    startupUrlHost = startupUrlArr[0];
    startupUrlParamJson = startupUrlArr.length > 1 ? Ext.Object.fromQueryString(startupUrlArr[1]) : {};
    localStorage = window.localStorage;
    localUrl = window.location.search;
    iv = Corefw.util.InternalVar;
    if (localUrl) {
      localUrlParamJson = this.getParamsJsonFromUrl(localUrl);
      userid = localUrlParamJson.sm_user || "";
      iv.setByNameProperty('CoreApp', 'user', userid);
      appName = localUrlParamJson.app;
      delete localUrlParamJson.app;
      startupUrlParamJson = Ext.apply(startupUrlParamJson, localUrlParamJson);
    }
    if (!appName) {
      appName = respObj["application"];
    }
    userPreferenceValue = localStorage[appName];
    (userPreferenceValue != null) && Ext.apply(startupUrlParamJson, this.getUserPreferenceParameter(appName));
    if (respObj.paramModel) {
      respObj.startUpUrlParams = startupUrlParamJson;
    }
    queryObj = Ext.Object.fromQueryString(startupUrlHost.replace(/;/g, "&"));
    if (queryObj && queryObj["eventURL"]) {
      queryObj["application"] = respObj['application'] = appName;
      queryObj["eventURL"] = appName + "/" + queryObj["eventURL"].substr(queryObj["eventURL"].indexOf("/") + 1);
      Ext.apply(queryObj, startupUrlParamJson);
    }
    return respObj["startupUrl"] = respObj.urlRoot + Ext.Object.toQueryString(queryObj);
  },
  getStartupObj: function() {
    return Corefw.util.InternalVar.getByNameProperty('CoreApp', 'startupObj');
  },
  setStartupObj: function(respObj) {
    Corefw.util.InternalVar.setByNameProperty('CoreApp', 'startupObj', respObj);
  },
  getApplicationName: function() {
    var startupObj;
    startupObj = this.getStartupObj();
    return startupObj.application;
  },
  getTopTabPanel: function() {
    return Ext.ComponentQuery.query('toptabpanel')[0];
  },
  isLocalMode: function() {
    return this.getStartupObj().localMode;
  },
  isDebugMode: function() {
    var startupObj;
    startupObj = this.getStartupObj();
    if (startupObj && startupObj.debugMode) {
      return true;
    }
    return false;
  },
  attachWindowEvent: function() {
    var me;
    me = this;
    Ext.EventManager.on(window, 'blur', function() {
      me.windowOnBlur();
    });
    Ext.EventManager.on(window, 'focus', function() {
      me.windowOnFocus();
    });
    Ext.EventManager.on(window, 'message', function(event) {
      return me.logoff(event);
    });
  },
  logoff: function(event) {
    var closeName, contextName, message, rq, url;
    if (event.browserEvent.data) {
      closeName = 'GatewayLogout';
      message = event.browserEvent.data.toString();
      if (message && (message.indexOf(closeName) > -1)) {
        rq = Corefw.util.Request;
        contextName = this.getContextName();
        url = '/' + contextName + '/logout/';
        rq.sendRequest5(url, null, null, null, 'Startup URL contents were invalid');
      }
    }
  },
  getContextName: function() {
    var contextName, pathArray;
    pathArray = window.location.pathname.split('/');
    contextName = pathArray[1];
    return contextName;
  },
  useClassicTheme: function() {
    if (this.isLocalMode() || this.getStartupObj().coreTheme === 'classic') {
      return true;
    }
    return false;
  },
  getThemeVersion: function() {
    var coreTheme, theme;
    if (this.themeVersion) {
      return this.themeVersion;
    }
    coreTheme = this.getStartupObj().coreTheme;
    theme = location.pathname;
    if (theme.indexOf("index2.html") > 1 || theme.indexOf("index2H.html") > 1 || theme.indexOf('Vn.jsp') > 1) {
      coreTheme = "version2";
    }
    switch (coreTheme) {
      case 'citirisk':
        this.themeVersion = 1;
        break;
      case 'version2':
        this.themeVersion = 2;
    }
    return this.themeVersion;
  },
  showBrowserNotSupportedMsg: function() {
    var container;
    container = Ext.create('Ext.container.Container', {
      layout: {
        type: 'vbox',
        align: 'center',
        pack: 'center'
      },
      height: 280,
      width: 460,
      border: 1,
      style: {
        borderColor: '#00BFFF',
        borderStyle: 'solid',
        borderWidth: '1px',
        borderRadius: '20px'
      },
      items: [
        {
          xtype: 'label',
          cls: 'warnMsg',
          maxHeight: 30,
          html: '<h3>&nbsp;&nbsp;Unsupported Browser</h3><br>'
        }, {
          xtype: 'image',
          height: 100,
          width: 220,
          src: 'resources/adhoc/images/modern-browser.png'
        }, {
          xtype: 'label',
          html: '* Chrome can be found under Start -> All Programs -> Google Chrome'
        }
      ]
    });
    Ext.create('Ext.container.Viewport', {
      layout: {
        type: 'vbox',
        align: 'center',
        pack: 'center'
      },
      items: [container]
    });
  },
  getUserPreferenceParameter: function(appName) {
    var ls, userPreference;
    ls = window.localStorage;
    if (!appName) {
      return;
    }
    userPreference = Ext.decode(ls[appName], true);
    return userPreference || {};
  },
  getParamsJsonFromUrl: function(url) {
    var params;
    if (url.indexOf('?') < 0) {
      return;
    }
    params = url.split('?');
    if (params.length > 0) {
      return Ext.Object.fromQueryString(params[1]);
    }
  },
  windowOnFocus: function() {
    var activePerspective, top;
    window.isActive = true;
    top = this.getTopTabPanel();
    activePerspective = top != null ? top.getActiveTab() : void 0;
    if (activePerspective) {
      activePerspective.startAllHeartBeats();
    }
  },
  windowOnBlur: function() {
    var deactivePerspective, top;
    window.isActive = false;
    top = this.getTopTabPanel();
    if (!top) {
      return;
    }
    deactivePerspective = top.getActiveTab();
    if (deactivePerspective) {
      deactivePerspective.stopAllHeartBeats();
    }
  },
  preventBackspaceEventOnDocument: function() {
    var cm;
    cm = Corefw.util.Common;
    document.onkeydown = cm.preventBackspaceEvent;
  },
  createAjaxErrorHandling: function() {
    return Ext.util.Observable.observe(Ext.data.Connection, {
      requestexception: function(conn, response, options) {
        if (response.status === 500 && Ext.String.startsWith(options.url, 'api/pivot/')) {
          Corefw.Msg.alert('Server Error', 'A server error happened');
        }
      }
    });
  }
});
