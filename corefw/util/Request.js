// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.util.Request', {
  singleton: true,
  loadingMaskDelay: 500,
  loadingMaskHideDelay: 200,
  requestsInProgress: 0,
  currentLoadMask: null,
  externalCallback: '',
  totalPendingRequests: 0,
  objsToUrl3: function(eventURL, localURL, lookupString) {
    var serverUrl, su;
    su = Corefw.util.Startup;
    if (lookupString) {
      lookupString = encodeURIComponent(lookupString);
    }
    if (!eventURL) {
      return;
    }
    if (su.isLocalMode()) {
      if (!localURL) {
        console.log('localUrl not found for :', eventURL);
        return;
      }
      return localURL;
    }
    serverUrl = this.getServerUrl(eventURL, lookupString, arguments);
    return serverUrl;
  },
  getParamObj: function(eventURL, startupObj) {
    var paramObj;
    if (Ext.isObject(eventURL) && eventURL.url) {
      eventURL = eventURL.url;
    }
    paramObj = {
      application: startupObj.application,
      eventURL: eventURL
    };
    return paramObj;
  },
  getServerUrl: function(eventURL, lookupString, args) {
    var paramObj, paramstr, serverUrl, startupObj, su;
    su = Corefw.util.Startup;
    startupObj = su.getStartupObj();
    paramObj = this.getParamObj(eventURL, startupObj);
    paramstr = this.getParamStr(paramObj, args);
    serverUrl = startupObj.urlRoot + paramstr;
    serverUrl = this.appendQueryStrs(serverUrl, lookupString);
    console.log(serverUrl);
    return serverUrl;
  },
  getParamStr: function(paramObj, args) {
    var arg, newArgs, _i, _j, _len, _len1;
    newArgs = [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      newArgs.push(arg);
    }
    newArgs = newArgs.slice(3);
    for (_j = 0, _len1 = newArgs.length; _j < _len1; _j++) {
      arg = newArgs[_j];
      if (typeof arg === 'object') {
        Ext.apply(paramObj, arg);
      }
    }
    return Ext.Object.toQueryString(paramObj);
  },
  appendQueryStrs: function(serverUrl, lookupString) {
    var d, iv, timezoneOffset, userid;
    iv = Corefw.util.InternalVar;
    d = new Date();
    timezoneOffset = d.getTimezoneOffset();
    serverUrl += "&timezoneOffset=" + timezoneOffset;
    if (lookupString !== void 0) {
      serverUrl += "&lookupString=" + lookupString;
    }
    userid = iv.getByNameProperty("CoreApp", 'user');
    if (userid) {
      serverUrl += "&sm_user=" + userid;
    }
    return serverUrl;
  },
  isValidResponse: function(succ, resp) {
    if (!succ || !resp) {
      return false;
    }
    return true;
  },
  isValidResponseObj: function(obj) {
    return this.isValidResponse(obj.success, obj.result);
  },
  prepareUnknowErrorMessage: function() {
    return 'An unknown error occured on the server';
  },
  prepareViolationMessage: function(respObj) {
    var allMsg, msg, msgArray, _i, _len;
    msgArray = respObj.result.violationMessages;
    allMsg = '';
    for (_i = 0, _len = msgArray.length; _i < _len; _i++) {
      msg = msgArray[_i];
      allMsg += msg + '<br>';
    }
    allMsg += '<br>';
    return allMsg;
  },
  hideLoadingMaskTask: null,
  hideLoadMask: function(opts) {
    var delayTime;
    if (!Corefw.util.Request.hideLoadingMaskTask) {
      Corefw.util.Request.hideLoadingMaskTask = new Ext.util.DelayedTask(this.hideLoadMaskHandle, this);
    }
    if (opts.isProgressEnd) {
      delayTime = opts.loadingMaskHideDelay ? opts.loadingMaskHideDelay : this.loadingMaskHideDelay;
      Corefw.util.Request.hideLoadingMaskTask.delay(delayTime);
    }
  },
  hideLoadMaskHandle: function() {
    var currentLoadMask, me, rq;
    me = this;
    rq = Corefw.util.Request;
    currentLoadMask = me.currentLoadMask;
    if (rq.totalPendingRequests > 0) {
      rq.totalPendingRequests -= 1;
    }
    if (currentLoadMask && rq.totalPendingRequests === 0) {
      currentLoadMask.hide();
      currentLoadMask.destroy();
      me.currentLoadMask = null;
    }
  },
  showLoadMask: function(uipath, target, opts) {
    var loadMask, perspectiveWindow, rq, uip, viewport, _ref;
    uip = Corefw.util.Uipath;
    rq = Corefw.util.Request;
    rq.totalPendingRequests += 1;
    if (opts.isProgressEnd || this.currentLoadMask) {
      rq.totalPendingRequests -= 1;
      return false;
    }
    perspectiveWindow = (_ref = uip.uipathToComponent(uipath)) != null ? _ref.up('coreperspectivewindow') : void 0;
    viewport = Ext.ComponentQuery.query('viewport')[0];
    if (target === void 0 || target === null || target.hidden === true) {
      target = perspectiveWindow;
    }
    target = target || perspectiveWindow || viewport;
    if (target && target.rendered && !target.hidden) {
      loadMask = target.setLoading({
        msg: 'Loading'
      });
      if (loadMask) {
        loadMask.getTargetEl().setStyle('z-index', 99999);
        loadMask.getMaskEl().setStyle('z-index', 99998);
      }
      this.currentLoadMask = loadMask;
      return true;
    }
    return false;
  },
  getShortUrl: function(url) {
    var origUrl, retUrl, startupObj, su;
    su = Corefw.util.Startup;
    startupObj = su.getStartupObj();
    if (startupObj && startupObj.urlRoot && startupObj.application) {
      origUrl = startupObj.urlRoot;
      if (Ext.String.startsWith(origUrl, 'data/')) {
        return startupObj.urlRoot;
      }
      retUrl = url.replace(startupObj.urlRoot, '');
      retUrl = retUrl.replace('application=' + startupObj.application + '&eventURL=' + startupObj.application, '');
      retUrl = retUrl.replace(/%2F/g, '/');
    }
    return retUrl;
  },
  applyOptions: function(opts, triggerUipath) {
    var defaultOpts, rq;
    rq = Corefw.util.Request;
    opts = opts || {};
    defaultOpts = {
      beforeRequestFn: function(opts) {
        rq.showLoadMask(triggerUipath, opts.loadMaskTarget, opts);
      },
      afterRequestFn: function(opts) {
        rq.hideLoadMask(opts);
      },
      isProgressEnd: false,
      needFormSubmit: false,
      filefields: []
    };
    Ext.apply(defaultOpts, opts);
    return defaultOpts;
  },
  verifyUrl: function(url, triggerUipath) {
    if (!url || !url.length) {
      return false;
    }
    return true;
  },
  verifyResponse: function(success, response, errMsg, config) {
    var error, obj;
    if (response.timedout === true) {
      this.showTimeoutMsg(errMsg);
      return false;
    }
    if (!this.isValidResponse(success, response)) {
      this.showInvalidResponseMsg(success, response, errMsg);
      return false;
    }
    if (response.responseText) {
      try {
        obj = Ext.decode(response.responseText);
      } catch (_error) {
        error = _error;
        if (/<HTML>.*siteminderagent.*<\/HTML>/.test(response.responseText)) {
          Ext.Msg.alert('WARN', "Session timeout. Please relogin!");
          return;
        }
        throw error;
      }
      if (obj === null) {
        return false;
      }
      if (obj.success !== null && obj.result) {
        if (!this.isValidResponseObj(obj)) {
          this.showInvalidResponseObjMsg(obj, config);
          return false;
        }
      }
    }
    return true;
  },
  showTimeoutMsg: function(errMsg) {
    var iv;
    iv = Corefw.util.InternalVar;
    errMsg = iv.getByNameProperty('msg', 'timedout');
    errMsg = errMsg || 'The request you sent is timed out!';
    Ext.Msg.alert('ERROR', errMsg);
  },
  sessionAboutToTimeoutTask: null,
  maxInactiveInterval: null,
  initializationSessionAboutToTimeoutTask: function() {
    var mainCache, _ref;
    mainCache = Corefw.util.Cache.getMainCache();
    if ((((_ref = mainCache._myProperties) != null ? _ref.maxInactiveInterval : void 0) != null) && mainCache._myProperties.maxInactiveInterval > 0) {
      Corefw.util.Request.maxInactiveInterval = (mainCache._myProperties.maxInactiveInterval - 60) * 1000;
      Corefw.util.Request.sessionAboutToTimeoutTask = new Ext.util.DelayedTask(this.showSessionAboutToExpireMsg, this);
      return;
    }
  },
  runSessionAboutToTimeOutTask: function() {
    var rq, _ref;
    rq = Corefw.util.Request;
    if ((_ref = rq.sessionAboutToTimeoutTask) != null) {
      _ref.delay(rq.maxInactiveInterval);
    }
  },
  showSessionAboutToExpireMsg: function() {
    var countDownNum, countDownNumEl, countDownTask, errMsg, iv, warnMessageBox;
    iv = Corefw.util.InternalVar;
    errMsg = iv.getByNameProperty('msg', 'timedout');
    errMsg = errMsg || 'Your session will expire in <span class="countDownNum"></span> seconds. ' + 'Would you like to continue your session?';
    warnMessageBox = Ext.Msg.show({
      title: 'WARN',
      msg: errMsg,
      buttons: Ext.Msg.YES,
      fn: function() {
        Corefw.util.Request.runSessionAboutToTimeOutTask();
        Ext.TaskManager.stop(countDownTask);
        Corefw.util.Request.activeSession();
      },
      icon: Ext.Msg.QUESTION
    });
    countDownNumEl = warnMessageBox.el.down('.countDownNum');
    countDownNum = 60;
    countDownTask = Ext.TaskManager.start({
      interval: 1000,
      repeat: 61,
      run: function() {
        var eDateTime;
        if (countDownNum === 0) {
          eDateTime = Ext.Date.format(new Date(), 'm/d/Y H:i:s');
          Ext.Msg.alert('WARN', "Your session was expired at <span style='font-weight: 600'>" + eDateTime + "</span>. Please relogin!");
        }
        countDownNumEl.setHTML(countDownNum--);
      }
    });
  },
  activeSession: function() {
    var aciveSessionEvent, eventURL, mainCache, rq, _ref;
    rq = Corefw.util.Request;
    mainCache = Corefw.util.Cache.getMainCache();
    aciveSessionEvent = (_ref = mainCache._myProperties.events) != null ? _ref['ONACTIVESESSION'] : void 0;
    if (!aciveSessionEvent) {
      return;
    }
    eventURL = rq.objsToUrl3(aciveSessionEvent);
    return rq.sendRequest5(eventURL);
  },
  showInvalidResponseMsg: function(success, response, errMsg) {
    if (errMsg) {
      console.log(errMsg);
    } else {
      console.error('Did not receive a valid response for the element event object: success, response: ', success, response);
    }
  },
  showInvalidResponseObjMsg: function(obj, config) {
    var errorMsg, violationMessages, violationType, _ref, _ref1;
    violationMessages = ((_ref = obj.result) != null ? _ref.violationMessages : void 0) || [];
    violationType = ((_ref1 = obj.result) != null ? _ref1.violationType : void 0) || 'Error';
    violationType = violationType.charAt(0).toUpperCase() + violationType.slice(1);
    errorMsg = violationMessages.join(",");
    errorMsg = errorMsg || 'Server Error.';
    Ext.Msg.alert('ERROR', violationType + ": " + errorMsg);
    console.error('ERROR: invalid response for URL:');
    console.error('      ', this.getShortUrl(config.url));
    console.error('   Message type, errors: ', violationType, violationMessages);
  },
  prepareCallback: function(options, errMsg, callbackFunc, scope, ev, triggerUipath) {
    var callback, rq;
    rq = Corefw.util.Request;
    callback = function(config, success, response) {
      var obj;
      options.isProgressEnd = true;
      rq.runSessionAboutToTimeOutTask();
      options.afterRequestFn(options);
      if (!rq.verifyResponse(success, response, errMsg, config)) {
        return;
      }
      obj = Ext.decode(response.responseText);
      if (callbackFunc) {
        if (scope) {
          callbackFunc.call(scope, obj, ev, triggerUipath);
        } else {
          callbackFunc(obj, ev, triggerUipath);
        }
      } else {
        console.log('no callback found');
      }
    };
    return callback;
  },
  prepareConfig: function(url, callback, postData, method, isAsync) {
    var config;
    var urlMap ={
      'startup.json':'startup.json',
      'api/delegator?data.json=':'data.json',
      'api/delegator?application=SampleApplication&eventURL=RetailOperationalDashboardApplication%2FglobalDataProcessingCalPerspective%2Fview%2FgridDetailsElement%2Fgrid%2FONBEFOREEDIT&timezoneOffset=300':'data2.json'
    };
    url = urlMap[url];
    if(!url){
      url='test.json';
    }
    config = {
      async: isAsync,
      url: url,
      method: method || 'POST',
      callback: callback
    };
    this.setAjaxTimeout(config);
    this.setRequestHeaders(config, postData);
    return config;
  },
  prepareRequest: function(url, callbackFunc, triggerUipath, postData, errMsg, method, scope, ev, options, isAsync) {
    var ajaxCallback, config, form, needFormSubmit, reqHandler, request, requestArgs, requestFn, rq, submitUrl, triggerComp;
    rq = Corefw.util.Request;
    triggerComp = Corefw.util.Uipath.uipathToComponent(triggerUipath);
    if (triggerComp && triggerComp.showLoadMaskOnMe) {
      options.loadMaskTarget = triggerComp.getLoadMaskTarget();
      options.loadingMaskDelay = triggerComp.loadingMaskDelay;
      options.loadingMaskHideDelay = triggerComp.loadingMaskHideDelay;
    }
    ajaxCallback = this.prepareCallback(options, errMsg, callbackFunc, scope, ev, triggerUipath);
    needFormSubmit = options.needFormSubmit;
    if (needFormSubmit) {
      form = this.createFormForSubmit(options, postData);
      submitUrl = url.replace('api/delegator', "api/delegator/fileupload");
      requestFn = Ext.Ajax.upload;
      reqHandler = {
        success: function(resq) {
          resq.responseText = resq.responseXML.body.innerHTML;
          if (form) {
            Ext.removeNode(form);
          }
          ajaxCallback(null, true, resq);
        }
      };
      requestArgs = [form, submitUrl, null, reqHandler];
    } else {
      config = this.prepareConfig(url, ajaxCallback, postData, method, isAsync);
      requestFn = Ext.Ajax.request;
      requestArgs = [config];
    }
    request = {
      send: function() {
        rq.setLoadingMask(options);
        requestFn.apply(Ext.Ajax, requestArgs);
      }
    };
    return request;
  },
  setAjaxTimeout: function(config) {
    var errMsg, iv, startupObj, su, timeout;
    su = Corefw.util.Startup;
    iv = Corefw.util.InternalVar;
    startupObj = su.getStartupObj();
    if (startupObj) {
      timeout = startupObj.ajaxTimeout;
      errMsg = startupObj.ajaxTimeoutMessage;
      iv.setByNameProperty('msg', 'timedout', errMsg);
      if (timeout) {
        config.timeout = timeout;
      }
    }
  },
  setRequestHeaders: function(config, postData) {
    var encStr, postObj, postStr;
    if (postData) {
      config.headers = {
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"
      };
      encStr = Ext.encode(postData);
      postObj = {
        data: encStr
      };
      postStr = Ext.Object.toQueryString(postObj);
      config.params = postStr;
    }
  },
  createFormForSubmit: function(options, postData) {
    var file, filefields, form, inp, input, _i, _len;
    filefields = options.filefields;
    form = document.createElement('form');
    for (_i = 0, _len = filefields.length; _i < _len; _i++) {
      file = filefields[_i];
      if (file.isInvalid) {
        continue;
      }
      form.appendChild(file.fileInputEl.dom);
      inp = document.createElement('input');
      inp.name = "fieldUIPath";
      inp.value = file.up().uipath;
      form.appendChild(inp);
    }
    input = document.createElement('input');
    input.name = 'data';
    input.value = Ext.encode(postData);
    form.appendChild(input);
    Ext.get(form).hide();
    Ext.getBody().appendChild(form);
    return form;
  },
  setLoadingMask: function(options) {
    var delay, func;
    delay = options.loadingMaskDelay ? options.loadingMaskDelay : this.loadingMaskDelay;
    func = Ext.Function.createDelayed(function() {
      options.beforeRequestFn(options);
    }, delay);
    func();
  },
  sendRequest5: function(url, callbackFunc, triggerUipath, postData, errMsg, method, scope, ev, opts, isAsync) {
    var options, request;
    if (isAsync == null) {
      isAsync = true;
    }
    if (!Corefw.util.Observer.isEventGranted(triggerUipath, this.getEventTypeByUrl(url))) {
      return;
    }
    if (!this.verifyUrl(url, triggerUipath)) {
      return;
    }
    url = this.processRequestUrl(url, {
      triggerUipath: triggerUipath
    });
    options = this.applyOptions(opts, triggerUipath);
    request = this.prepareRequest(url, callbackFunc, triggerUipath, postData, errMsg, method, scope, ev, options, isAsync);
    request.send();
  },
  getEventTypeByUrl: function(url) {
    var matchStr;
    if (url == null) {
      url = '';
    }
    matchStr = url.match(/ON[A-Z]*/);
    if (!matchStr) {
      return url;
    }
    return matchStr[0];
  },
  processResponseObject: function(respObj, ev, triggerUipath, preProcess, disablePageSwitch) {
    var Observer, ch, comp, editorHost, index, newCache, oneRespObj, respObjList, rq, uip, _i, _len, _ref;
    rq = Corefw.util.Request;
    uip = Corefw.util.Uipath;
    ch = Corefw.util.Cache;
    Observer = Corefw.util.Observer;
    Observer.disableAllEvents(triggerUipath);
    Observer.updateStateFromResponse(respObj, Observer.States.SYNCED);
    Observer.suspend();
    if (!respObj) {
      comp = uip.uipathToComponent(uipath) || {};
      editorHost = comp.grid || comp.tree;
      if (editorHost) {
        if ((_ref = editorHost.ctrl) != null) {
          _ref.eventsCount--;
        }
        editorHost.stopOpeningEditor = false;
      }
      return;
    }
    respObjList = !Ext.isArray(respObj) ? [respObj] : respObj;
    if (rq.externalCallback) {
      rq.doExternalCallback(triggerUipath, respObjList, ev);
    }
    for (index = _i = 0, _len = respObjList.length; _i < _len; index = ++_i) {
      oneRespObj = respObjList[index];
      if (!oneRespObj || oneRespObj.isIgnored) {
        continue;
      }
      if (!oneRespObj.widgetType) {
        rq.processUpdating(oneRespObj);
        continue;
      }
      newCache = ch.parseJsonToCache(oneRespObj, index);
      rq.processRendering(newCache, ev, preProcess, disablePageSwitch, triggerUipath);
      rq.processUserPrefrence(oneRespObj);
      Corefw.util.Render.flushLayouts();
    }
    Observer.resume();
  },

  /*
  		process the request url additionally
  		@param {String} url
  			the request url
  		@param {Object} opts
  			- startupObj
  			- triggerUipath
   */
  processRequestUrl: function(url, opts) {
    var st, startUpUrlParams, startupObj, triggerUipath;
    if (opts == null) {
      opts = {};
    }
    if (!opts.startupObj) {
      st = Corefw.util.Startup;
      startupObj = st.getStartupObj() || {};
    } else {
      startupObj = opts.startupObj;
    }
    triggerUipath = opts.triggerUipath;
    startUpUrlParams = startupObj.startUpUrlParams;
    if (startupObj.paramModel && startUpUrlParams && triggerUipath) {
      if (0 > url.indexOf('?')) {
        url = url + '?';
      } else {
        url = url + '&';
      }
      url = url + Ext.Object.toQueryString(startUpUrlParams);
    }
    return url;
  },
  doExternalCallback: function(triggerUipath, respObjList, ev) {
    var asyncFunc, me;
    me = this;
    asyncFunc = Ext.Function.createDelayed(function() {
      var e;
      try {
        eval(me.externalCallback + '(triggerUipath, respObjList, ev)');
      } catch (_error) {
        e = _error;
        console.log('Error or no external callback "' + me.externalCallback + '" defined in startup.json found.', e);
      }
    }, 1);
    asyncFunc();
  },
  processUpdating: function(oneRespObj) {
    var comp, uipath;
    uipath = oneRespObj.uipath;
    comp = Ext.ComponentQuery.query('[uipath=' + uipath + ']')[0];
    if (!comp) {
      console.error('Undefined type and no component can be found!');
      return;
    }
    if (typeof comp.updateRelatedCache === "function") {
      comp.updateRelatedCache(oneRespObj);
    }
    return typeof comp.updateVisual === "function" ? comp.updateVisual(oneRespObj) : void 0;
  },
  processRendering: function(newCache, ev, preProcess, disablePageSwitch, triggerUipath) {
    var coretype, cq, key, oneCache, p, parentComp, props, uip, uipath, _ref;
    uip = Corefw.util.Uipath;
    cq = Ext.ComponentQuery;
    for (key in newCache) {
      oneCache = newCache[key];
      props = oneCache._myProperties;
      if (typeof preProcess === "function") {
        preProcess(props);
      }
      coretype = props != null ? (_ref = props.coretype) != null ? _ref.toLowerCase() : void 0 : void 0;
      uipath = props.uipath;
      parentComp = uip.uipathToParentComponent(uipath);
      switch (coretype) {
        case 'perspective':
        case 'view':
        case 'element':
        case 'compositeelement':
        case 'field':
        case 'fieldset':
          if (parentComp) {
            parentComp.replacingChild = true;
            parentComp.replaceChild(oneCache, ev, disablePageSwitch);
            parentComp.replacingChild = false;
          }
          break;
        case 'toolbar':
          if (parentComp) {
            parentComp.updateToolbar(oneCache);
          }
          break;
        case 'breadcrumb':
          if (parentComp) {
            parentComp.replaceBreadcrumb(oneCache);
          }
          break;
        case 'messagebox':
          p = oneCache._myProperties;
          if (p.closed === true) {
            cq.query("messagebox[uipath=" + uipath + "]").forEach(function(m) {
              return m.destroy();
            });
            break;
          }
          Ext.create('Corefw.view.MessageBox', {
            cache: oneCache,
            triggerUipath: triggerUipath,
            uipath: uipath
          });
          break;
        case 'notification':
          Corefw.view.ntf.NotificationBoard.notify(oneCache);
          break;
        case 'nav':
          if (parentComp && parentComp.updateNavigation) {
            parentComp.updateNavigation(oneCache);
          }
      }
    }
  },
  processUserPrefrence: function(oneRespObj) {
    var application, su, userPreference, userPreferenceValue;
    su = Corefw.util.Startup;
    userPreference = oneRespObj.userPreference;
    if (userPreference != null) {
      userPreferenceValue = Ext.encode(userPreference.preferenceMap);
      application = su.getStartupObj().application;
      window.localStorage[application] = userPreferenceValue;
    }
  },
  getEventTypeByUrl: function(url) {
    var name, p, reqParams, urlUnits, value, _i, _len, _ref;
    if (Ext.isEmpty(url)) {
      return null;
    } else {
      reqParams = url.split('&');
      for (_i = 0, _len = reqParams.length; _i < _len; _i++) {
        p = reqParams[_i];
        _ref = p.split('='), name = _ref[0], value = _ref[1];
        if (name === 'eventURL') {
          break;
        }
      }
      urlUnits = value != null ? value.split('%2F') : void 0;
      if (urlUnits && urlUnits.length > 0) {
        return urlUnits[urlUnits.length - 1];
      }
    }
  }
});
