// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.util.InternalVar', {
  singleton: true,
  internalCache: {},
  deleteByName: function(name) {
    delete this.internalCache[name];
  },
  deleteByUipathCascade: function(uipath) {
    var cache, caches;
    caches = this.internalCache;
    for (cache in caches) {
      if (cache.toString().indexOf(uipath) !== -1) {
        delete caches[cache];
      }
    }
  },
  getByName: function(name) {
    var retObj;
    retObj = this.internalCache[name];
    if (!retObj) {
      retObj = {};
      this.internalCache[name] = retObj;
    }
    return retObj;
  },
  getByNameProperty: function(name, propertyName) {
    var retObj;
    retObj = this.getByName(name);
    return retObj[propertyName];
  },
  setByNameProperty: function(name, propertyName, propertyValue) {
    var retObj;
    retObj = this.getByName(name);
    retObj[propertyName] = propertyValue;
    return retObj;
  },
  deleteByNameProperty: function(name, propertyName) {
    var retObj;
    retObj = this.getByName(name);
    delete retObj[propertyName];
  },
  getArray: function(name) {
    var retArray;
    retArray = this.internalCache[name];
    if (!retArray) {
      retArray = [];
      this.internalCache[name] = retArray;
    }
    return retArray;
  },
  addToArray: function(name, value) {
    var ar;
    ar = this.getArray(name);
    ar.push(value);
  },
  removeIndexFromArray: function(name, index) {
    var ar;
    ar = this.getArray(name);
    if (ar.length > index) {
      Ext.Array.splice(ar, index, 1);
    }
  },
  addTaskByUipath: function(uipath, heartBeatName) {
    var retObj, runner, taskName;
    taskName = uipath;
    if (heartBeatName) {
      taskName = taskName + '/' + heartBeatName;
    }
    retObj = this.getByName('TASKRUNNER');
    runner = new Ext.util.TaskRunner();
    retObj[taskName] = runner;
    return retObj[taskName];
  },
  getTaskByUipath: function(uipath, heartBeatName) {
    var retObj, taskName;
    taskName = uipath;
    if (heartBeatName) {
      taskName = taskName + '/' + heartBeatName;
    }
    retObj = this.getByName('TASKRUNNER');
    return retObj[taskName];
  },
  deleteTaskByUipath: function(uipath, heartBeatName) {
    var retObj, taskName;
    taskName = uipath;
    if (heartBeatName) {
      taskName = taskName + '/' + heartBeatName;
    }
    retObj = this.getByName('TASKRUNNER');
    retObj[taskName].destroy();
    delete retObj[taskName];
  },
  getByUipath: function(uipath) {
    return this.getByName(uipath);
  },
  getByUipathProperty: function(uipath, propertyName) {
    return this.getByNameProperty(uipath, propertyName);
  },
  setByUipathProperty: function(uipath, propertyName, propertyValue) {
    return this.setByNameProperty(uipath, propertyName, propertyValue);
  },
  deleteUipathProperty: function(uipath, propertyName) {
    var obj;
    obj = this.getByUipath(uipath);
    delete obj[propertyName];
  },
  clearTimersForUipath: function(uipath) {
    var retObj, taskName;
    retObj = this.getByName('TASKRUNNER');
    for (taskName in retObj) {
      if (taskName.indexOf(uipath) === 0) {
        retObj[taskName].destroy();
        delete retObj[taskName];
      }
    }
  }
});
