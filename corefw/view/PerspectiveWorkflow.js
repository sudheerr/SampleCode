// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.PerspectiveWorkflow', {
  extend: 'Corefw.view.Perspective',
  xtype: 'coreperspectiveworkflow',
  mixins: ['Corefw.mixin.Perspective'],
  initComponent: function() {
    var props, _ref, _ref1;
    this.workflowStyle = (_ref = this.cache._myProperties) != null ? (_ref1 = _ref.layout) != null ? _ref1.style : void 0 : void 0;
    props = this.cache._myProperties;
    props.workflowType = true;
    this.callParent(arguments);
  },
  afterRender: function() {
    this.callParent(arguments);
    this.tabBar.hide();
  },
  addToolbar: function(toolbarCache) {
    this.addToolbarNew(toolbarCache, true);
  },
  createOrUpdateProgressIndicator: function() {
    var progressIndicator;
    if (this.progressIndicator) {
      this.progressIndicator.updateIndicator(this.cache);
      return;
    }
    progressIndicator = this.progressIndicator = Ext.widget('coreprogressindicator', {
      cache: this.cache,
      isSequential: this.cache._myProperties.layout.style === 'WORKFLOW_SEQUENTIAL' ? true : false
    });
    return this.addDocked(progressIndicator);
  },
  addNavs: function(props) {
    var rdr;
    rdr = Corefw.util.Render;
    rdr.renderNavs(props, this, true);
  },
  generatePostData: function() {
    var postData, toolbarComp, toolbarPostData, toolbarUIPath, toptabpanel, uip, _ref;
    uip = Corefw.util.Uipath;
    postData = this.callParent(arguments);
    toptabpanel = this.up('toptabpanel');
    if (toptabpanel) {
      toolbarUIPath = (_ref = this.cache._myProperties.toolbar) != null ? _ref.uipath : void 0;
      if (toolbarUIPath) {
        toolbarComp = uip.uipathToComponent(toolbarUIPath);
        if (toolbarComp) {
          toolbarPostData = toolbarComp.generatePostData();
          postData.toolbar = toolbarPostData;
        }
      }
    }
    return postData;
  }
});
