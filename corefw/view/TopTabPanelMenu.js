// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.TopTabPanelMenu', {
  alias: 'plugin.topTabPanelMenu',
  uses: ['Ext.menu.Menu'],
  constructor: function(config) {
    config = config || {};
    Ext.apply(this, config);
  },
  init: function(toptabpanel) {
    var me;
    me = this;
    Ext.apply(toptabpanel, me.parentOverrides);
    me.toptabpanel = toptabpanel;
    toptabpanel.on({
      render: function() {
        me.tabBar = toptabpanel.tabBar;
        me.layout = me.tabBar.layout;
        me.layout.overflowHandler.handleOverflow = Ext.Function.bind(me.showMenuButton, me);
        me.layout.overflowHandler.clearOverflow = Ext.Function.createSequence(me.layout.overflowHandler.clearOverflow, me.hideMenuButton, me);
      },
      single: true
    });
  },
  showMenuButton: function() {
    var me, result;
    me = this;
    result = Ext.getClass(me.layout.overflowHandler).prototype.handleOverflow.apply(me.layout.overflowHandler, arguments);
    if (!me.menuButton) {
      me.menuButton = me.tabBar.body.createChild({
        cls: Ext.baseCSSPrefix + 'tab-tabdropmenu-right'
      }, me.tabBar.body.child('.' + Ext.baseCSSPrefix + 'box-scroller-right'));
      me.menuButton.on('click', me.showTabMenu, me);
    }
    me.menuButton.show();
    result.reservedSpace += me.menuButton.getWidth();
    return result;
  },
  hideMenuButton: function() {
    var me;
    me = this;
    if (me.menuButton) {
      me.menuButton.hide();
    }
  },
  showTabMenu: function(e) {
    var buttonPosition, me, position;
    me = this;
    if (me.tabsMenu) {
      me.tabsMenu.removeAll();
    } else {
      me.tabsMenu = Ext.create('Ext.menu.Menu', {
        showSeparator: false,
        cls: 'tabBar-scroller-menu'
      });
      me.toptabpanel.on('destroy', me.tabsMenu.destroy, me.tabsMenu);
    }
    me.showTabMenuItems();
    position = Ext.get(e.getTarget());
    buttonPosition = position.getXY();
    buttonPosition[1] += 24;
    me.tabsMenu.showAt(buttonPosition);
  },
  showTabMenuItems: function() {
    var me, toptabpanel;
    me = this;
    toptabpanel = me.toptabpanel;
    toptabpanel.items.each(function(item) {
      me.tabsMenu.add(me.genMenuItems(item));
    });
  },
  genMenuItems: function(item) {
    var displayMenu;
    displayMenu = {
      text: item.title,
      handler: this.activeTab,
      scope: this,
      tabToShow: item
    };
    if (item.tab.active) {
      displayMenu.cls = 'tabBar-scroller-menu-item-active';
    }
    return displayMenu;
  },
  activeTab: function(menuItem) {
    this.toptabpanel.setActiveTab(menuItem.tabToShow);
  }
});
