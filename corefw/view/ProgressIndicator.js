// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.ProgressIndicator', {
  extend: 'Ext.panel.Panel',
  xtype: 'coreprogressindicator',
  padding: '6 0 6 0',
  border: false,
  cls: 'progressIndicator',
  listeners: {
    add: function(ct, comp, index) {
      var len;
      len = ct.visibleViews.length;
      if (comp.xtype !== 'coreprogressseparator' && index < (2 * len - 2)) {
        return ct.add({
          xtype: 'coreprogressseparator',
          isSequential: ct.isSequential
        });
      }
    },
    afterrender: function(ct, eOpts) {
      var i, step, steps, version, _i, _len, _results;
      version = Corefw.util.Startup.getThemeVersion();
      if (version === 2) {
        if (ct.isSequential) {
          steps = this.getSteps();
          i = 1;
          _results = [];
          for (_i = 0, _len = steps.length; _i < _len; _i++) {
            step = steps[_i];
            _results.push(step.el.dom.children[0].innerHTML = i++);
          }
          return _results;
        }
      }
    }
  },
  layout: {
    type: 'hbox',
    align: 'left'
  },
  items: [],
  initComponent: function() {
    var me, steps, version;
    version = Corefw.util.Startup.getThemeVersion();
    if (version === 2) {
      this.padding = '10 0 0 10';
      if (this.isSequential) {
        this.addCls("workflow-sequential");
      } else {
        this.addCls("workflow-nonsequential");
      }
    }
    steps = this.prepareSteps();
    this.items = steps;
    this.callParent(arguments);
    me = this;
    Ext.merge(me.layout, me.initialConfig.layout);
    me.layout.align = 'left';
    return me.layout.overflowHandler = new Ext.layout.container.boxOverflow.Scroller(me.layout);
  },
  prepareSteps: function(cache) {
    var items, key, navConfig, oneCache, perspectiveCache, viewProps, visibleViews;
    items = [];
    visibleViews = this.visibleViews = [];
    perspectiveCache = cache || this.cache;
    for (key in perspectiveCache) {
      oneCache = perspectiveCache[key];
      if (key !== '_myProperties' && oneCache._myProperties.widgetType.toLowerCase() === 'view') {
        viewProps = oneCache._myProperties;
        if (viewProps.visible && !viewProps.popup) {
          visibleViews.push(viewProps);
          navConfig = {
            xtype: 'coreprogressstep',
            viewProps: viewProps
          };
          items.push(navConfig);
        }
      }
    }
    return items;
  },
  getSteps: function() {
    return this.query('coreprogressstep');
  },
  updateIndicator: function(cache) {
    var isDirty;
    isDirty = this.checkCacheStructureDirty(cache);
    if (isDirty) {
      this.recreateSteps(cache);
    } else {
      this.updateSteps(cache);
    }
  },
  checkCacheStructureDirty: function(cache) {
    var currentKeys, keys, visibleViewKeys;
    keys = Object.keys(cache);
    visibleViewKeys = keys.filter(function(key) {
      var props;
      props = cache[key]._myProperties;
      return key !== '_myProperties' && props.widgetType === 'VIEW' && props.visible && !props.popup;
    });
    currentKeys = this.visibleViews.map(function(view) {
      return view.name;
    });
    return visibleViewKeys.length !== currentKeys.length || !visibleViewKeys.every(function(key, index) {
      return key === currentKeys[index];
    });
  },
  recreateSteps: function(cache) {
    var steps;
    this.suspendLayout = true;
    this.removeAll();
    steps = this.prepareSteps(cache);
    this.add(steps);
    this.suspendLayout = false;
    Corefw.util.Render.appendPendingLayout(this);
    return this.doLayout();
  },
  updateSteps: function(cache) {
    var name, newProps, newStatus, step, steps, _i, _len, _results;
    steps = this.getSteps();
    _results = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      name = step.viewProps.name;
      newProps = cache[name]._myProperties;
      newStatus = step.calStatus(newProps);
      if (newStatus !== step.status) {
        _results.push(step.setStatus(newStatus));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
});
