// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.ProgressStep', {
  extend: 'Ext.Component',
  xtype: 'coreprogressstep',
  relativeImgPath: 'resources/images/progressIndicatorImages/',
  imgExtension: '.png',
  renderTpl: '<div id={id} class="{status} step">' + '<label>' + '{title}' + '</label>' + '<tpl>' + '{imgHtml}' + '</tpl>' + '</div>',
  initComponent: function() {
    var config, status, version, viewProps;
    version = Corefw.util.Startup.getThemeVersion();
    viewProps = this.viewProps;
    status = this.calStatus(viewProps);
    if (version === 2) {
      this.renderTpl = '<div id={id} class="{status} step">' + '<span>&nbsp;</span>' + '<label>' + '{title}' + '</label>' + '</div>';
    }
    config = {
      title: viewProps.title,
      status: status,
      visible: viewProps.visible,
      disabled: !viewProps.enabled,
      uipath: viewProps.uipath + '/progressStep'
    };
    return Ext.apply(this, config);
  },
  calStatus: function(viewProps) {
    var errArray, status, _ref;
    if (viewProps.valiationStatus === 'FAILED') {
      return 'error';
    }
    if (viewProps.active) {
      status = 'current';
    } else if (viewProps.visited) {
      errArray = (_ref = viewProps.messages) != null ? _ref.ERROR : void 0;
      if (errArray && errArray.length) {
        status = 'error';
      } else {
        if (viewProps.completed === false) {
          status = 'draft';
        } else {
          status = 'complete';
        }
      }
    } else {
      status = 'incomplete';
    }
    if (viewProps.enabled === false) {
      status = 'disable';
    }
    return status;
  },
  initRenderData: function() {
    var imgHtml, me, status, version;
    version = Corefw.util.Startup.getThemeVersion();
    me = this;
    status = me.status;
    imgHtml = this.getImgHtml(status);
    return Ext.applyIf(me.callParent(arguments), {
      title: me.title,
      status: status,
      imgHtml: version !== 2 ? imgHtml : ''
    });
  },
  renderSelectors: {
    statusDiv: '.step',
    statusImg: '.step img'
  },
  getImgSrc: function(status) {
    return this.relativeImgPath + status + this.imgExtension;
  },
  getImgHtml: function(status) {
    var imgSrc;
    imgSrc = this.getImgSrc(status);
    return '<img src="' + imgSrc + '">';
  },
  setStatus: function(status) {
    var img, imgEl, version;
    version = Corefw.util.Startup.getThemeVersion();
    this.status = status;
    this.statusDiv.dom.className = status + ' step x-box-item';
    if (status === 'current' || status === 'complete' || status === 'error' || status === 'incomplete') {
      this.enable();
      if (version !== 2) {
        if (this.statusImg) {
          this.statusImg.dom.src = this.getImgSrc(status);
        } else {
          img = document.createElement('img');
          img.src = this.getImgSrc(status);
          imgEl = this.statusDiv.appendChild(img);
          this.statusImg = imgEl;
        }
      }
    } else {
      this.enable();
      if (version !== 2) {
        if (this.statusImg) {
          this.statusImg.remove();
          this.statusImg = null;
        }
      }
    }
    if (status === 'disable') {
      return this.disable();
    }
  },
  listeners: {
    click: {
      element: 'el',
      fn: function(ev) {
        var step, tab, uipath, view;
        step = Ext.getCmp(this.id);
        uipath = step.viewProps.uipath;
        view = Ext.ComponentQuery.query('[uipath=' + uipath + ']')[0];
        tab = view.tab;
        return tab.fireEvent('click', tab);
      }
    }
  }
});
