// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.TopTabPanel', {
  extend: 'Ext.tab.Panel',
  xtype: 'toptabpanel',
  margin: 8,
  plain: true,
  topToolbars: {},
  style: {
    border: 'none'
  },
  bodyStyle: {
    border: 'none'
  },
  appObj: {
    themeConfig: {},
    name: null,
    cssbyPath: null
  },
  isDeferRenderOn: false,
  listeners: {
    added: function(me, container, pos, eOpts) {
      if (Corefw.util.Startup.getThemeVersion() !== 2) {
        me.dynamicLoadStyleSheet();
      }
      me.deferRender();
    }
  },
  initComponent: function() {
    Ext.apply(this, this.prepareThemeConfig());
    this.uipath = this.cache._myProperties.uipath;
    Corefw.customapp.Main.mainEntry('topPanelInit', this);
    this.addListeners();
    this.callParent(arguments);
  },
  deferRender: function() {
    if (!this.isDeferRenderOn) {
      this.addBreadcrumb();
      this.addPerspectives();
    }
  },
  addSeparatorLine: function(perspective) {
    var breadcrumb, child, hasBreadcrumb, hasTabbar, hasToolbar, hasTracker, progresstracker, tabbar, toolBar, toolBars, toolbar, toolbarPath, _i, _len;
    if (perspective) {
      tabbar = this.tabBar;
      breadcrumb = this.breadcrumbObj;
      toolBars = this.query("coretoolbar");
      if (perspective.toolbarObj && toolBars.length > 0) {
        toolbarPath = perspective.toolbarObj.uipath;
        for (_i = 0, _len = toolBars.length; _i < _len; _i++) {
          toolBar = toolBars[_i];
          if (toolBar.uipath === toolbarPath) {
            toolbar = toolBar;
          }
        }
      }
      progresstracker = perspective.progressIndicator;
      hasTabbar = tabbar && !tabbar.isHidden();
      hasBreadcrumb = breadcrumb && !breadcrumb.isHidden();
      hasToolbar = toolbar && !toolbar.isHidden();
      hasTracker = progresstracker && !progresstracker.isHidden();
      if (hasTabbar && (hasBreadcrumb || hasToolbar || hasTracker)) {
        tabbar.addCls("bar-separator-bottom-line");
      }
      if (hasBreadcrumb && hasTabbar) {
        breadcrumb.addCls("bar-separator-top-line");
      }
      if (hasBreadcrumb && (hasToolbar || hasTracker)) {
        breadcrumb.addCls("bar-separator-bottom-line");
      }
      if (hasToolbar && (hasTabbar || hasBreadcrumb)) {
        toolbar.addCls("bar-separator-top-line");
      }
      if (hasToolbar && hasTracker) {
        toolbar.addCls("bar-separator-bottom-line");
      }
      if (hasBreadcrumb && hasToolbar) {
        child = perspective.child(0);
        if (child instanceof Ext.tab.Bar && !child.isHidden() && perspective.activeTab && perspective.activeTab.title) {
          breadcrumb.removeCls("bar-separator-bottom-line");
          toolbar.removeCls("bar-separator-top-line");
        }
      }
      if (hasTabbar && !hasBreadcrumb && hasToolbar) {
        child = perspective.child(0);
        if (child instanceof Ext.tab.Bar && !child.isHidden() && perspective.activeTab && perspective.activeTab.title) {
          tabbar.removeCls("bar-separator-bottom-line");
          toolbar.removeCls("bar-separator-top-line");
        }
      }
      if (hasTracker && (hasTabbar || hasBreadcrumb || hasToolbar)) {
        progresstracker.addCls("bar-separator-top-line");
      }
      this.doLayout();
    }
  },
  prepareThemeConfig: function() {
    var _ref;
    return ((_ref = this.appObj) != null ? _ref.themeConfig : void 0) || {};
  },
  addListeners: function() {
    var additionalListeners;
    this.listeners = this.listeners || {};
    additionalListeners = {
      tabchange: this.onRawTabChange,
      tabchangeactual: this.onRealTabChange
    };
    Ext.apply(this.listeners, additionalListeners);
  },
  dynamicLoadStyleSheet: function() {
    var callback, i, list, me, name, styleSheet, styleSheetName, _i, _len, _ref;
    _ref = [this.appObj.name, this.appObj.cssbyPath, this], name = _ref[0], list = _ref[1], me = _ref[2];
    if (list && list.length) {
      callback = function() {
        me.doLayout();
      };
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        styleSheet = list[i];
        styleSheetName = name + '-' + 'DynamicStyleSheet' + i;
        Ext.util.CSS.swapStyleSheet(styleSheetName, styleSheet);
        this.styleOnload(styleSheetName, callback);
      }
    }
  },
  styleOnload: function(styleSheetName, callback) {
    var isLoaded, link, readProp, task;
    isLoaded = false;
    link = Ext.DomQuery.selectNode('#' + styleSheetName);
    readProp = function() {
      var ex;
      try {
        if ((link.sheet && link.sheet.cssRules.length > 0) || (link.styleSheet && link.styleSheet.cssText.length > 0) || (link.innerHTML && link.innerHTML.length > 0)) {
          isLoaded = true;
        }
      } catch (_error) {
        ex = _error;
        if (ex.name && ex.name === 'NS_ERROR_DOM_SECURITY_ERR') {
          isLoaded = true;
        }
      }
      if (isLoaded) {
        callback();
        Ext.TaskManager.destroy(task);
      }
    };
    task = Ext.TaskManager.start({
      run: readProp,
      interval: 100,
      repeat: 100
    });
  },
  showTopToolbar: function(toolbarPath) {
    var topToolbar;
    topToolbar = this.topToolbars[toolbarPath];
    if (topToolbar) {
      topToolbar.show();
    }
  },
  addTopToolbar: function(toolbar) {
    var addedComponents, oldToolbarComp, toolbarPath, topToolbars, uip;
    this.suspendLayout = true;
    uip = Corefw.util.Uipath;
    this.hideAllTopToolbars();
    toolbarPath = toolbar.uipath;
    oldToolbarComp = uip.uipathToComponent(toolbarPath);
    if (oldToolbarComp) {
      this.removeDocked(oldToolbarComp);
    }
    topToolbars = this.topToolbars;
    addedComponents = this.addDocked(toolbar, 1);
    if (addedComponents[0]) {
      topToolbars[toolbarPath] = addedComponents[0];
    }
    this.suspendLayout = false;
    this.doLayout();
  },
  hideAllTopToolbars: function() {
    var topToolbar, topToolbars, uipath;
    topToolbars = this.topToolbars;
    for (uipath in topToolbars) {
      topToolbar = topToolbars[uipath];
      if (topToolbar.coretype === 'toolbar') {
        topToolbar.hide();
      }
    }
  },
  addBreadcrumb: function() {
    var key, maincache, oneCache, _ref;
    maincache = Corefw.util.Cache.getMainCache();
    for (key in maincache) {
      oneCache = maincache[key];
      if (((_ref = oneCache._myProperties) != null ? _ref.widgetType : void 0) === 'BREADCRUMB') {
        this.replaceBreadcrumb(oneCache);
      }
    }
  },
  replaceBreadcrumb: function(breadcrumbCache) {
    var addedBreadcrumbComp, breadcrumb, breadcrumbItem, breadcrumbItems, breadcrumbProps, index, _ref, _ref1;
    breadcrumbProps = breadcrumbCache._myProperties;
    breadcrumbItems = this.getDockedItems("toolbar[isBreadcrumb=true]");
    for (index in breadcrumbItems) {
      breadcrumbItem = breadcrumbItems[index];
      this.removeDocked(breadcrumbItem);
    }
    if ((_ref = breadcrumbProps.navs) != null ? (_ref1 = _ref._ar) != null ? _ref1.length : void 0 : void 0) {
      if (!(breadcrumbProps != null ? breadcrumbProps.isRemovedFromUI : void 0) && (breadcrumbProps != null ? breadcrumbProps.visible : void 0)) {
        breadcrumb = this.prepareBreadcrumbConfig(breadcrumbCache);
        addedBreadcrumbComp = this.addDocked(breadcrumb, 0);
        if (addedBreadcrumbComp[0]) {
          this.breadcrumbObj = addedBreadcrumbComp[0];
        }
      }
    }
    if (Corefw.util.Startup.getThemeVersion() === 2) {
      this.addSeparatorLine(this.activeTab);
    }
  },
  prepareBreadcrumbConfig: function(cache) {
    var breadcrumb;
    breadcrumb = {
      xtype: 'coretoolbar',
      ui: 'commandbar',
      dock: 'top',
      padding: Corefw.util.Startup.getThemeVersion() === 2 ? '3 10 3 10' : '2 10 2 10',
      border: Corefw.util.Startup.getThemeVersion() === 2 ? '0 0 0 0' : '1 0 1 0',
      defaultButtonUI: 'breadcrumbBtn',
      isBreadcrumb: true,
      cache: cache
    };
    return breadcrumb;
  },
  onRawTabChange: function(me, newCard, oldCard) {
    var cardChange, newName, oldName, _ref, _ref1, _ref2, _ref3;
    oldName = oldCard != null ? (_ref = oldCard.cache) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.uniqueKey : void 0 : void 0 : void 0;
    newName = newCard != null ? (_ref2 = newCard.cache) != null ? (_ref3 = _ref2._myProperties) != null ? _ref3.uniqueKey : void 0 : void 0 : void 0;
    cardChange = this.cardChange;
    if (!cardChange) {
      cardChange = {};
      this.cardChange = cardChange;
    }
    if (newName && newName !== cardChange.newName) {
      cardChange.oldName = cardChange.newName;
      cardChange.newName = newName;
      me.fireEvent('tabchangeactual', me, newCard, oldCard);
    }
  },
  onRealTabChange: function(me, newCard, oldCard) {
    var toolbarPath, _ref;
    this.hideAllTopToolbars();
    toolbarPath = (_ref = newCard.toolbarObj) != null ? _ref.uipath : void 0;
    if (toolbarPath) {
      this.showTopToolbar(toolbarPath);
    }
    if (this.breadcrumbObj) {
      this.breadcrumbObj.show();
    }
    if (Corefw.util.Startup.getThemeVersion() === 2) {
      this.addSeparatorLine(this.activeTab);
    }
  },
  addPerspectives: function() {
    var key, perspectiveCache, _ref;
    _ref = this.cache;
    for (key in _ref) {
      perspectiveCache = _ref[key];
      if (key !== '_myProperties') {
        this.addOnePerspective(perspectiveCache);
      }
    }
    this.setInitActivePerspective();
  },
  addOnePerspective: function(perspectiveCache, insertFlag, insertIndex) {
    var comp, perspectiveType, props, validation;
    props = perspectiveCache._myProperties;
    validation = this.verifyPerspective(props);
    if (!validation) {
      return;
    }
    perspectiveType = this.getPerspectiveType(props);
    comp = this.renderPerspective(perspectiveType, perspectiveCache, insertFlag, insertIndex);
    if (props.active) {
      this.selectedActiveTab = comp;
    }
    return comp;
  },
  renderPerspective: function(perspectiveType, cache, insertFlag, insertIndex) {
    var comp, newPerspective;
    newPerspective = {
      xtype: perspectiveType,
      cache: cache
    };
    if (insertFlag && insertIndex >= 0) {
      comp = this.insert(insertIndex, newPerspective);
    } else {
      comp = this.add(newPerspective);
    }
    return comp;
  },
  verifyPerspective: function(props) {
    if (props.widgetType !== 'PERSPECTIVE' || !props.visible) {
      return false;
    }
    return true;
  },
  getPerspectiveType: function(props) {
    var layoutStyle, perspectiveType, _ref;
    layoutStyle = (_ref = props.layout) != null ? _ref.style : void 0;
    if (layoutStyle === 'WORKFLOW_SEQUENTIAL' || layoutStyle === 'WORKFLOW_NON_SEQUENTIAL') {
      perspectiveType = 'coreperspectiveworkflow';
    } else {
      perspectiveType = 'coreperspective';
    }
    return perspectiveType;
  },
  setInitActivePerspective: function() {
    if (typeof this.activeTab === 'undefined' || this.activeTab === null) {
      this.setActiveTab(this.selectedActiveTab || 0);
    }
  },
  setReplaceActivePerspective: function(props, currentActiveIndex, origTabNumber, disablePageSwitch) {
    var len;
    if (!disablePageSwitch && (props.respIndex === 0 || currentActiveIndex === origTabNumber)) {
      if (origTabNumber >= 0) {
        this.setActiveTab(origTabNumber);
      } else {
        len = this.items.getCount();
        this.setActiveTab(len - 1);
      }
    }
  },
  replaceChild: function(perspectiveCache, ev, disablePageSwitch) {
    var cache, cm, currentActiveIndex, newPerspective, origTabNumber, perspectiveToUpdate, props, uip, uipath;
    uip = Corefw.util.Uipath;
    cache = Corefw.util.Cache;
    props = perspectiveCache._myProperties;
    cm = Corefw.util.Common;
    uipath = props.uipath;
    origTabNumber = uip.uipathToTabNumber(uipath);
    perspectiveToUpdate = uip.uipathToComponent(uipath);
    if (this.doLogicRemoval(perspectiveToUpdate, props)) {
      return;
    }
    if (perspectiveToUpdate != null ? typeof perspectiveToUpdate.hasSubnavViews === "function" ? perspectiveToUpdate.hasSubnavViews() : void 0 : void 0) {
      this.remove(perspectiveToUpdate);
      newPerspective = this.addOnePerspective(perspectiveCache, true, origTabNumber);
      this.setActiveTab(newPerspective);
      return;
    }
    Ext.suspendLayouts();
    currentActiveIndex = this.getCurrentActiveIndex();
    if (perspectiveToUpdate) {
      perspectiveToUpdate.updateUIData(perspectiveCache);
    } else {
      perspectiveToUpdate = this.addOnePerspective(perspectiveCache, true, origTabNumber);
    }
    this.setReplaceActivePerspective(props, currentActiveIndex, origTabNumber, disablePageSwitch);
    if (disablePageSwitch && origTabNumber !== currentActiveIndex) {
      this.hidePerspectiveTopToolbar(perspectiveToUpdate);
    }
    Ext.resumeLayouts(true);
    cache.updateMaincache(perspectiveCache);
  },
  hidePerspectiveTopToolbar: function(perspective) {
    var toolbarPath, topToolbar, _ref;
    toolbarPath = perspective != null ? (_ref = perspective.toolbarObj) != null ? _ref.uipath : void 0 : void 0;
    if (!toolbarPath) {
      return;
    }
    topToolbar = this.topToolbars[toolbarPath];
    if (topToolbar != null) {
      if (typeof topToolbar.hide === "function") {
        topToolbar.hide();
      }
    }
  },
  doLogicRemoval: function(comp, props) {
    if (props.isRemovedFromUI || !props.visible) {
      this.remove(comp);
      return true;
    }
    return false;
  },
  getCurrentActiveIndex: function() {
    var currentActiveIndex, currentActiveTab;
    currentActiveTab = this.getActiveTab();
    currentActiveIndex = this.items.indexOf(currentActiveTab);
    return currentActiveIndex;
  },
  reEnableOnClose: function(perspective) {
    var delVariable, iv;
    iv = Corefw.util.InternalVar;
    delVariable = Ext.Function.createDelayed(function() {
      return iv.deleteUipathProperty(perspective.uipath, 'suppressClosing');
    }, 1);
    delVariable();
  }
});
