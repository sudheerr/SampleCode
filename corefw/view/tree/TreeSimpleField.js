// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.tree.TreeSimpleField', {
  extend: 'Corefw.view.tree.TreeFieldBase',
  xtype: 'coretreesimple',
  configureTree: function() {
    this.callParent(arguments);
    this.treeConfig.displayField = this.firstColumnName;
  },
  generatePostData: function() {
    return this.generateNewPostData();
  },
  generateNewPostData: function() {
    var children, displayField, generateNewPostDataCreateChildren, postData, props, rootObj, senchaTree, st, treeSelectModel;
    senchaTree = this.tree;
    displayField = senchaTree.displayField;
    props = this.cache._myProperties;
    children = [];
    postData = {
      name: props.name,
      allTopLevelNodes: children,
      expandingNodeId: this.expandingNodeId
    };
    st = senchaTree.getStore();
    rootObj = st.tree.root;
    treeSelectModel = senchaTree.getSelectionModel();
    generateNewPostDataCreateChildren = function(postChildArray, storeChildArray) {
      var clickedRecord, data, dblClickedRecord, newChildObj, rawData, storeChild, subChildren, valueObj, _i, _len;
      for (_i = 0, _len = storeChildArray.length; _i < _len; _i++) {
        storeChild = storeChildArray[_i];
        rawData = storeChild.raw;
        data = storeChild.data;
        valueObj = {};
        valueObj[displayField] = data[displayField];
        newChildObj = {
          'new': false,
          changed: false,
          removed: false,
          index: data.id,
          selected: data.checked,
          value: valueObj,
          expanded: data.expanded,
          editing: storeChild.isEditing ? true : false
        };
        if (!rawData.semiSelected) {
          newChildObj.changed = rawData.origSelected !== data.checked;
        }
        dblClickedRecord = this.dblClickedRecord;
        clickedRecord = this.clickedRecord;
        if ((data.checked && !dblClickedRecord) || (dblClickedRecord && data === dblClickedRecord.data)) {
          newChildObj.selected = true;
        } else if ((data.checked && !clickedRecord) || (clickedRecord && data === clickedRecord.data)) {
          newChildObj.selected = true;
        } else {
          newChildObj.selected = false;
        }
        if (props.selectType === 'NONE' && treeSelectModel.isSelected(storeChild)) {
          newChildObj.selected = true;
        }
        postChildArray.push(newChildObj);
        if (storeChild.childNodes && storeChild.childNodes.length) {
          subChildren = [];
          newChildObj.children = subChildren;
          generateNewPostDataCreateChildren(subChildren, storeChild.childNodes);
        }
      }
    };
    if (rootObj.childNodes && rootObj.childNodes.length) {
      generateNewPostDataCreateChildren(children, rootObj.childNodes);
    }
    return postData;
  },
  treeItemClickHandler: function(record, treenodeDom, index, ev, callback, isDblClick) {
    var errMsg, isClickBlocked, iv, method, postData, processCallBack, rq, uipath, url;
    rq = Corefw.util.Request;
    uipath = this.uipath;
    iv = Corefw.util.InternalVar;
    isClickBlocked = iv.getByNameProperty(uipath, 'treeItemClickEventsBlocked');
    if (isClickBlocked) {
      console.log('click event blocked');
      return;
    }
    record.isEditing = true;
    this.dblClickedRecord = record;
    postData = this.generatePostData();
    record.isEditing = false;
    delete this.dblClickedRecord;
    delete this.clickedRecord;
    url = isDblClick ? rq.objsToUrl3(this.eventURLs['ONDOUBLECLICK']) : rq.objsToUrl3(this.eventURLs['ONCLICK']);
    errMsg = 'Did not receive a valid response for the tree leaf';
    method = 'POST';
    if (typeof callback === 'function') {
      processCallBack = function(respObj, ev, uipath, preProcess) {
        rq.processResponseObject(respObj, ev, uipath, preProcess);
        callback(respObj, ev, uipath, preProcess);
      };
    } else {
      processCallBack = rq.processResponseObject;
    }
    rq.sendRequest5(url, processCallBack, uipath, postData, errMsg, method, void 0, ev);
    iv.setByNameProperty(uipath, 'treeItemClickEventsBlocked', true);
  },
  treeItemLinkClickHandler: function(record, treenodeDom, index, ev, callback, isDblClick) {
    var cm, downloadURL, redirectURL, rq;
    rq = Corefw.util.Request;
    cm = Corefw.util.Common;
    redirectURL = rq.objsToUrl3(this.eventURLs['ONREDIRECT']);
    downloadURL = rq.objsToUrl3(this.eventURLs['ONDOWNLOAD']);
    if (redirectURL) {
      cm.redirect(this, redirectURL);
    } else if (downloadURL) {
      cm.download(this, downloadURL);
    }
  },
  onDBLClickSimpleTreeItem: function(record, treenodeDom, index, ev, callback) {
    this.treeItemClickHandler(record, treenodeDom, index, ev, callback, true);
  },
  onClickSimpleTreeItem: function(record, treenodeDom, index, ev) {
    this.treeItemClickHandler(record, treenodeDom, index, ev, callback, false);
  }
});
