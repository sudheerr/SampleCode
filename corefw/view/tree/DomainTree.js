// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.tree.DomainTree', {
  extend: 'Ext.tree.Panel',
  alias: 'widget.domainTree',
  requires: ['Ext.tree.plugin.TreeViewDragDrop', 'Corefw.store.DomainTreeNode', 'Corefw.view.filter.plugin.MenuFactory', 'Corefw.store.DomainTreeLNode'],
  mixins: ['Corefw.mixin.Sharable', 'Corefw.mixin.UiPathAware'],
  border: true,
  autoScroll: true,
  height: '100%',
  cls: 'orr-tree',
  overflowY: 'auto',
  plugins: {
    ptype: 'filtermenufactory',
    extraParams: function() {
      return {
        domainName: this.getShared('domainName')
      };
    },
    beforecreate: function(view, record) {
      if (record.isLeaf() && !record.get('isItemList')) {
        return true;
      }
    }
  },
  viewConfig: {
    plugins: {
      ptype: 'treeviewdragdrop',
      enableDrop: false,
      appendOnly: true,
      dragGroup: 'treeDrop'
    }
  },
  selModel: {
    xtype: 'rowmodel',
    mode: 'MULTI'
  },
  rootVisible: false,
  treeCollapse: true,
  constructor: function() {
    this.isRootLoaded = false;
    this.forceReloadRoot = false;
    this.timeOfPreviousChangeEvent = 0;
    this.timeOfCurrentChangeEvent = 0;
    this.settings = {
      prominence: null,
      nodesMD: null,
      filterBy: null,
      depth: null
    };
    this.changeSettings = function(setting) {
      var equal, presentSetting;
      presentSetting = this.settings;
      equal = presentSetting.prominence === setting.getProminence() && presentSetting.nodesMD === setting.getNodesMD() && presentSetting.filterBy === setting.getFilterBy() && presentSetting.depth === setting.getDepth();
      if (equal) {
        return false;
      } else {
        presentSetting.prominence = setting.getProminence();
        presentSetting.nodesMD = setting.getNodesMD();
        presentSetting.filterBy = setting.getFilterBy();
        presentSetting.depth = setting.getDepth();
        return true;
      }
    };
    this.callParent(arguments);
  },
  listeners: {
    beforeitemclick: function(me, record, item, index, e) {
      if (e.ctrlKey) {
        return false;
      }
    },
    afterrender: function() {
      var domainName;
      this.binduipath();
      domainName = this.getShared('domainName');
      if (domainName) {
        this.loadDomainData(domainName, this.parentuipath);
      } else {
        this.onSharedUpdate('domainName', function(domainName) {
          return this.loadDomainData(domainName, this.parentuipath);
        }, this);
      }
    }
  },
  locateNodeByPath: function(path, domains, startIndex) {
    var expandParentNode, i, lastNode, me, node, pathSeprator, result, selModel, targetPath;
    expandParentNode = function(node, callback) {
      var pNode;
      pNode = node.parentNode;
      if (!pNode || pNode.isExpanded()) {
        if (callback) {
          callback();
        }
      } else {
        pNode.expand(false, function() {
          expandParentNode(pNode, callback);
        });
      }
    };
    if (!domains) {
      domains = [];
      pathSeprator = /\/D:[^:]+-[RI]:[^:\/]+/g;
      result = pathSeprator.exec(path);
      while (result) {
        domains.push(result[0]);
        result = pathSeprator.exec(path);
      }
    }
    if (!startIndex) {
      startIndex = 1;
    }
    lastNode = void 0;
    me = this;
    i = startIndex;
    while (i <= domains.length) {
      targetPath = domains.slice(0, i).join('');
      node = this.getNodeByPath(targetPath, true, lastNode);
      if (!node.isExpanded()) {
        if (targetPath === path) {
          selModel = this.getView().getSelectionModel();
          expandParentNode(node, function() {
            selModel.select(node);
          });
        } else {
          node.expand(false, function() {
            me.locateNodeByPath(path, domains, i + 1);
          });
        }
        break;
      } else {
        lastNode = node;
      }
      i++;
    }
  },
  getNodeByPath: function(path, deepSearch, node) {
    if (!node) {
      node = this.getStore().getRootNode();
    }
    return node.findChild('path', path, deepSearch);
  },
  collapseAllOthers: function(node) {
    var c, p, tree;
    p = void 0;
    c = void 0;
    p = node.parentNode;
    if (!p || !p.parentNode) {
      return;
    }
    c = p.childNodes;
    tree = this.view;
    Ext.each(c, function(cNode, nodeIndex, allChildNodes) {
      if (cNode !== node && cNode.isExpanded()) {
        tree.collapse(cNode, true);
      }
    });
  },
  dockedItems: {
    xtype: 'toolbar',
    dock: 'top',
    layout: 'hbox',
    listeners: {
      beforerender: function(me, eOpts) {
        var su;
        su = Corefw.util.Startup;
        if (su.getThemeVersion() === 2) {
          me.margin = '6 0 0 0';
          me.style = {
            backgroundColor: '#d5d6d7'
          };
        }
      }
    },
    items: [
      {
        xtype: 'combo',
        flex: 1,
        emptyText: 'Enter Minimum 3 chars',
        hideTrigger: true,
        cls: 'search-tree-node',
        queryMode: 'remote',
        valueField: 'text',
        displayField: 'text',
        minChars: 3,
        typeAhead: false,
        hideLabel: true,
        store: Ext.create('Corefw.store.DomainTreeLNode', {
          listeners: {
            beforeload: function(me, operation, eOpts) {
              if (operation.params.query === '') {
                return false;
              }
              operation.params = {
                domainName: me.view.up('domainTree').getShared('domainName'),
                searchString: operation.params.query,
                prominence: 'Med'
              };
              me.removeFilter();
              me.removeAll();
              return true;
            },
            load: function(me, records) {
              var count, getPathDepth, lastMinDepthIndex, minDepth;
              getPathDepth = function(path) {
                var pathDepth, reg, result;
                reg = /\/D:([^-:\/]+)(-I:|-L:|-R:)([^-:\/]+)/g;
                result = void 0;
                pathDepth = 0;
                while (true) {
                  result = reg.exec(path);
                  if (result) {
                    if (!pathDepth) {
                      pathDepth += 2;
                    } else {
                      pathDepth++;
                    }
                  } else {
                    break;
                  }
                }
                return pathDepth;
              };
              me.view.removeCls('no-border');
              lastMinDepthIndex = -1;
              count = 0;
              minDepth = Ext.Array.min(records.map(function(rec) {
                return getPathDepth(rec.data.path);
              })) || -1;
              me.addFilter([
                function(item) {
                  if (item.data.path) {
                    if (getPathDepth(item.data.path) <= minDepth) {
                      item.data.isMinDepth = true;
                      count++;
                      if (lastMinDepthIndex !== -1) {
                        records[lastMinDepthIndex].data.isLastMinDepth = false;
                        lastMinDepthIndex = item.index;
                        records[lastMinDepthIndex].data.isLastMinDepth = true;
                      } else {
                        lastMinDepthIndex = item.index;
                        records[lastMinDepthIndex].data.isLastMinDepth = true;
                      }
                      if (count === records.length) {
                        records[lastMinDepthIndex].data.isLastMinDepth = false;
                      }
                      return true;
                    } else {
                      item.data.isMinDepth = false;
                      return false;
                    }
                  }
                }
              ]);
            }
          }
        }),
        listeners: {
          beforerender: function(me, eOpts) {
            var su;
            su = Corefw.util.Startup;
            if (su.getThemeVersion() === 2) {
              me.overCls = 'fieldOverCls';
              me.height = 24;
              delete me.cls;
              me.fieldStyle = {
                lineHeight: '22px',
                paddingLeft: '26px'
              };
            }
          },
          boxready: function(me) {
            var w;
            w = me.getWidth() - 2;
            this.listConfig.emptyText = '<div class="x-boundlist-item" style="width:' + w + 'px;">No matching found.</div>';
          },
          resize: function(me) {
            var viewSize;
            viewSize = Ext.getBody().getSize();
            this.listConfig.maxHeight = viewSize.height - (me.getXY()[1]) - 30;
            this.listConfig.maxWidth = viewSize.width - 30;
          }
        },
        matchFieldWidth: false,
        listConfig: {
          loadingText: 'Searching...',
          resizable: true,
          cls: 'no-border',
          listeners: {
            itemclick: function(list, record, e) {
              if (record.data.isLastMinDepth) {
                record.data.isLastMinDepth = false;
                list.getStore().removeFilter();
              }
              return false;
            },
            render: function(v, eOpts) {
              v.store.view = v;
              v.dragZone = Ext.create('Ext.dd.DragZone', v.getEl(), {
                ddGroup: 'treeDrop',
                getDragData: function(e) {
                  var d, itemIndex, sourceEl;
                  sourceEl = e.getTarget(v.itemSelector, 10);
                  itemIndex = v.getRecord(sourceEl).index;
                  if (v.store.isFiltered()) {
                    Ext.Array.each(v.store.data.items, function(item, i, self) {
                      if (item.index === itemIndex) {
                        itemIndex = i;
                        return false;
                      }
                    });
                  }
                  if (sourceEl) {
                    d = sourceEl.getElementsByTagName('span')[0].cloneNode(true);
                    d.id = Ext.id();
                    return {
                      view: v,
                      ddel: d,
                      sourceEl: sourceEl,
                      repairXY: Ext.fly(sourceEl).getXY(),
                      records: [v.store.getAt(itemIndex)],
                      sourceStore: v.store,
                      draggedRecord: v.getRecord(sourceEl)
                    };
                  }
                },
                getRepairXY: function() {
                  return this.dragData.repairXY;
                }
              });
            }
          }
        },
        tpl: Ext.create('Ext.XTemplate', '<tpl for=".">', '<div class="x-boundlist-item iem-Combo textOverFlowCls" data-qtitle="{[this.title(values)]}" data-qtip="{[values.path]}">', '<span class="x-grid-row x-grid-data-row"> {[this.getMatch(values) + " (" + this.getPath(values) + ")"]}</span>', '{[this.getOption(values)]}', '</div>', '</tpl>', {
          title: function(input) {
            return (input.measure ? 'Measure' : 'Dimension') + ' - ' + input.prominence;
          },
          highlightMatch: function(input) {
            var highlightedMatch, searchQuery, searchQueryRegex;
            searchQuery = Ext.String.trim(input.qtip);
            searchQueryRegex = new RegExp('(' + searchQuery + ')', 'i');
            highlightedMatch = '<span class="searchMatch">$1</span>';
            return input.text.replace(searchQueryRegex, highlightedMatch);
          },
          getMatch: function(input) {
            var highlightedMatch, searchQuery, searchQueryRegex;
            searchQuery = Ext.String.trim(input.qtip);
            searchQueryRegex = new RegExp('(' + searchQuery + ')', 'i');
            highlightedMatch = '$1';
            return input.text.replace(searchQueryRegex, highlightedMatch);
          },
          getPath: function(input) {
            return input.facadePathString;
          },
          getOption: function(input) {
            var str1;
            str1 = '<br><span class="x-grid-row x-grid-data-row" align="left">Click to view more...</span>';
            if (input.isLastMinDepth) {
              return str1;
            } else {

            }
          }
        }),
        editable: true
      }, {
        xtype: 'tool',
        type: 'gear',
        cls: 'icon-settings',
        tooltip: 'Settings',
        width: 24,
        height: 24,
        hidden: true,
        padding: '2 2 2 2',
        handler: function(e, toolEl, owner, tool) {},
        setHidden: function() {
          this.toolEl.setStyle({
            visibility: 'hidden'
          });
        },
        setVisible: function() {
          this.toolEl.setStyle({
            visibility: 'visible'
          });
        }
      }
    ]
  },
  loadDomainData: function(qualifiedDomainName, uipath) {
    var domainName, me, treeStore;
    me = this;
    domainName = qualifiedDomainName;
    treeStore = me.store;
    if (!domainName) {
      return;
    }
    if (me.isRootLoaded && !me.forceReloadRoot) {
      return;
    }
    me.isRootLoaded = true;
    if (treeStore === null || !(treeStore instanceof Corefw.store.DomainTreeNode)) {
      treeStore = Ext.create('Corefw.store.DomainTreeNode', {
        domainName: domainName,
        uipath: uipath
      });
      me.bindStore(treeStore);
    }
    treeStore.clearFilter(true);
    treeStore.load();
  }
});
