// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.tree.treepick.TreePicker', {
  extend: 'Ext.form.field.Trigger',
  xtype: 'coretreepickernew',
  cls: 'treepicker',
  minChars: 2,
  searchDelay: 500,
  lastQueryStr: '',
  initComponent: function() {
    var me, props;
    props = this.cache._myProperties;
    if (props.displayValue) {
      this.value = props.displayValue;
      this.underlyingValue = props.value;
    } else {
      this.value = props.value;
      this.underlyingValue = props.value;
    }
    if (props.emptyText) {
      this.emptyText = props.emptyText;
    }
    this.sendValue = this.underlyingValue;
    this.lastDisplayValue = this.value;
    this.lastSendValue = this.sendValue;
    this.callParent(arguments);
    me = this;
    me.bufferedGetData = Ext.Function.createBuffered(function() {
      var myValue;
      myValue = me.getValue();
      me.sendValue = myValue;
      me.getTreeData(false, myValue, 'search');
      me.lastLoadMethod = 'search';
    }, me.searchDelay);
  },
  onTriggerClick: function() {
    this.onFocus();
  },
  onFocus: function() {
    var win;
    win = this.up('window');
    if (win && win.el && win.el.isMasked() && this.treewindow) {
      this.treewindow.hide();
      return;
    }
    this.callParent(arguments);
    if (this.disableFocusEvents) {
      delete this.disableFocusEvents;
      return;
    }
    if (this.treewindow && !this.forceLoad) {
      this.treewindow.showAt(this.getX(), this.getY() + this.getHeight());
      this.disableChangeEvents = true;
      this.setValue('');
      this.disableChangeEvents = false;
      this.focus();
    } else if (this.underlyingValue) {
      this.getTreeData(true, false, 'locate');
      this.disableChangeEvents = true;
      this.setValue('');
      this.disableChangeEvents = false;
      delete this.forceLoad;
      this.lastLoadMethod = 'locate';
    } else {
      this.getTreeData(true, false, 'init');
      this.lastLoadMethod = 'init';
      delete this.forceLoad;
    }
  },
  getTreeData: function(forceBlank, expandAll, treeLoadMethod) {
    var appendFix, errMsg, me, method, rq, treepickerCallback, url;
    me = this;
    treepickerCallback = function(respObj, uipath) {
      var ar, cacheConfig, ch, cm, item, newObj, oldWindow, props, twindow, uip, windowUipath, _i, _len, _ref;
      ch = Corefw.util.Cache;
      cm = Corefw.util.Common;
      uip = Corefw.util.Uipath;
      props = me.cache._myProperties;
      props.data = respObj.allTopLevelNodes;
      windowUipath = me.uipath + '-treepickerwindow';
      ar = [];
      props.columnAr = ar;
      cacheConfig = ch.cacheConfigDef.header;
      _ref = respObj.allContents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        newObj = {
          _myProperties: {}
        };
        ar.push(newObj);
        cm.copyObjProperties(newObj._myProperties, item, cacheConfig.propsUsed);
      }
      oldWindow = uip.uipathToComponent(windowUipath);
      if (oldWindow) {
        oldWindow.destroy();
      }
      twindow = Ext.create('Corefw.view.tree.treepick.TreePickerWindow', {
        treeLoadMethod: treeLoadMethod,
        parentField: me,
        width: me.getWidth(),
        x: me.getX(),
        y: me.getY() + me.getHeight(),
        cache: me.cache,
        uipath: windowUipath,
        respObj: respObj
      });
      me.treewindow = twindow;
    };
    rq = Corefw.util.Request;
    appendFix = treeLoadMethod === 'search' ? this.getRawValue() : '';
    url = rq.objsToUrl3(this.eventURLs['ONLOOKUP'], null, appendFix);
    errMsg = 'Did not receive a valid response for the treepicker';
    method = 'POST';
    rq.sendRequest5(url, treepickerCallback, this.uipath, null, errMsg, method, null, null, {
      beforeRequestFn: function(opts) {
        var win;
        win = me.treewindow;
        if (win && win.el && !opts.isProgressEnd) {
          if (me.currentLoadMask) {
            me.currentLoadMask.hide();
          }
          me.currentLoadMask = win.setLoading(true);
        }
      },
      afterRequestFn: function(opts) {
        if (me.currentLoadMask && opts.isProgressEnd) {
          me.currentLoadMask.hide();
          me.currentLoadMask = null;
        }
      }
    });
  },
  onChange: function(newVal, oldVal) {
    this.callParent(arguments);
    if (this.disableChangeEvents) {
      delete this.disableChangeEvents;
      return;
    }
    if (oldVal && newVal && Ext.String.trim(newVal) === Ext.String.trim(oldVal)) {
      return;
    }
    newVal = Ext.String.trim(newVal) ? newVal : "";
    if (!newVal.length || newVal.length >= this.minChars) {
      this.bufferedGetData();
    }
  },
  generatePostData: function() {
    var postData, sendValue;
    if (this.setPostValueBlank) {
      postData = {
        name: this.cache._myProperties.name,
        value: ''
      };
    } else {
      sendValue = this.sendValue;
      if (!sendValue) {
        sendValue = '';
      }
      postData = {
        name: this.cache._myProperties.name,
        value: sendValue
      };
    }
    if (this.hasOwnProperty('expandingNodeId')) {
      postData.expandingNodeId = this.expandingNodeId;
      delete this.expandingNodeId;
    }
    this.lastQueryStr = postData.value;
    return postData;
  },
  onDestroy: function() {
    this.callParent(arguments);
    if (this.treewindow) {
      this.treewindow.destroy();
    }
  }
});
