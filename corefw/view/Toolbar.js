// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.Toolbar', {
  extend: 'Ext.toolbar.Toolbar',
  mixins: ['Corefw.mixin.FieldContainer', 'Corefw.mixin.Refreshable'],
  xtype: 'coretoolbar',
  isBreadcrumb: false,
  initComponent: function() {
    var me, props;
    me = this;
    props = this.cache._myProperties;
    this.coretype = props.coretype;
    this.uipath = props.uipath;
    this.callParent(arguments);
    if (Corefw.util.Startup.getThemeVersion() === 2) {
      me.height = 34;
    }
  },
  onRender: function() {
    this.callParent(arguments);
    this.renderItemsWithDefaultLayout();
  },
  updateUIData: function(toolbarCache) {
    Ext.suspendLayouts();
    this.removeAll();
    this.cache = toolbarCache;
    this.renderItemsWithDefaultLayout();
    Ext.resumeLayouts(true);
  },
  renderItemsWithDefaultLayout: function() {
    var field, fieldDef, fieldProps, fields, leftFieldDefs, me, props, rightFieldDefs, _i, _len;
    me = this;
    props = this.cache._myProperties;
    Corefw.util.Render.renderNavs(props, me);
    fields = me.getFormCacheFields();
    if (fields && fields.length) {
      me.initializeConstants();
      leftFieldDefs = [];
      rightFieldDefs = [];
      me.contentDefs = leftFieldDefs;
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        fieldProps = field != null ? field._myProperties : void 0;
        if (!(fieldProps != null ? fieldProps.isRemovedFromUI : void 0) && (fieldProps != null ? fieldProps.visible : void 0)) {
          fieldDef = me.genFieldDef(field);
          if (fieldDef && fieldProps.align === 'LEFT') {
            leftFieldDefs.push(fieldDef);
          } else if (fieldDef && fieldProps.align === 'RIGHT') {
            rightFieldDefs.push(fieldDef);
          }
        }
      }
      if (leftFieldDefs) {
        me.add(leftFieldDefs);
      }
      if (rightFieldDefs) {
        me.add('->');
        me.add(rightFieldDefs);
      }
      me.renderTooltips(leftFieldDefs);
      me.renderTooltips(rightFieldDefs);
      me.renderFieldMessages();
      me.deleteConstants();
      me.disableFormEvents = true;
      Corefw.util.Data.displayFormData(me, me.cache);
      me.disableFormEvents = false;
    }
  },
  onResize: function() {
    if (this.layoutManager) {
      this.layoutManager.resize(this);
    }
  },
  setFieldLabel: function(newObj, fieldProps) {
    newObj.fieldLabel = '';
    if (fieldProps.title) {
      newObj.emptyText = fieldProps.title;
    }
  },
  loadRecord: function(record) {
    var field, fieldArr, key, val, _ref;
    _ref = record.data;
    for (key in _ref) {
      val = _ref[key];
      fieldArr = this.query('[name=' + key + ']');
      if (fieldArr && fieldArr.length) {
        field = fieldArr[0];
        if (field) {
          field.setValue(val);
        }
      }
    }
    return this;
  }
});
