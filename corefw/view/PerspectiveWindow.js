// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.PerspectiveWindow', {
  extend: 'Ext.window.Window',
  xtype: 'coreperspectivewindow',
  mixins: ['Corefw.mixin.Perspective'],
  ui: 'citiriskmodalwindow',
  autoShow: true,
  autoScroll: true,
  constrain: true,
  coretype: 'perspective',
  modal: true,
  width: '90%',
  shadow: 'drop',
  layout: 'fit',
  shadowOffset: 4,
  initComponent: function() {
    var props, su, x, y, _ref;
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      this.ui = 'default';
    }
    props = this.cache._myProperties;
    if (props.height) {
      this.height = props.height;
    }
    if (props.width) {
      this.width = props.width;
    }
    if (!props.closable) {
      this.closable = false;
    }
    if (!props.draggable) {
      this.draggable = false;
    }
    if (!props.resizable) {
      this.resizable = false;
    }
    if (props.position !== 'ON_MOUSE') {
      _ref = this.calculateCentreXY(props), x = _ref[0], y = _ref[1];
      this.x = x;
      this.y = y;
    }
    this.addListeners();
    this.callParent(arguments);
  },
  addListeners: function() {
    var additionalListeners;
    this.listeners = this.listeners || {};
    additionalListeners = {
      beforedestroy: this.beforePerspectiveDestroy,
      beforeclose: this.beforeWindowClose,
      close: this.onWindowClose,
      render: this.onWindowRender
    };
    return Ext.apply(this.listeners, additionalListeners);
  },
  calculateCentreXY: function(props) {
    var coordinateX, coordinateY, height, pageX, pageY, position, width, x, y;
    pageX = document.documentElement.clientWidth;
    pageY = document.documentElement.clientHeight;
    width = props.width || pageX;
    height = props.height || pageY;
    position = props.position;
    coordinateX = props.coordinateX || 0;
    coordinateY = props.coordinateY || 0;
    switch (position) {
      case 'ON_COORDINATE_PX':
        x = coordinateX;
        y = coordinateY;
        break;
      case 'ON_COORDINATE_PCT':
        x = pageX * (coordinateX / 100);
        y = pageY * (coordinateY / 100);
    }
    x = x || (pageX - width) / 2;
    if (x <= 0) {
      x = -1;
    }
    y = y || (pageY - height) / 2;
    if (y < 0) {
      y = 0;
    }
    return [x, y];
  },
  processResponseObject: function(obj, ev, uipath) {
    var closeSelfIfResObjIsOutside, me, rq, uip;
    rq = Corefw.util.Request;
    uip = Corefw.util.Uipath;
    me = this;
    closeSelfIfResObjIsOutside = function(props) {
      var perspectiveWindowOfResObj, respUipath, _ref;
      respUipath = props.uipath;
      perspectiveWindowOfResObj = (_ref = uip.uipathToComponent(respUipath)) != null ? _ref.up('coreperspectivewindow') : void 0;
      if (!perspectiveWindowOfResObj) {
        me.enableUEvents(uipath);
        me.destroy();
      }
    };
    rq.processResponseObject(obj, ev, uipath, closeSelfIfResObjIsOutside);
  },
  enableUEvents: function(uipath) {
    var comp, evt, fieldContainers, uip;
    evt = Corefw.util.Event;
    uip = Corefw.util.Uipath;
    evt.enableUEvent(uipath, 'ONCLOSE');
    if (uipath) {
      comp = uip.uipathToComponent(uipath);
    }
    if (comp && comp.query) {
      fieldContainers = comp.query("fieldcontainer, coreviewstacked, coreelementform");
    }
    Ext.each(fieldContainers, function(fieldContainer) {
      var fcUipath;
      fcUipath = fieldContainer.uipath;
      if (!fcUipath) {
        return;
      }
      evt.enableUEvent(fcUipath, 'ONCLOSE');
    });
  },
  beforePerspectiveDestroy: function() {
    this.onPerspectiveDestroy();
  },
  beforeWindowClose: function() {
    var uipath;
    uipath = this.cache._myProperties.uipath;
    this.enableUEvents(uipath);
  },
  onWindowClose: function() {
    var iv, uipath;
    iv = Corefw.util.InternalVar;
    uipath = this.cache._myProperties.uipath;
    iv.deleteByUipathCascade(uipath);
  },
  onWindowRender: function(window) {
    var header, item, items, su, type, _i, _len;
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      header = window.getHeader();
      if (header.items) {
        items = header.items.items;
        if (items) {
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            type = item.type;
            if (type === 'close') {
              item.addCls("" + Ext.baseCSSPrefix + "window-close-btn");
              item.setWidth(18);
              item.setHeight(18);
            }
          }
        }
      }
    }
  }
});
