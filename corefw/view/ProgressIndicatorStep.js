// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.ProgressIndicatorStep', {
  extend: 'Ext.panel.Panel',
  mixins: {
    Observable: 'Ext.util.Observable'
  },
  enabled: false,
  config: {
    stepNumber: 1,
    stepClickHandler: 'stepClicked',
    status: 'incomplete',
    isValidated: false,
    stepTitle: '',
    stateIcon: ''
  },
  xtype: 'progressindicatorstep',
  initComponent: function() {
    var addlListeners, me;
    me = this;
    me.border = false;
    me.margin = false;
    me.height = Corefw.util.Startup.getThemeVersion() === 2 ? 24 : 30;
    me.itemId = me.stepId === void 0 ? me.stepTitle + "-" + me.stepNumber + "-id" : me.stepId;
    switch (me.status) {
      case 'current':
        me.cls = 'current';
        break;
      case 'complete':
        me.cls = 'complete';
        break;
      case 'error':
        me.cls = 'error';
        break;
      case 'saved':
        me.cls = 'saved';
        break;
      case 'draft':
        me.cls = 'draft';
        break;
      default:
        me.cls = 'incomplete';
    }
    me.listeners = me.listeners || {};
    addlListeners = {
      afterrender: function(step) {
        Ext.QuickTips.init();
        Ext.create('Ext.tip.ToolTip', {
          target: step.getEl(),
          html: step.stepTitle
        });
        step.mon(step.getEl(), 'click', function(step) {
          if (me.disabled) {
            return;
          } else {
            me.stepClickHandler();
          }
        }, step);
        step.getEl().on('mouseenter', function() {
          return step.getEl().setStyle('cursor', 'pointer');
        }, step);
        step.getEl().on('mouseover', function() {
          return step.getEl().setStyle('cursor', 'pointer');
        }, step);
        step.getEl().on('mouseleave', function() {
          return step.getEl().setStyle('cursor', 'normal');
        }, step);
      }
    };
    Ext.apply(this.listeners, addlListeners);
    this.callParent(arguments);
  },
  add: function() {
    this.callParent(arguments);
  },
  doComponentLayout: function() {
    this.callParent(arguments);
  }
});
