// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.form.field.SwitchBtnGrp', {
  extend: 'Ext.container.ButtonGroup',
  xtype: 'coreSwitchBtn',
  activeItem: 0,
  frame: false,
  titleAlign: 'left',
  cls: ['switchBtn', Ext.form.Labelable.prototype.formItemCls],
  initComponent: function() {
    var props, su;
    su = Corefw.util.Startup;
    this.addEvents('change');
    props = this.cache._myProperties;
    this.title = props.title ? props.title : '&nbsp';
    this.on('beforerender', this.beforeRender, this);
    this.callParent(arguments);
  },
  beforeRender: function() {
    var me, su;
    me = this;
    su = Corefw.util.Startup;
    this.callParent(arguments);
    me.items.each((function(el, c) {
      Ext.apply(el, {
        toggleGroup: Ext.id(me),
        clickEvent: 'mousedown',
        enableToggle: true,
        allowDepress: false,
        ui: 'btngrp',
        height: su.getThemeVersion() === 2 ? 23 : 21,
        margin: su.getThemeVersion() === 2 ? 0 : '1 1 0 0'
      });
      if (el.pressed) {
        me.activeItem = el;
      }
      me.mon(el, {
        toggle: me.onToggle,
        scope: me
      });
      el.scope = me;
    }), me);
  },
  afterRender: function() {
    var maxWidth, me, su;
    me = this;
    su = Corefw.util.Startup;
    maxWidth = 0;
    this.callParent(arguments);
    if (su.getThemeVersion() === 2) {
      me.items.each((function(el, c) {
        if (el.getWidth() > maxWidth) {
          maxWidth = el.getWidth();
        }
      }), me);
      me.items.each((function(el, c) {
        Ext.apply(el, {
          width: maxWidth
        });
      }), me);
    }
  },
  onToggle: function(btn, state) {
    if (state === true) {
      this.activeItem = btn;
      this.fireEvent('change', btn.scope);
    }
  },
  generatePostData: function() {
    var btn, fieldObj, name, val;
    btn = this.activeItem;
    val = btn ? btn.inputValue : '';
    name = this.name;
    fieldObj = {
      name: name,
      value: val
    };
    return fieldObj;
  }
});
