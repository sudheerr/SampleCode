// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.form.field.DualListBox', {
  extend: 'Ext.ux.form.ItemSelector',
  cls: 'cv-dual-listbox',
  xtype: 'coreduallistbox',
  listeners: {
    boxready: function() {
      var btnContainer, height, hideTopBottomBtns, hideUpDownBtns;
      btnContainer = this.down("> container:not(multiselectfield)");
      height = btnContainer.getHeight();
      hideTopBottomBtns = function() {
        var btn, topBottomBtns, _i, _len;
        topBottomBtns = btnContainer.query("button[iconCls$=-top], button[iconCls$=-bottom]");
        for (_i = 0, _len = topBottomBtns.length; _i < _len; _i++) {
          btn = topBottomBtns[_i];
          btn.hide();
        }
      };
      hideUpDownBtns = function() {
        var btn, upDownBtns, _i, _len;
        upDownBtns = btnContainer.query("button[iconCls$=-up], button[iconCls$=-down]");
        for (_i = 0, _len = upDownBtns.length; _i < _len; _i++) {
          btn = upDownBtns[_i];
          btn.hide();
        }
      };
      if (height >= 110 && height < 160) {
        hideTopBottomBtns();
      } else if (height >= 60 && height < 110) {
        hideTopBottomBtns();
        hideUpDownBtns();
      } else if (height < 60) {
        this.fromField.setMargin('0 3px 0 0');
        btnContainer.hide();
      }
    }
  },
  initComponent: function() {
    var config, data, dataStore, props, validValues;
    props = this.cache._myProperties;
    validValues = props.validValues;
    data = [];
    Ext.each(validValues, function(validValue) {
      data.push({
        value: validValue.value,
        text: validValue.displayValue
      });
    });
    dataStore = Ext.create('Ext.data.Store', {
      id: "store.dynamic." + props.uipath,
      fields: ['value', 'text'],
      autoDestroy: true,
      data: data
    });
    config = {
      fromTitle: false,
      toTitle: false,
      labelStyle: 'padding-bottom: 6px',
      displayField: 'text',
      valueField: 'value',
      store: dataStore
    };
    Ext.apply(this, config);
    this.callParent(arguments);
  }
});
