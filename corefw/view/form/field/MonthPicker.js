// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.form.field.MonthPicker', {
  extend: 'Ext.form.field.Date',
  mixins: ['Corefw.mixin.CoreField'],
  requires: ['Ext.picker.Month'],
  alias: 'widget.monthfield',
  alternateClassName: ['Ext.form.MonthPicker', 'Ext.form.MonthPicker'],
  xtype: 'coremonthpicker',
  selectMonth: null,
  format: 'Y-m',
  initComponent: function() {
    var me, props, _ref;
    me = this;
    props = ((_ref = this.cache) != null ? _ref._myProperties : void 0) || {};
    me.day = 1;
    me.suspendChangeEvents = true;
    props.value && (me.value = new Date(props.value));
    this.callParent(arguments);
  },
  createPicker: function() {
    var format, me;
    me = this;
    format = Ext.String.format;
    me.bakupSelectMonth = me.value;
    return Ext.create('Ext.picker.Month', {
      height: 195,
      pickerField: me,
      ownerCt: me.ownerCt,
      renderTo: document.body,
      floating: true,
      hidden: true,
      focusOnShow: true,
      minDate: me.minValue,
      maxDate: me.maxValue,
      disabledDatesRE: me.disabledDatesRE,
      disabledDatesText: me.disabledDatesText,
      disabledDays: me.disabledDays,
      disabledDaysText: me.disabledDaysText,
      format: 'Y-m',
      startDay: me.startDay,
      minText: format(me.minText, me.formatDate(me.minValue)),
      maxText: format(me.maxText, me.formatDate(me.maxValue)),
      listeners: {
        select: {
          scope: me,
          fn: me.onSelect
        },
        monthdblclick: {
          scope: me,
          fn: me.onOKClick
        },
        yeardblclick: {
          scope: me,
          fn: me.onOKClick
        },
        OkClick: {
          scope: me,
          fn: me.onOKClick
        },
        CancelClick: {
          scope: me,
          fn: me.onCancelClick
        }
      },
      keyNavConfig: {
        esc: function() {
          return me.collapse();
        }
      }
    });
  },
  createValue: function(selectValue) {
    var month, year, _ref;
    _ref = selectValue || this.picker.value, month = _ref[0], year = _ref[1];
    month++;
    if (month < 10) {
      month = '0' + month;
    }
    return "" + year + "-" + month;
  },
  onCancelClick: function() {
    this.collapse();
  },
  onOKClick: function() {
    var me;
    me = this;
    me.setValue(me.createValue());
    me.collapse();
  },
  onSelect: function(comp, selectValue) {
    var value;
    value = this.createValue(selectValue);
    this.fireEvent('select', this, new Date(value));
  },
  afterRender: function() {
    this.callParent(arguments);
    delete this.suspendChangeEvents;
  },
  getValue: function() {
    var d, month;
    d = this.rawToValue(this.getRawValue()) || '';
    if (!(d instanceof Date)) {
      return d;
    } else {
      month = d.getMonth() + 1;
      return d.getFullYear() + (month < 10 ? '-0' : '-') + month;
    }
  },
  setValue: function(value) {
    if (Ext.isNumber(value)) {
      value = Ext.date.format(new Date(value), this.format);
    } else if (Ext.isDate(value)) {
      value = Ext.Date.format(value, this.format);
    }
    arguments[0] = value || '';
    return this.callParent(arguments);
  }
});
