// Generated by CoffeeScript 1.8.0
Ext.define("Corefw.view.form.field.ToggleSlide", {
  extend: "Ext.form.field.Base",
  mixins: ['Corefw.mixin.CoreField'],
  alias: "widget.coretoggleslidefield",
  fieldSubTpl: [
    "<div id=\"{id}\" class=\"{fieldCls}\"></div>", {
      compiled: true,
      disableFormats: true
    }
  ],
  value: null,
  initComponent: function() {
    var cfg, me, t;
    me = this;
    cfg = {
      id: me.id + "-toggle-slide"
    };
    t = null;
    cfg = Ext.copyTo(cfg, me.initialConfig, ["onText", "offText", "resizeHandle", "resizeContainer", "background", "onLabelCls", "offLabelCls", "handleCls", "state", "booleanMode"]);
    if (me.initialConfig.value) {
      cfg.state = me.initialConfig.value;
    }
    if (me.initialConfig.booleanMode === false) {
      t = (me.initialConfig.state ? me.initialConfig.onText || "ON" : me.initialConfig.offText || "OFF");
    } else {
      t = me.initialConfig.value || me.initialConfig.state || false;
    }
    me.initialConfig.value = t;
    me.value = t;
    me.toggle = new Corefw.view.form.field.toggle.ToggleSlide(cfg);
    me.callParent(arguments);
  },
  onRender: function(ct, position) {
    var me;
    me = this;
    me.callParent(arguments);
    me.toggle.render(me.inputEl);
    me.setRawValue(me.toggle.getValue());
  },
  initEvents: function() {
    var me;
    me = this;
    me.callParent();
    me.toggle.on("change", me.onToggleChange, me);
  },
  onToggleChange: function(toggle, state) {
    return this.setValue(state);
  },
  setValue: function(value) {
    var me, toggle;
    me = this;
    toggle = me.toggle;
    if (value === me.value || value === undefined) {
      return;
    }
    me.callParent(arguments);
    if (toggle.getValue() !== value) {
      toggle.toggle();
    }
    return me;
  },
  onChange: function(toggle, state) {},
  onEnable: function() {
    Corefw.view.form.field.ToggleSlide.superclass.onEnable.call(this);
    this.toggle.enable();
  },
  onDisable: function() {
    Corefw.view.form.field.ToggleSlide.superclass.onDisable.call(this);
    this.toggle.disable();
  },
  beforeDestroy: function() {
    Ext.destroy(this.toggle);
    this.callParent();
  }
});
