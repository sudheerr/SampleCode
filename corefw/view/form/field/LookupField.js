// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.form.field.LookupField', {
  extend: 'Corefw.view.form.field.DropDownField',
  mixins: ['Corefw.mixin.CoreField'],
  xtype: 'corelookupfield',
  queryMode: 'remote',
  editable: true,
  forceSelection: false,
  isLookup: true,
  hideTrigger: true,
  minChars: 1,
  typeAhead: true,
  enableKeyEvents: false,
  listConfig: {
    listeners: {
      beforerender: function() {
        var combo, pageSize;
        combo = this.up('comboboxfield') || this.pickerField;
        pageSize = combo.cache ? combo.cache._myProperties.pageSize : combo.pageSize;
        if (pageSize) {
          this.pageSize = pageSize;
          this.pagingToolbar = this.createPagingToolbar();
        }
      },
      refresh: function() {
        var cntDiv, combo, div, getStartHisRecord, hisNode, hisRecord, historyInfo, historyTitle, separator, store;
        combo = this.up('comboboxfield') || this.pickerField;
        combo.highLightKeywords();
        store = this.getStore();
        if (store.isDestroyed) {
          return;
        }
        getStartHisRecord = function() {
          var result;
          result = null;
          store.each(function(record) {
            if (record.raw.isHistory) {
              result = record;
              return false;
            }
          });
          return result;
        };
        hisRecord = getStartHisRecord();
        hisNode = this.getNode(hisRecord);
        if (hisNode) {
          historyInfo = combo.cache ? combo.cache._myProperties.historyInfo : combo.historyInfo;
          historyTitle = historyInfo != null ? historyInfo.historyTitle : void 0;
          div = document.createElement('div');
          div.className = 'historyValue-separator';
          cntDiv = document.createElement('div');
          cntDiv.className = 'content';
          cntDiv.innerHTML = historyTitle;
          div.appendChild(cntDiv);
          separator = new Ext.dom.Element(div);
          separator.insertBefore(hisNode);
        }
      }
    }
  },
  initComponent: function() {
    var config, lookupCls;
    lookupCls = this.cls ? this.cls + ' citiriskLookup' : 'citiriskLookup';
    config = {
      cls: lookupCls
    };
    Ext.merge(this, config);
    return this.callParent(arguments);
  },
  doQuery: function() {},
  highLightKeywords: function() {
    var getReplacedContent, keywords, list, nodes, reg, store;
    if (this.picker) {
      keywords = this.getRawValue();
      list = this.picker;
      store = list.getStore();
      if (store.isDestroyed) {
        return;
      }
      if (keywords) {
        keywords = keywords.replace(/[\/\\]/g, function(match) {
          return "\\" + match;
        });
        keywords = keywords.replace(/\*/g, ".*");
        nodes = (function() {
          var result;
          result = [];
          store.each(function(record) {
            var node;
            if (!record.raw.isHistory) {
              node = list.getNode(record);
              if (node) {
                result.push(node);
              }
            }
          });
          return result;
        })();
        reg = new RegExp(keywords, "gi");
        getReplacedContent = function(highlight) {
          var highLightWrapper;
          highLightWrapper = ["<font color='red'>", highlight, "</font>"];
          return highLightWrapper.join("");
        };
        Ext.each(nodes, function(node) {
          node.innerHTML = node.innerHTML.replace(reg, function(match) {
            return getReplacedContent(match);
          });
        });
      }
    }
  },
  validator: function(value) {
    var findedIndex, me, replcement, strValue;
    if (!value) {
      return true;
    }
    me = this;
    strValue = value.toString();
    replcement = {
      "&amp;": "&",
      "&gt;": ">",
      "&lt;": "<",
      "&nbsp;": " ",
      "&#39;": "'"
    };
    findedIndex = me.getStore().findBy(function(record) {
      var raw;
      raw = record.get(me.displayField).toString();
      raw = raw.replace(/&((amp)|(lt)|(gt)|(nbsp)|(#39));/g, function(match) {
        return replcement[match];
      });
      return raw === strValue;
    });
    if (findedIndex > -1) {
      return true;
    }
    return "The input value is invalid";
  },
  setValue: function(value) {
    var _ref;
    if (((_ref = this.getStore()) != null ? _ref.data.length : void 0) === 0) {
      this.bindData(value);
    }
    return this.callParent(arguments);
  }
});
