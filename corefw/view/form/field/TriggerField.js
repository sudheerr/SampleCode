// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.form.field.TriggerField', {
  extend: 'Ext.form.field.Trigger',
  mixins: ['Corefw.mixin.CoreField'],
  xtype: 'coretriggerfield',
  forceSelection: false,
  componentCls: 'custom-trigger-field',
  editable: true,
  initComponent: function() {
    var fieldProps, me, version;
    me = this;
    me.forceSelection = true;
    fieldProps = this.cache._myProperties;
    version = Corefw.util.Startup.getThemeVersion();
    if (version === 2) {
      me.fieldStyle = {
        borderRightWidth: '0'
      };
    }
    this.applyConfig(fieldProps);
    this.configureTriggers();
    this.callParent(arguments);
  },
  applyConfig: function(fieldProps) {
    var config;
    config = {
      name: fieldProps.name,
      emptyText: fieldProps.emptyText,
      uipath: fieldProps.uipath,
      value: fieldProps.value,
      readOnly: fieldProps.readOnly,
      disabled: fieldProps.disabled,
      historyInfo: fieldProps.historyInfo,
      hideTrigger: fieldProps.readOnly,
      listeners: {}
    };
    config.listeners.change = this.onChangeEvent;
    config.listeners.blur = this.onFieldBlur;
    config.listeners.afterrender = this.onAfterRender;
    Ext.merge(this, config);
    if (fieldProps.hasOwnProperty('editable')) {
      this.editable = fieldProps.editable;
    }
  },
  configureTriggers: function() {
    var baseCSSPrefix, version;
    version = Ext.getVersion().major;
    baseCSSPrefix = Ext.baseCSSPrefix;
    this.trigger2Cls = baseCSSPrefix + 'form-arrow-trigger';
    this.onTrigger2Click = this.onTriggerClick;
    this.triggerCls = baseCSSPrefix + 'form-clear-trigger';
    this.onTriggerClick = this.onClearClick;
    version = Corefw.util.Startup.getThemeVersion();
    if (version === 2) {
      this.triggerCls = 'formclearicon';
      this.trigger2Cls = 'formtriggericon';
    }
  },
  onTriggerClick: function() {
    this.callParent(arguments);
    return this.fieldEvent('ONTRIGGER', this);
  },
  onAfterRender: function() {
    var version;
    if (!this.editable) {
      this.hideClearButton();
    } else {
      this.onChangeEvent();
    }
    version = Corefw.util.Startup.getThemeVersion();
    if (version === 2) {
      return this.triggerEl.elements[1].addCls('combotrig');
    }
  },
  getFieldContainer: function(field) {
    return field.up('fieldset') || field.up('form') || field.up('coretoolbar');
  },
  fieldEvent: function(eventName, field) {
    var container, evt, fieldContainer, postData, rq, toolbarContainer, uip, uipath, url, viewComp;
    evt = Corefw.util.Event;
    fieldContainer = this.getFieldContainer(this);
    if (fieldContainer.disableFormEvents) {
      return;
    }
    rq = Corefw.util.Request;
    evt = Corefw.util.Event;
    uip = Corefw.util.Uipath;
    uipath = field.uipath;
    field.valueChanged = true;
    container = this.getFieldContainer(field);
    if (container.xtype === 'coretoolbar' || container.xtype === 'corecomplextoolbar') {
      toolbarContainer = uip.uipathToParentComponent(container.uipath);
      postData = toolbarContainer.generatePostData();
    } else {
      postData = container.generatePostData();
    }
    viewComp = field.up('[coretype=view]');
    if (viewComp && viewComp.saveScrollPosition) {
      viewComp.saveScrollPosition();
    }
    url = rq.objsToUrl3(field.eventURLs[eventName], field.localUrl);
    rq.sendRequest5(url, rq.processResponseObject, uipath, postData);
  },
  onClearClick: function() {
    if (this.readOnly || this.disabled) {
      return;
    }
    this.clearValue();
    this.queryCache = [];
    return this.fieldEvent('ONCLEAR', this);
  },
  onChangeEvent: function() {
    if ((!this.editable) || (!this.rendered)) {
      return;
    }
    if (Ext.isEmpty(this.value)) {
      this.hideClearButton();
    } else {
      this.showClearButton();
    }
  },
  hideClearButton: function() {
    var clearTrigger;
    clearTrigger = this.triggerEl.elements[0];
    clearTrigger.hide();
    return clearTrigger.parent().setWidth(0);
  },
  showClearButton: function() {
    var clearTrigger;
    clearTrigger = this.triggerEl.elements[0];
    clearTrigger.show();
    return clearTrigger.parent().setWidth(15);
  },
  onFieldBlur: function() {
    if (this.readOnly || this.disabled) {
      return;
    }
    this.fieldEvent('ONBLUR', this);
  },
  clearValue: function() {
    this.setValue('');
  },
  generatePostData: function() {
    var fieldObj, value;
    value = this.getValue();
    fieldObj = {
      name: this.name,
      value: Ext.isEmpty(value) ? '' : value
    };
    return fieldObj;
  }
});
