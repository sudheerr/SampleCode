// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.crview.ViewSubnav', {
  extend: 'Ext.Container',
  xtype: 'coreviewsubnav',
  layout: 'border',
  initComponent: function() {
    var addlConfigs, cache, key, newview, parentCache, props, subnavAlign, subnavprops, uip, viewCache;
    this.callParent(arguments);
    uip = Corefw.util.Uipath;
    cache = this.cache;
    props = cache._myProperties;
    parentCache = uip.uipathToParentCacheItem(props.uipath);
    for (key in parentCache) {
      viewCache = parentCache[key];
      if (key !== '_myProperties') {
        subnavprops = viewCache._myProperties.subnavigator;
        if (subnavprops) {
          newview = Corefw.mixin.Perspective.configView(viewCache);
          addlConfigs = {
            collapsible: subnavprops.collapsible,
            collapsed: subnavprops.collapsed,
            split: subnavprops.resizable,
            cls: 'viewsubnav-nav'
          };
          if (subnavprops.collapsible) {
            addlConfigs.split = true;
          }
          if (!subnavprops.collapsed) {
            addlConfigs.width = 300;
          }
          Ext.apply(newview, addlConfigs);
          subnavAlign = subnavprops.align;
          if (subnavAlign) {
            if (subnavAlign === 'RIGHT') {
              newview.region = 'east';
            } else {
              newview.region = 'west';
            }
          }
          this.add(newview);
        }
      }
    }
  },
  onResize: function() {
    var allViews, su, subnavprops, totalWidth, view, _i, _len, _ref, _ref1;
    totalWidth = this.getWidth();
    allViews = this.items.items;
    su = Corefw.util.Startup;
    for (_i = 0, _len = allViews.length; _i < _len; _i++) {
      view = allViews[_i];
      if (su.getThemeVersion() === 2) {
        if (view.xtype === 'bordersplitter') {
          if (view.vertical) {
            view.setWidth(6);
          }
        }
      }
      subnavprops = (_ref = view.cache) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.subnavigator : void 0 : void 0;
    }
  }
});
