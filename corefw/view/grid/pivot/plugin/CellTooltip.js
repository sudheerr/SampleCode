// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.pivot.plugin.CellTooltip', {
  extend: 'Ext.AbstractPlugin',
  alias: 'plugin.pivotcelltooltip',
  init: function(grid) {
    var me;
    me = this;
    me.grid = grid;
    me.view = grid.view;
    me.viewListeners = me.view.on('afterrender', me.createToolTip, me);
    return me.gridListeners = me.grid.on('reconfigure', me.onReconfigure, me);
  },
  onReconfigure: function(grid, store) {},
  createToolTip: function(view) {
    return this.tip = Ext.create('Ext.tip.ToolTip', {
      grid: this.grid,
      target: view.el,
      delegate: view.cellSelector,
      dismissDelay: 15000,
      renderTo: Ext.getBody(),
      listeners: {
        beforeshow: function(tip) {
          var cell, clvalues, column, grid, record, row, rowLabelsText, tipText;
          grid = this.grid;
          cell = tip.triggerElement;
          row = tip.triggerElement.parentElement;
          column = view.getHeaderByCell(cell);
          record = view.getRecord(row);
          rowLabelsText = Ext.Array.map(grid.currentPivotConfig.rowLabels, function(l) {
            return record.get(l.path);
          });
          rowLabelsText = Ext.Array.filter(rowLabelsText, function(t) {
            return t;
          }).join(' - ');
          clvalues = column.dataIndex.split(grid.keyDelimeter);
          if (column.xtype === 'pivotvaluecolumn') {
            clvalues = clvalues.splice(0, clvalues.length - 2).join(' - ');
          } else if (column.xtype === 'pivotgroupcolumn') {
            clvalues = clvalues.join(' - ');
          } else {
            return false;
          }
          tipText = ["<b>" + column.text + "</b>", "Value: " + (record.get(column.dataIndex)), "Row: " + rowLabelsText, "Column: " + clvalues];
          return tip.update(tipText.join('<br>'));
        }
      }
    });
  }
});
