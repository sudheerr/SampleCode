// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.pivot.PivotTableValuesConfigGrid', {
  alias: 'widget.pivottablevaluescfggrid',
  extend: 'Corefw.view.grid.pivot.PivotTableConfigGrid',
  cfgName: ['values', 'Values'],
  displaying: ['name', 'aggregation'],
  model: 'Corefw.model.PivotValueConfigItem',
  mixins: ['Corefw.mixin.Sharable'],
  varianceTypesMenuConfig: {
    items: [
      {
        text: 'DifferencePercentage'
      }, {
        text: 'DifferenceValue'
      }, {
        text: 'ActualValue'
      }, {
        text: 'AbsoluteDiffValue'
      }
    ],
    listeners: {
      click: function(menu, item) {
        var timePoint, varianceType;
        varianceType = CorefwFormatter.varianceMap[item.text];
        timePoint = menu.parentItem.realValue;
        return menu.up('[name=variancePicker]').handleVariance(varianceType, timePoint);
      }
    }
  },
  recordValidate: function(newRecord, draggedRecord) {
    return [draggedRecord.get('measure'), 'Only Measure can be values'];
  },
  showVarianceMenu: function(timeMarks, record, posXY) {
    var freq, freqMenu, freqObj, gridStore, item, menu, timePoint;
    gridStore = this.getStore();
    menu = Ext.create('Ext.menu.Menu', {
      name: 'variancePicker',
      handleVariance: function(varianceType, timePoint) {
        var recData;
        recData = Ext.apply(record.getData(), {
          valueItemId: '',
          fullText: '',
          timeMarks: timeMarks,
          variance: true,
          varianceType: varianceType,
          varianceTimeMark: timePoint
        });
        return gridStore.add(recData);
      }
    });
    for (freq in timeMarks) {
      freqObj = timeMarks[freq];
      freqMenu = {
        items: []
      };
      for (timePoint in freqObj) {
        item = freqObj[timePoint];
        freqMenu.items.push({
          cls: 'icon-next_lvl_menu',
          text: "" + item.relative + " " + item.formatted,
          realValue: timePoint,
          menu: this.varianceTypesMenuConfig
        });
      }
      menu.add({
        cls: 'icon-next_lvl_menu',
        text: freq,
        menu: freqMenu
      });
    }
    return menu.showAt(posXY);
  },
  addingVariance: function(record, posXY) {
    return this.getShared('reqTimeMarks')(this.showVarianceMenu, this, record, posXY);
  },
  bindStore: function(store, initial) {
    this.callParent(arguments);
    if (!initial) {
      return this.getShared('reqTimeMarks')(function(timeMarks) {
        return this.getStore().each(function(record) {
          record.set('timeMarks', timeMarks);
          return record.calcFields();
        });
      }, this);
    }
  },
  getColumnsMapping: function() {
    return Ext.apply(Ext.clone(this.columnsMapping), this.valuesColumnsMapping);
  },
  valuesColumnsMapping: {
    name: {
      menuDisabled: true,
      text: '',
      dataIndex: 'fullText',
      flex: 1
    },
    action: {
      menuDisabled: true,
      xtype: 'actioncolumn',
      width: 50,
      items: [
        {
          iconCls: 'icon-plus',
          tooltip: 'Add Variance',
          handler: function(view, rowIndex, colIndex, item, e, record) {
            return view.up('grid').addingVariance(record, e.getXY());
          },
          isDisabled: function(view, rowIndex, colIndex, item, record) {
            return record.get('variance');
          }
        }, {
          iconCls: 'icon-delete',
          tooltip: 'Delete',
          handler: function(view, rowIndex) {
            return view.getStore().removeAt(rowIndex);
          }
        }
      ]
    }
  }
});
