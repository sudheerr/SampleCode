// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.pivot.PivotTableConfigPanel', {
  alias: 'widget.pivottablecfgpanel',
  extend: 'Ext.panel.Panel',
  requires: ['Corefw.model.PivotConfig', 'Corefw.mixin.Sharable'],
  mixins: ['Corefw.mixin.Sharable'],
  dock: 'top',
  hidden: true,
  ui: 'noborder',
  cls: 'pivottableCfgPanel',
  padding: 6,
  globalFilterRecords: [],
  items: [
    {
      xtype: 'coretoggleslidefield',
      fieldLabel: 'Apply Global Filter',
      itemId: 'glbFilterToggle',
      fieldCls: 'normalToggleLabel',
      labelCls: 'normalToggleLabelText',
      value: true,
      hidden: true,
      listeners: {
        beforerender: function(me) {
          var offlabel, onlabel, su;
          su = Corefw.util.Startup;
          me.toggle.onText = 'Yes';
          me.toggle.offText = 'No';
          onlabel = me.toggle.onLabel;
          offlabel = me.toggle.offLabel;
        }
      },
      onToggleChange: function(toggle, state) {}
    }, {
      xtype: 'panel',
      width: '100%',
      ui: 'noborder',
      layout: {
        type: 'vbox',
        flex: 1,
        align: 'stretch'
      },
      defaults: {
        xtype: 'container',
        layout: {
          type: 'hbox',
          flex: 1
        },
        minHeight: 150
      },
      items: [
        {
          defaults: {
            xtype: 'pivottablecfggrid',
            flex: 1
          },
          items: [
            {
              margin: '0 3 0 0',
              cfgName: ['rowLabels', 'Row Labels'],
              displaying: ['name', 'aggregate', 'sortby']
            }, {
              margin: '0 0 0 3',
              cfgName: ['columnLabels', 'Column Labels'],
              displaying: ['name', 'sortby']
            }
          ]
        }, {
          margin: '6 0 0 0',
          defaults: {
            xtype: 'pivottablecfggrid',
            flex: 1
          },
          items: [
            {
              margin: '0 3 0 0',
              xtype: 'filterCriteriaView',
              width: '100%',
              minHeight: 150,
              headerText: 'Report Filter',
              enabledPlugins: ['filtermenufactory', 'gridviewdragdrop'],
              isCriteriaGlobal: false,
              extraListeners: {
                beforedrop: function(node, data, overModel, dropPosition, dropHandlers) {
                  var newRecord, param, store;
                  store = this.getStore();
                  dropHandlers.cancelDrop();
                  if (data.view.xtype === 'gridview') {
                    return;
                  }
                  if (data.records.length > 1) {
                    Corefw.Msg.alert('Error', 'Please select one node at a time');
                    return;
                  }
                  newRecord = data.records[0];
                  if (!newRecord.isLeaf()) {
                    Corefw.Msg.alert('Error', 'Create filter on non-leaf node is not supported');
                    return;
                  }
                  param = {
                    isMeasure: newRecord.isMeasure(),
                    dataTypeString: newRecord.get('dataTypeString'),
                    pathString: newRecord.get('path'),
                    showXY: [node.lastPageX, node.lastPageY],
                    itemName: newRecord.get('text'),
                    underCollection: newRecord.get('underCollection'),
                    repetitiveRatio: newRecord.get('repetitiveRatio')
                  };
                  return this.findPlugin('filtermenufactory').showFilterMenu(param, {
                    domainName: this.getShared('domainName')
                  });
                }
              }
            }, {
              margin: '0 0 0 3',
              xtype: 'pivottablevaluescfggrid'
            }
          ]
        }
      ]
    }, {
      xtype: 'container',
      layout: {
        type: 'hbox',
        pack: 'end'
      },
      cls: 'bottom-container',
      margin: '8 2 2 0',
      defaults: {
        xtype: 'button',
        margin: '0 0 0 8',
        listeners: {
          render: function(me) {
            return me.setUI('primarybutton-small');
          }
        }
      },
      items: [
        {
          text: 'Restore',
          hidden: true
        }, {
          text: 'Save',
          handler: function() {
            var cfgpanel, localCriteria;
            cfgpanel = this.up('pivottablecfgpanel');
            localCriteria = cfgpanel.down('filterCriteriaView').getStore().getCriteria() || [];
            cfgpanel.store.getAt(0).filter().loadRawData(localCriteria);
            cfgpanel.store.each(function(record) {
              return record.setDirty();
            });
            return cfgpanel.store.sync({
              scope: this,
              callback: this.blur
            });
          }
        }, {
          text: 'Update',
          handler: function(silent) {
            var cfgpanel, globalCriteria, localCriteria, pivotConfig, pivottable;
            pivottable = this.up('pivottable');
            cfgpanel = this.up('pivottablecfgpanel');
            localCriteria = pivottable.down('filterCriteriaView').getStore().getCriteria() || [];
            cfgpanel.store.getAt(0).filter().loadRawData(localCriteria);
            globalCriteria = cfgpanel.globalFilterRecords || [];
            pivotConfig = cfgpanel.store.getProxy().getWriter().getRecordData(cfgpanel.store.getAt(0));
            if (cfgpanel.validate(pivotConfig, silent)) {
              pivottable.reload(pivotConfig, globalCriteria);
              return pivottable.toggleConfigPanel(false);
            } else {
              return pivottable.toggleConfigPanel(true);
            }
          }
        }
      ]
    }
  ],
  init: function(griduipath) {
    this.onSharedUpdate('globalFilter', function(globalFilterRecords) {
      return this.globalFilterRecords = globalFilterRecords;
    });
    this.store = Ext.create('Ext.data.Store', {
      model: 'Corefw.model.PivotConfig',
      listeners: {
        write: function(store) {
          return store.each(function(record) {
            return record.associations.each(function(association) {
              return record[association.name]().commitChanges();
            });
          });
        }
      }
    });
    this.store.getProxy().getWriter().extraJsonData = {
      uipath: griduipath
    };
    return this.store.load({
      params: {
        uipath: griduipath
      },
      scope: this,
      callback: function() {
        var grid, grids, pivotCfgRec, _i, _len, _ref;
        pivotCfgRec = this.store.getAt(0);
        grids = {};
        _ref = this.query('pivottablecfggrid');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          grid = _ref[_i];
          grids[grid.getGridName()] = grid;
          grid.bindStore(pivotCfgRec[grid.getGridName()]());
        }
        grids['rowLabels'].sharedUniqueness = {
          'column labels': grids['columnLabels'].getStore()
        };
        grids['columnLabels'].sharedUniqueness = {
          'row labels': grids['rowLabels'].getStore()
        };
        pivotCfgRec.filter().filterOnLoad = false;
        this.down('filterCriteriaView').store.loadRecords(pivotCfgRec.filter().getRange());
        return this.down('[text=Update]').handler(true);
      }
    });
  },
  listeners: {
    beforehide: function(me) {
      var editor;
      editor = this.down('editor');
      if (editor) {
        return editor.completeEdit();
      }
    }
  },
  getArrCnt: function(arr) {
    if (arr) {
      return arr.length;
    } else {
      return 0;
    }
  },
  validators: [
    [
      'Both row labels and column labels are empty.', function(cfg) {
        return this.getArrCnt(cfg.rowLabels) !== 0 || this.getArrCnt(cfg.columnLabels) !== 0;
      }
    ], [
      'Both row labels and values are empty', function(cfg) {
        return this.getArrCnt(cfg.rowLabels) !== 0 || this.getArrCnt(cfg.values) !== 0;
      }
    ]
  ],
  validate: function(cfg, silent) {
    var validator, _i, _len, _ref;
    _ref = this.validators;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      validator = _ref[_i];
      if (!validator[1].call(this, cfg)) {
        if (silent !== true) {
          Corefw.Msg.alert('Invalid Config', validator[0]);
        }
        return false;
      }
    }
    return true;
  }
});
