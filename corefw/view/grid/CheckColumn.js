// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.CheckColumn', {
  extend: 'Ext.grid.column.CheckColumn',
  xtype: 'corecheckcolumn',
  disableSelection: false,
  enableAllSelecting: true,
  headerCheckAllCls: Ext.baseCSSPrefix + 'column-header-selection',
  unCheckedCls: Ext.baseCSSPrefix + 'grid-checkcolumn',
  checkedCls: Ext.baseCSSPrefix + 'grid-checkcolumn-checked',
  selModel: 'checkAllModel',
  renderTpl: '<div id="{id}-titleEl" {tipMarkup} class="' + Ext.baseCSSPrefix + 'column-header-inner checkcolumn">' + '<table id="{id}-textEl" class="' + Ext.baseCSSPrefix + 'column-header-text' + '{childElCls}" style="border-spacing:0; padding:0">' + '<tr>' + '<tpl if="enableAllSelecting">' + '<td style="padding:0">' + '<img style="z-index:10;margin-top:2px;margin-left:-2px;" id="{id}-checkAllEl" class="{headerCheckAllCls} {unCheckedCls}" src="' + Ext.BLANK_IMAGE_URL + '"/>' + '</td>' + '</tpl>' + '<td style="padding:0"><span class="x-column-header-text">' + '{text}' + '</span></td>' + '</tr>' + '</table>' + '<tpl if="!menuDisabled">' + '<div id="{id}-triggerEl" class="' + Ext.baseCSSPrefix + 'column-header-trigger' + '{childElCls}"></div>' + '</tpl>' + '</div>' + '{%this.renderContainer(out,values)%}',
  initRenderData: function() {
    var me;
    me = this;
    return Ext.applyIf(me.callParent(arguments), {
      enableAllSelecting: me.enableAllSelecting,
      headerCheckAllCls: me.headerCheckAllCls,
      unCheckedCls: me.unCheckedCls
    });
  },
  renderSelectors: {
    checkAllEl: '.' + Ext.baseCSSPrefix + 'column-header-selection'
  },
  initComponent: function() {
    var me;
    me = this;
    if (!me.selModel) {
      me.selModel = 'checkAllModel';
    }
    me.enabled = me.cache._myProperties.enabled;
    Ext.applyIf(this.renderData, {
      enableAllSelecting: this.enableAllSelecting
    });
    this.callParent(arguments);
    this.addEvents('beforecheckall', 'checkall');
  },
  setDisableSelection: function(disable) {
    var cache, editable, props;
    this.disableSelection = disable;
    cache = this.cache;
    if (cache) {
      props = this.cache._myProperties;
      if (props) {
        editable = props.editable;
        if (editable === false) {
          this.disableSelection = true;
        }
      }
    }
  },
  processEvent: function(type, view, cell, recordIndex, cellIndex, e, record, row) {
    var me;
    me = this;
    if (me.disableSelection) {
      return false;
    }
    return this.callParent(arguments);
  },
  onTitleElClick: function(e, t) {
    var checkAllEl, checked, checkedAll, dataIndex, isCheckAllTarget, me, record, records, view, _i, _len;
    me = this;
    isCheckAllTarget = me.checkAllEl && e.target.classList.contains("x-column-header-selection");
    if (me.disableSelection || !isCheckAllTarget) {
      return this.callParent(arguments);
    }
    view = me.up().grid.getView();
    if (me.fireEvent('beforecheckall', me, view) !== false) {
      checkAllEl = me.checkAllEl;
      dataIndex = me.dataIndex;
      checkedAll = !checkAllEl.el.dom.classList.contains(me.checkedCls);
      if (checkedAll) {
        checkAllEl.el.addCls(me.checkedCls);
      } else {
        checkAllEl.el.removeCls(me.checkedCls);
      }
      records = view.store.data.items;
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        if (me.selModel === 'checkAllModel') {
          checked = checkedAll;
        } else {
          checked = !record.get(dataIndex);
        }
        record.set(dataIndex, checked);
      }
      return me.fireEvent('checkall', me, view);
    } else {
      return false;
    }
  },
  renderer: function(value, metaData, record, rowIndex, colIndex, store) {
    var disabledHeaders, enabledHeaders, pathString, rowDataCache, su, _ref, _ref1, _ref2, _ref3;
    pathString = (metaData != null ? (_ref = metaData.column) != null ? _ref.pathString : void 0 : void 0) || this.pathString;
    if (!this.dataCache) {
      this.dataCache = ((_ref1 = Corefw.util.Uipath.uipathToParentComponent(this.uipath)) != null ? (_ref2 = _ref1.cache) != null ? _ref2._myProperties.items : void 0 : void 0) || [];
    }
    metaData.tdCls = metaData.tdCls || "";
    if (!this.enabled) {
      metaData.tdCls += ' x-item-disabled';
    }
    if (rowDataCache = this.dataCache[rowIndex]) {
      disabledHeaders = rowDataCache.disabledHeaders;
      enabledHeaders = rowDataCache.enabledHeaders;
      if (disabledHeaders.filter(function(p) {
        return p === pathString;
      }).length > 0) {
        metaData.tdCls = metaData.tdCls.replace('x-item-disabled', '');
        metaData.tdCls += ' x-item-disabled';
      } else if (enabledHeaders.filter(function(p) {
        return p === pathString;
      }).length > 0) {
        metaData.tdCls = metaData.tdCls.replace('x-item-disabled', '');
      }
    }
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      if (value) {
        metaData.tdCls += ' gridCheckedCls';
      }
    }
    if ((_ref3 = this.cache._myProperties.eventURLs) != null ? _ref3['ONCLICK'] : void 0) {
      metaData.style = metaData.style + ";cursor:pointer";
    }
    return this.callParent(arguments);
  }
});
