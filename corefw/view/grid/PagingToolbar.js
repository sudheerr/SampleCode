// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.PagingToolbar', {
  extend: 'Ext.toolbar.Paging',
  xtype: 'corepagingtoolbar',
  requires: ['Ext.form.field.ComboBox'],
  beforePageSizeText: 'Show',
  afterPageSizeText: 'Items',
  pageSizeComboWidth: 50,
  initComponent: function() {
    var pageSizeField, psCombo, store, su, _ref, _ref1;
    this.addListeners();
    this.callParent(arguments);
    su = Corefw.util.Startup;
    store = this.store;
    this.pageSize = store.pageSize;
    if (su.getThemeVersion() === 2) {
      pageSizeField = (_ref = this.child('#pageMoreBtn')) != null ? (_ref1 = _ref.menu) != null ? _ref1.queryById('pageSize') : void 0 : void 0;
      if (pageSizeField != null) {
        pageSizeField.suspendEvents(false);
        pageSizeField.setValue(store.pageSize);
        pageSizeField.resumeEvents();
      }
    } else if (store.selectablePageSizes) {
      psCombo = this.down('combobox#pagesize');
      if (psCombo != null) {
        psCombo.suspendEvents(false);
        psCombo.setValue(store.pageSize);
        psCombo.resumeEvents();
      }
    }
  },
  getPagingItems: function() {
    var afterPageSize, beforePageSize, btnMore, index, items, me, menu, menuItems, pageInfoText, pageNavCtn, pageSizeCtn, su, _i, _j, _k, _l, _len, _len1, _len2, _len3;
    me = this;
    items = [];
    su = Corefw.util.Startup;
    items.push({
      itemId: 'first',
      tooltip: me.firstText,
      overflowText: me.firstText,
      iconCls: "" + Ext.baseCSSPrefix + "tbar-page-first",
      disabled: true,
      handler: me.moveFirst,
      scope: me
    });
    if (su.getThemeVersion() === 2) {
      this.addCls('paginationcls');
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        index = items[_i];
        if (index.itemId === 'first') {
          index.iconCls = 'icon-jump-back';
          index.margin = '-2 2 0 0';
          index.style = 'color: #4CAEED;font-size:20px;width:20px';
        }
      }
    }
    items.push({
      itemId: 'prev',
      tooltip: me.prevText,
      overflowText: me.prevText,
      iconCls: "" + Ext.baseCSSPrefix + "tbar-page-prev",
      disabled: true,
      handler: me.movePrevious,
      scope: me
    });
    if (su.getThemeVersion() === 2) {
      for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
        index = items[_j];
        if (index.itemId === 'prev') {
          index.iconCls = 'icon-previous';
          index.margin = '-2 0 0 0';
          index.style = 'color: #4CAEED;font-size:20px';
        }
      }
    }
    if (su.getThemeVersion() !== 2) {
      if (me.store.selectablePageSizes) {
        items.push('-');
        items.push(me.beforePageSizeText);
        items.push({
          xtype: 'combobox',
          itemId: 'pagesize',
          editable: false,
          store: me.store.selectablePageSizes,
          disabled: false,
          width: me.pageSizeComboWidth,
          scope: me,
          listeners: {
            scope: me,
            change: me.reloadDataByPageSize
          }
        });
        items.push(me.afterPageSizeText);
      }
    }
    items.push('-');
    items.push(me.beforePageText);
    items.push({
      xtype: 'numberfield',
      itemId: 'inputItem',
      name: 'inputItem',
      cls: "" + Ext.baseCSSPrefix + "tbar-page-number",
      allowDecimals: false,
      minValue: 1,
      hideTrigger: true,
      enableKeyEvents: true,
      keyNavEnabled: false,
      selectOnFocus: true,
      submitValue: false,
      isFormField: false,
      width: me.inputItemWidth,
      margins: '-1 2 3 2',
      listeners: {
        scope: me,
        keydown: me.onPagingKeyDown,
        blur: me.onPagingBlur
      }
    });
    items.push({
      xtype: 'tbtext',
      itemId: 'afterTextItem',
      margin: su.getThemeVersion() === 2 ? '0 6 0 4' : void 0,
      text: Ext.String.format(me.afterPageText, 1)
    });
    items.push('-');
    items.push({
      itemId: 'next',
      tooltip: me.nextText,
      overflowText: me.nextText,
      iconCls: "" + Ext.baseCSSPrefix + "tbar-page-next",
      disabled: true,
      handler: me.moveNext,
      scope: me
    });
    if (su.getThemeVersion() === 2) {
      for (_k = 0, _len2 = items.length; _k < _len2; _k++) {
        index = items[_k];
        if (index.itemId === 'next') {
          index.iconCls = 'icon-next';
          index.margin = '-2 0 0 0';
          index.style = 'color: #4CAEED;font-size: 20px';
        }
      }
    }
    items.push({
      itemId: 'last',
      tooltip: me.lastText,
      overflowText: me.lastText,
      iconCls: "" + Ext.baseCSSPrefix + "tbar-page-last",
      disabled: true,
      handler: me.moveLast,
      scope: me
    });
    if (su.getThemeVersion() === 2) {
      for (_l = 0, _len3 = items.length; _l < _len3; _l++) {
        index = items[_l];
        if (index.itemId === 'last') {
          index.iconCls = 'icon-jump-fwd';
          index.margin = '-2 4 0 3';
          index.style = 'color: #4CAEED;font-size: 20px;width: 20px';
        }
      }
    }
    items.push('-');
    if (su.getThemeVersion() !== 2) {
      if (!me.cache.hideRefresh) {
        items.push({
          itemId: 'refresh',
          tooltip: me.refreshText,
          overflowText: me.refreshText,
          iconCls: "" + Ext.baseCSSPrefix + "tbar-loading",
          handler: me.doRefresh,
          scope: me
        });
      }
    }
    if (su.getThemeVersion() === 2) {
      menuItems = [];
      beforePageSize = {
        xtype: 'label',
        text: 'Show',
        margin: '0 6 0 0',
        cls: "" + Ext.baseCSSPrefix + "tbar-page-menu-text"
      };
      afterPageSize = {
        xtype: 'label',
        text: 'Items',
        margin: '0 0 0 6',
        cls: "" + Ext.baseCSSPrefix + "tbar-page-menu-text"
      };
      menuItems.push(beforePageSize);
      menuItems.push({
        xtype: 'numberfield',
        itemId: 'pageSize',
        cls: "" + Ext.baseCSSPrefix + "tbar-page-size",
        width: 36,
        height: 16,
        disabled: false,
        scope: me,
        allowBlank: false,
        allowDecimals: false,
        msgTarget: 'none',
        minValue: 1,
        hideTrigger: true,
        enableKeyEvents: true,
        keyNavEnabled: false,
        selectOnFocus: true,
        submitValue: false,
        listeners: {
          scope: me,
          specialkey: function(filed, e) {
            me = this;
            if (e.getKey() === e.ENTER) {
              me.reloadDataByPageSize(filed, filed.getValue());
              filed.up('menu').hide();
            }
          }
        }
      });
      menuItems.push(afterPageSize);
      pageSizeCtn = Ext.create('Ext.Container', {
        itemId: 'pageSizeCtn',
        layout: {
          type: 'hbox'
        },
        items: menuItems
      });
      pageNavCtn = Ext.create('Ext.Container', {
        itemId: 'pageNavCtn',
        layout: {
          type: 'hbox'
        }
      });
      pageNavCtn.setVisible(false);
      pageInfoText = {
        itemId: 'pageInfo',
        xtype: 'label',
        cls: "" + Ext.baseCSSPrefix + "tbar-page-menu-text"
      };
      menu = Ext.create('Ext.menu.Menu', {
        itemId: 'pageInfoMenu',
        bodyCls: "" + Ext.baseCSSPrefix + "paging-more-menu",
        minWidth: 160,
        shadow: false,
        items: [pageNavCtn, pageSizeCtn, pageInfoText]
      });
      btnMore = Ext.create('Ext.Button', {
        itemId: 'pageMoreBtn',
        tooltip: 'Show More',
        cls: "" + Ext.baseCSSPrefix + "tbar-more",
        iconCls: "" + Ext.baseCSSPrefix + "tbar-more-icon",
        margin: '-2 4 0 0',
        menu: menu,
        scope: me,
        listeners: {
          click: function(btn) {
            return btn.menu.showBy(btn.up('header'), 'tr-br', [0, 1]);
          }
        }
      });
      items.push(btnMore);
    }
    return items;
  },
  reloadDataByPageSize: function(comp, newPageSize, oldValue, eOpts) {
    var fieldCt, grid, me, pagingEvent, prop, rq, _ref;
    me = this;
    rq = Corefw.util.Request;
    fieldCt = me.up('fieldcontainer');
    prop = fieldCt != null ? (_ref = fieldCt.cache) != null ? _ref._myProperties : void 0 : void 0;
    if (prop.events['ONRETRIEVE']) {
      pagingEvent = prop.events['ONRETRIEVE'];
    } else {
      pagingEvent = prop.events['ONLOAD'];
    }
    if (pagingEvent != null) {
      grid = me.ownerCt.ownerCt;
      grid.store.pageSize = newPageSize;
      me.doRefresh();
    }
  },
  onRender: function() {
    var me, pageData, pagenum, su;
    this.callParent(arguments);
    su = Corefw.util.Startup;
    me = this;
    if (su.getThemeVersion() === 2) {
      pagenum = me.getComponent('inputItem');
      pagenum.setHeight(16);
      pageData = {
        currentPage: pagenum.value
      };
      me.onPaginationChange(me, pageData);
    }
  },
  addListeners: function() {
    var additionalListeners;
    this.listeners = this.listeners || {};
    additionalListeners = {
      change: this.onPaginationChange
    };
    Ext.apply(this.listeners, additionalListeners);
  },
  onPaginationChange: function(me, pageData) {
    var aftertext, currentPage, firstbtn, lastbtn, lastpagenum, nextbtn, pageNavCtn, pagenumfield, prevbtn, su;
    if (pageData == null) {
      pageData = {};
    }
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      if (pageData) {
        lastpagenum = me.totalPages;
        currentPage = pageData.currentPage;
        pageNavCtn = me.child('#pageMoreBtn').menu.child('#pageNavCtn');
        if (pageNavCtn.items.items.length > 0) {
          me = pageNavCtn;
        }
        firstbtn = me.getComponent('first');
        prevbtn = me.getComponent('prev');
        lastbtn = me.getComponent('last');
        nextbtn = me.getComponent('next');
        aftertext = me.getComponent('afterTextItem');
        pagenumfield = me.getComponent('inputItem');
        if (lastpagenum === 1 || lastpagenum === 0) {
          firstbtn.setVisible(false);
          prevbtn.setVisible(false);
          lastbtn.setVisible(false);
          nextbtn.setVisible(false);
        } else {
          if (currentPage === 1) {
            firstbtn.setVisible(false);
            prevbtn.setVisible(false);
            lastbtn.setVisible(true);
            nextbtn.setVisible(true);
          } else {
            if (currentPage === lastpagenum) {
              firstbtn.setVisible(true);
              prevbtn.setVisible(true);
              lastbtn.setVisible(false);
              nextbtn.setVisible(false);
            } else {
              firstbtn.setVisible(true);
              prevbtn.setVisible(true);
              lastbtn.setVisible(true);
              nextbtn.setVisible(true);
            }
          }
        }
      }
    }
  },
  updateInfo: function() {
    var afterText, count, displayItem, me, msg, pageData, pageInfo, store, su, totalPages, totalPagesStr;
    su = Corefw.util.Startup;
    me = this;
    displayItem = me.child('#displayItem');
    store = me.store;
    pageData = me.getPageData();
    count = store.getCount();
    if (su.getThemeVersion() === 2) {
      if (pageData.total > 0) {
        me.setVisible(true);
      } else {
        me.setVisible(false);
      }
      afterText = me.getComponent('afterTextItem');
      if (afterText == null) {
        afterText = me.child('#pageMoreBtn').menu.queryById('afterTextItem');
      }
      totalPagesStr = afterText.text.slice(3);
      totalPages = parseInt(totalPagesStr, 10);
      me.totalPages = totalPages;
      afterText.setText('of ' + Ext.util.Format.number(totalPages, '0,000'));
    }
    if (count === 0) {
      msg = me.emptyMsg;
    } else {
      msg = Ext.String.format(me.displayMsg, pageData.fromRecord, pageData.toRecord, pageData.total);
    }
    if (su.getThemeVersion() === 2) {
      pageInfo = me.child('#pageMoreBtn').menu.queryById('pageInfo');
      if (pageInfo != null) {
        pageInfo.setText(msg);
      }
    } else {
      if (displayItem != null) {
        displayItem.setText(msg);
      }
    }
  },
  setChildDisabled: function(selector, disabled) {
    var item, me, su;
    me = this;
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      item = me.child(selector);
      if ((item != null) && !disabled) {
        item.removeCls("" + Ext.baseCSSPrefix + "btn-default-toolbar-small-disabled");
      }
    }
    return me.callParent(arguments);
  },
  child: function(selector, returnDom) {
    var item, me, selectorId, selectorList, su;
    me = this;
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      selectorList = ['#afterTextItem', '#first', '#prev', '#next', '#last', '#refresh', '#inputItem'];
      if (selectorList.indexOf(selector >= 0)) {
        selectorId = selector.replace('#', '');
        item = me.queryById(selectorId);
        return item;
      }
    }
    return me.callParent(arguments);
  }
});
