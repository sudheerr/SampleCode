// Generated by CoffeeScript 1.8.0

/*
A Column definition class which renders a column for selection model providing enhanced support:
  - select scope can be change between page and grid
 */
Ext.define('Corefw.view.grid.column.SelectColumn', {
  extend: 'Ext.grid.column.Column',
  alias: 'widget.coreselectcolumn',
  baseCls: Ext.baseCSSPrefix + 'coreselectcolumn-header',
  hoverCls: Ext.baseCSSPrefix + 'coreselectcolumn-header-over',
  selectAllScope: 'PAGE',
  prevsChecked: void 0,
  afterRender: function() {
    this.callParent(arguments);
    return this.titleEl.addCls(this.hoverCls);
  },
  onTitleMouseOver: function() {},
  onTitleMouseOut: function() {},
  onTitleElClick: function(event, target) {
    var me;
    me = this;
    if (target !== me.triggerEl.el.dom) {
      this.callParent(arguments);
      return;
    }
    if (!me.menu) {
      me.menu = Ext.create('Ext.menu.Menu', {
        showSeparator: false,
        items: me.getMenuItems()
      });
    }
    return me.menu.showBy(event.target);
  },
  getMenuItems: function() {
    var me, menuItems;
    me = this;
    return menuItems = [
      {
        text: 'SelectAll scope:',
        cls: 'menusubtitle',
        plain: true,
        isMenuItem: false
      }, {
        xtype: 'menucheckitem',
        text: 'Current page',
        group: 'gridSelectAllMode',
        handler: me.onSmPageClick,
        scope: me,
        checked: me.selectAllScope !== 'GRID'
      }, {
        xtype: 'menucheckitem',
        text: 'Whole grid',
        group: 'gridSelectAllMode',
        handler: me.onSmGridClick,
        scope: me,
        checked: me.selectAllScope === 'GRID'
      }
    ];
  },
  getGridProps: function() {
    var gridProps, gridbase;
    gridbase = this.up('coreobjectgrid');
    gridProps = gridbase != null ? gridbase.grid.cache._myProperties : void 0;
    return gridProps;
  },
  onSmPageClick: function() {
    this.selectAllScope = 'PAGE';
    this.prevsChecked = void 0;
    return this.up('coreobjectgrid').switchSelectAllScope();
  },
  onSmGridClick: function() {
    var grid;
    this.selectAllScope = 'GRID';
    grid = this.up('coreobjectgrid');
    if (grid.grid.getSelectionModel().getCount() === grid.grid.getStore().getCount()) {
      this.getGridProps().selectedAll = true;
    }
    return grid.switchSelectAllScope();
  },
  generatePostData: function() {
    var bufferedPostData, me;
    me = this;
    bufferedPostData = {
      selectedAll: this.getGridProps().selectedAll,
      selectAllScope: this.selectAllScope,
      deSelectingAll: this.prevsChecked === true
    };
    this.prevsChecked = void 0;
    return bufferedPostData;
  },
  updateState: function(props) {
    return this.selectAllScope = props.selectAllScope;
  },
  selectAllChange: function(isCheckedPrevs) {
    return this.prevsChecked = isCheckedPrevs;
  }
});
