// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.ColumnSelectorPlugin', {
  extend: 'Ext.AbstractPlugin',
  alias: 'plugin.columnselectorplugin',
  init: function(parent) {
    var columnSortableMap, keydownHandler, keyupHandler;
    parent.columnSelector = {
      selected: [],
      singleSelect: function(column) {
        this.iteratorColumnCell(column, function(view, cell) {
          cell.addCls(view.selectedCellCls);
        });
        this.selected.push(column);
        column.selected = true;
        column.active = true;
      },
      singleDeselect: function(column) {
        this.iteratorColumnCell(column, function(view, cell) {
          cell.removeCls(view.selectedCellCls);
        });
        Ext.Array.remove(this.selected, column);
        column.selected = false;
        column.active = false;
      },
      doSelect: function(column) {
        var subCol, subColumns, _i, _len;
        subColumns = column.getGridColumns();
        if (subColumns.length) {
          for (_i = 0, _len = subColumns.length; _i < _len; _i++) {
            subCol = subColumns[_i];
            this.singleSelect(subCol);
          }
        } else {
          this.singleSelect(column);
        }
      },
      doDeselect: function(column) {
        var subCol, subColumns, _i, _len;
        subColumns = column.getGridColumns();
        if (subColumns.length) {
          for (_i = 0, _len = subColumns.length; _i < _len; _i++) {
            subCol = subColumns[_i];
            this.singleDeselect(subCol);
          }
        } else {
          this.singleDeselect(column);
        }
      },
      deselectAll: function() {
        while (this.selected.length) {
          this.doDeselect(this.selected[0]);
        }
      },
      iteratorColumnCell: function(column, fn) {
        var cell, position, view;
        view = parent.getView();
        if (view.getViewForColumn) {
          view = view.getViewForColumn(column);
        }
        position = {
          column: column.getIndex(),
          row: 0
        };
        cell = view.getCellByPosition(position);
        while (cell) {
          fn(view, cell);
          position.row++;
          cell = view.getCellByPosition(position);
        }
      }
    };
    parent.on("headerclick", function(ct, column, ev, t, opts) {
      var columnSelector;
      columnSelector = parent.columnSelector;
      if (!ev.ctrlKey) {
        columnSelector.deselectAll();
      } else {
        columnSelector.doSelect(column);
      }
    });
    columnSortableMap = {};
    parent.on("afterrender", function() {
      var col, columns, _i, _len;
      columns = parent.headerCt.getGridColumns();
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        col = columns[_i];
        columnSortableMap[col.id] = col.sortable;
      }
    });
    keydownHandler = function(e) {
      var col, columns, _i, _len;
      if (e.keyCode === Ext.EventObject.CTRL) {
        columns = parent.headerCt.getGridColumns();
        for (_i = 0, _len = columns.length; _i < _len; _i++) {
          col = columns[_i];
          col.sortable = false;
        }
      }
    };
    keyupHandler = function(e) {
      var col, columns, _i, _len;
      if (e.keyCode === Ext.EventObject.CTRL) {
        columns = parent.headerCt.getGridColumns();
        for (_i = 0, _len = columns.length; _i < _len; _i++) {
          col = columns[_i];
          col.sortable = columnSortableMap[col.id];
        }
      }
    };
    Ext.getDoc().on("keydown", keydownHandler);
    Ext.getDoc().on("keyup", keyupHandler);
    parent.on("destroy", function() {
      Ext.getDoc().un("keydown", keydownHandler);
      Ext.getDoc().un("keyup", keyupHandler);
    });
  }
});
