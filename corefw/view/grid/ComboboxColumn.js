// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.ComboboxColumn', {
  extend: 'Ext.grid.column.Column',
  xtype: 'corecombocolumn',
  listConfig: {
    resizable: {
      listeners: {
        beforeresize: function() {
          this.resizeTracker.maxHeight = 10000;
          this.target.maxHeight = 10000;
        },
        resize: function() {
          this.resizeTracker.maxHeight = 300;
          this.target.maxHeight = 300;
        }
      }
    }
  },
  validValues: null,
  validLookup: {},
  initComponent: function() {
    var val, validLookup, validValues, _i, _len;
    this.callParent(arguments);
    validValues = this.validValues;
    validLookup = this.validLookup;
    if (validValues && validValues.length) {
      for (_i = 0, _len = validValues.length; _i < _len; _i++) {
        val = validValues[_i];
        if (Ext.isObject(val && (val.value != null) && (val.displayValue != null))) {
          validLookup[val.value] = val.displayValue;
        } else {
          this.validLookup[val] = val;
        }
      }
    }
  },
  defaultRenderer: function(value) {
    var arr, me, renderDisplayValue;
    me = this;
    renderDisplayValue = function(val) {
      var retVal;
      if (Ext.isObject(val)) {
        if (val.displayValue != null) {
          return val.displayValue;
        }
        if (val.value != null) {
          return val.value;
        }
      }
      retVal = me.validLookup[val];
      if (retVal) {
        return retVal;
      }
      return val;
    };
    if (Ext.isArray(value)) {
      arr = [];
      Ext.each(value, function(item) {
        arr.push(renderDisplayValue(item));
      });
      return arr.join(', ');
    }
    return renderDisplayValue(value);
  }
});
