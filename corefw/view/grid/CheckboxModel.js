// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.CheckboxModel', {
  extend: 'Ext.selection.CheckboxModel',
  alias: 'selection.corecheckboxmodel',
  isSelectedAll: false,
  buffered: false,
  doDeselect: function(records, keepExisting, suppressEvent) {
    var gridProps, ret;
    gridProps = this.getGridProps();
    if (gridProps != null) {
      gridProps.selectedAll = false;
    }
    if (gridProps != null ? gridProps.infinity : void 0) {
      this.preventFocus = true;
    }
    if (!(gridProps != null ? gridProps.enableAutoSelectAll : void 0) && !suppressEvent) {
      this.preventFocus = void 0;
      this.isSelectedAll = false;
    }
    ret = this.callParent(arguments);
    if (gridProps != null ? gridProps.infinity : void 0) {
      this.preventFocus = void 0;
      this.isSelectedAll = false;
    }
    return ret;
  },
  doSelect: function(records, keepExisting, suppressEvent) {
    var gridProps;
    gridProps = this.getGridProps();
    if (gridProps != null ? gridProps.infinity : void 0) {
      this.preventFocus = true;
    }
    if (!(gridProps != null ? gridProps.enableAutoSelectAll : void 0) && !suppressEvent) {
      this.preventFocus = void 0;
      this.isSelectedAll = false;
    }
    this.callParent(arguments);
    if (gridProps != null ? gridProps.infinity : void 0) {
      this.preventFocus = void 0;
    }
  },
  updateHeaderState: function() {
    var gridProps;
    this.callParent(arguments);
    gridProps = this.getGridProps();
    if ((gridProps != null ? gridProps.buffered : void 0) && this.getSelColumn().selectAllScope === 'GRID') {
      this.getSelColumn().updateState(gridProps);
      if (!gridProps.selectedAll) {
        this.toggleUiHeader(false);
      }
      return;
    }
    if (((gridProps != null ? gridProps.infinity : void 0) || !(gridProps != null ? gridProps.enableAutoSelectAll : void 0)) && !this.isSelectedAll) {
      this.toggleUiHeader(false);
      this.isSelectedAll = false;
    }
  },
  getGridProps: function() {
    var gridProps, gridbase;
    gridbase = this.view.up('coreobjectgrid');
    gridProps = gridbase != null ? gridbase.grid.cache._myProperties : void 0;
    return gridProps;
  },
  getSelColumn: function() {
    return this.view.up('coreobjectgrid').down('coreselectcolumn');
  },
  onHeaderClick: function(headerCt, header, e) {
    var container, grid, isChecked, isTreeGrid, me, props, selectable, suppressEvents;
    props = this.getGridProps();
    suppressEvents = false;
    grid = void 0;
    selectable = true;
    if (header.isCheckerHd) {
      e.stopEvent();
      me = this;
      isChecked = header.el.hasCls(Ext.baseCSSPrefix + 'grid-hd-checker-on');
      me.preventFocus = true;
      container = header.up('fieldcontainer');
      isTreeGrid = container.tree;
      if (props.buffered && this.getSelColumn().selectAllScope === 'GRID') {
        this.getSelColumn().selectAllChange(isChecked);
      }
      if (!isTreeGrid) {
        grid = container.grid;
        grid.getStore().data.each(function() {
          if (this.data._myProperties.selectable === false) {
            selectable = false;
            return selectable;
          }
        });
      } else {
        grid = container.tree;
        grid.traverseNodes(grid.cache._myProperties.allTopLevelNodes, 'children', function(n) {
          if (n.selectable === false) {
            return selectable = false;
          }
        });
      }
      if (isChecked) {
        this.isSelectedAll = false;
        if (props != null) {
          props.selectedAll = false;
        }
        if (selectable && props.events['ONDESELECTALL']) {
          suppressEvents = true;
        }
        me.deselectAll(suppressEvents);
      } else {
        this.isSelectedAll = true;
        if (props != null) {
          props.selectedAll = true;
        }
        if (selectable && props.events['ONSELECTALL']) {
          suppressEvents = true;
        }
        if ((props != null ? props.enableAutoSelectAll : void 0) === false) {
          me.selectAll(true);
        } else {
          me.selectAll(suppressEvents);
        }
      }
      delete me.preventFocus;
      if (suppressEvents) {
        if (isChecked) {
          grid.fireEvent('deselectall', container, 'ONDESELECTALL', {});
        } else {
          grid.fireEvent('selectall', container, 'ONSELECTALL', {});
        }
        return false;
      }
    }
  },
  renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
    var su, _ref, _ref1, _ref2, _ref3;
    this.callParent(arguments);
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      if ((record != null ? (_ref = record.raw) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.selectable : void 0 : void 0 : void 0) === false) {
        return '<div class="' + Ext.baseCSSPrefix + 'grid-row-checker selectmodel-item-disabled ' + Ext.baseCSSPrefix + 'grid-checkselect" role="presentation">&#160;</div>';
      } else {
        return '<div class="' + Ext.baseCSSPrefix + 'grid-row-checker ' + Ext.baseCSSPrefix + 'grid-checkselect" role="presentation">&#160;</div>';
      }
    } else {
      if ((record != null ? (_ref2 = record.raw) != null ? (_ref3 = _ref2._myProperties) != null ? _ref3.selectable : void 0 : void 0 : void 0) === false) {
        return '<div class="' + Ext.baseCSSPrefix + 'grid-row-checker selectmodel-item-disabled" role="presentation">&#160;</div>';
      } else {
        return '<div class="' + Ext.baseCSSPrefix + 'grid-row-checker" role="presentation">&#160;</div>';
      }
    }
  },
  getHeaderConfig: function() {
    var config, gridProps, selColConfig;
    config = this.callParent(arguments);
    if (!this.buffered) {
      return config;
    }
    gridProps = this.getGridProps(true);
    selColConfig = {
      xtype: 'coreselectcolumn',
      width: 32,
      menuDisabled: false,
      selectedAll: gridProps.selectedAll,
      selectAllScope: gridProps.selectAllScope
    };
    Ext.apply(config, selColConfig);
    return config;
  }
});
