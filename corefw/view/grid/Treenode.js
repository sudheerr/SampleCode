// Generated by CoffeeScript 1.8.0

/*
	Defines a grid to be shown underneath the tree node.
	Activated by clicking on the tree node to show the grid.
	Clicking on the tree node again will hide (actually, destroy) the grid
 */
Ext.define('Corefw.view.grid.Treenode', {
  extend: 'Corefw.view.grid.GridBase',
  xtype: 'coregridintreenode',
  minHeight: 50,
  header: false,
  initComponent: function() {
    this.initializeTreeNode();
    this.callParent(arguments);
    delete this.storeAlreadyAttached;
  },
  initializeTreeNode: function() {
    var gridDataItems, parentContainer, props, treeCache, treenodeDom, treepanel;
    parentContainer = this.parentContainer;
    treepanel = this.treepanel;
    treenodeDom = this.treenodeDom;
    gridDataItems = this.gridDataItems;
    treeCache = this.cache;
    props = treeCache._myProperties;
    this.uipath = props.uipath;
    if (props.widgetType === 'MIXED_GRID') {
      this.initializeMixedGridTreeNode();
      return;
    }
  },
  initializeMixedGridTreeNode: function() {
    var cm, columnInfoArray, config, domspan, gridDataItems, gridList, gridName, gridProps, leftOffset, newdiv, parentContainer, span, st, storeName, treenodeDom, treepanel, _ref;
    cm = Corefw.util.Common;
    parentContainer = this.parentContainer;
    treepanel = this.treepanel;
    treenodeDom = this.treenodeDom;
    gridDataItems = this.gridDataItems;
    gridList = cm.objectClone(parentContainer.cache);
    delete gridList._myProperties;
    this.gridList = gridList;
    gridName = gridDataItems.name;
    gridProps = gridList[gridName];
    columnInfoArray = gridProps._myProperties.columnAr;
    storeName = parentContainer.uipath + '/' + gridName;
    span = Ext.dom.Query.selectNode('span', treenodeDom);
    domspan = new Ext.dom.Element.Fly(span);
    newdiv = domspan.createChild();
    leftOffset = domspan.dom.offsetLeft + 5;
    treenodeDom.newdiv = newdiv;
    this.cache = gridProps;
    st = this.createStore(storeName, columnInfoArray, gridDataItems.items);
    config = {
      name: gridName,
      renderTo: newdiv,
      uipath: gridProps != null ? (_ref = gridProps._myProperties) != null ? _ref.uipath : void 0 : void 0,
      treepanel: treepanel,
      selModel: {
        selType: 'rowmodel',
        mode: 'SINGLE'
      },
      autoDestroy: true,
      storeAlreadyAttached: true,
      store: st,
      maxWidth: treepanel.getWidth() - leftOffset - 50,
      margin: '5 10 2 ' + leftOffset
    };
    if (gridName) {
      config.title = gridName;
    }
    Ext.apply(this, config);
  },
  afterRender: function() {
    var mixedgrid;
    this.callParent(arguments);
    this.getSelectionModel().setSelectionMode('SINGLE');
    mixedgrid = this.initialConfig.mixedgrid;
    if (mixedgrid) {
      if (this.gridList) {
        this.cache = this.gridList[this.name];
      } else {
        this.cache = mixedgrid.cache._myProperties.gridList[this.name];
      }
    }
  },
  createStore: function(name, columnInfoArray, dataArray) {
    var colInfo, colValue, columnType, dataIndex, dataObj, dt, fieldObj, fields, path, st, storeConfig, storeDataAr, storeFieldObj, type, valueObj, _i, _j, _len, _len1, _ref, _ref1;
    storeDataAr = [];
    fields = [];
    storeConfig = {
      autoDestroy: true,
      fields: fields,
      storeId: name,
      data: storeDataAr
    };
    fieldObj = {};
    for (_i = 0, _len = columnInfoArray.length; _i < _len; _i++) {
      colInfo = columnInfoArray[_i];
      colInfo = colInfo._myProperties || {};
      if (colInfo.index > -1) {
        dataIndex = colInfo.index + '';
      } else {
        continue;
      }
      fieldObj[dataIndex] = colInfo;
      storeFieldObj = {
        name: dataIndex
      };
      type = colInfo.type;
      columnType = colInfo.columnType;
      if (type === 'date' || columnType === 'dateColumn') {
        storeFieldObj.type = 'date';
      }
      fields.push(storeFieldObj);
    }
    if (dataArray && Ext.isArray(dataArray) && dataArray.length) {
      for (_j = 0, _len1 = dataArray.length; _j < _len1; _j++) {
        dataObj = dataArray[_j];
        valueObj = dataObj.value;
        if (!valueObj) {
          continue;
        }
        storeDataAr.push(valueObj);
        for (path in valueObj) {
          colValue = valueObj[path];
          type = (_ref = fieldObj[dataIndex]) != null ? _ref.type : void 0;
          columnType = (_ref1 = fieldObj[dataIndex]) != null ? _ref1.columnType : void 0;
          if ((type === 'date' || columnType === 'dateColumn') && colValue) {
            dt = new Date(colValue);
            valueObj[dataIndex] = dt;
          }
        }
      }
    }
    Corefw.util.Data.removeStore(name);
    st = Ext.create('Ext.data.Store', storeConfig);
    return st;
  }
});
