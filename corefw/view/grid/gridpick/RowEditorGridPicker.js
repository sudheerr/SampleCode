// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.grid.gridpick.RowEditorGridPicker', {
  extend: 'Ext.form.field.ComboBox',
  xtype: 'roweditorgridpicker',
  cls: 'gridpicker',
  minChars: 2,
  editable: false,
  lookupable: false,
  gridProperties: {
    items: []
  },
  validValues: {},
  displayValue: "",
  value: "",
  firstLookup: true,
  valueMap: {},
  displayValueSeparator: ",",
  queryMode: 'local',
  checkChangeBuffer: 500,
  initComponent: function() {
    var cm;
    this.listeners = this.listeners || {};
    Ext.apply(this.listeners, this.addListeners);
    if (Corefw.view.form.field.ComboboxField.isLookupable(this)) {
      this.addCls('citiriskLookup');
      this.setHideTrigger(true);
    }
    this.setEditable(Corefw.view.form.field.ComboboxField.isEditable(this));
    cm = Corefw.util.Common;
    this.callParent(arguments);
    this.setRawValue(cm.getDisplayValue(this));
    this.value = cm.getValue(this);
    this.initGridwindow();
  },
  setComboValues: function(value) {
    var cm, me, setMap, val, _i, _len;
    cm = Corefw.util.Common;
    this.validValues = value;
    me = this;
    setMap = function(val) {
      var displayValue, _value;
      _value = cm.getValue(val);
      displayValue = cm.getDisplayValue(val);
      me.valueMap[displayValue] = _value;
    };
    if (Ext.isArray(value)) {
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        val = value[_i];
        setMap(val);
      }
    } else {
      setMap(value);
    }
  },
  addComboValue: function(comboValue) {
    var cm, displayValue, val, value, _i, _len;
    if (Ext.isString(comboValue)) {
      return;
    }
    if (!Ext.isArray(comboValue)) {
      comboValue = [comboValue];
    }
    for (_i = 0, _len = comboValue.length; _i < _len; _i++) {
      val = comboValue[_i];
      cm = Corefw.util.Common;
      value = cm.getValue(val);
      displayValue = cm.getDisplayValue(val);
      this.valueMap[displayValue] = value;
    }
  },
  addListeners: {
    blur: function(me, e) {
      var _ref, _ref1;
      if ((_ref = me.gridwindow) != null ? (_ref1 = _ref.el) != null ? _ref1.dom.contains(e.target) : void 0 : void 0) {
        return false;
      }
    },
    change: function(me, newVal, oldVal) {
      if (this.selChanging) {
        delete this.selChanging;
        return;
      }
      if (this.isLookupable()) {
        this.loadData(this.getRawValue());
        delete this.value;
      }
    },
    focus: function(me) {
      var lookup;
      if (me.isLookupable()) {
        lookup = this.getRawValue();
        this.loadData(lookup, function() {
          me.showGridWindow();
        });
      }
    },
    resize: function(me, width, height, oldWidth, oldHeight) {
      if (me.gridwindow && !me.gridwindow.isHidden()) {
        me.showGridWindow();
      }
    }
  },
  onTriggerClick: function() {
    var me;
    me = this;
    if (!me.isLookupable()) {
      if (!me.isDataLoaded) {
        this.loadData();
        me.isDataLoaded = true;
      }
      return me.showGridWindow();
    }
  },
  getValue: function() {
    var value;
    value = this.value;
    if (Ext.isEmpty(value)) {
      return this.getRawValue();
    }
    return value;
  },
  initGridwindow: function() {
    var me;
    me = this;
    this.gridwindow = Ext.create('Corefw.view.grid.gridpick.GridPickerWindow', {
      parentField: me,
      multiSelect: this.multiSelect
    });
  },
  setPickValue: function(val) {
    var cm, displayValue, value;
    cm = Corefw.util.Common;
    displayValue = cm.getDisplayValue(val);
    value = cm.getValue(val);
    this.setRawValue(displayValue);
    this.value = value;
    if (this.valueMap[displayValue] === void 0) {
      this.valueMap[displayValue] = value;
    }
    this.validate();
  },
  setValue: function(val) {
    var cm, sel, valIndexes, vals, win, _i, _len;
    cm = Corefw.util.Common;
    win = this.gridwindow;
    if (win) {
      vals = win.setSelectedValue(val);
      valIndexes = [];
      this.value = cm.getValue(val);
      for (_i = 0, _len = vals.length; _i < _len; _i++) {
        sel = vals[_i];
        valIndexes.push(sel.index);
      }
      if (valIndexes.length) {
        this.setPickValue(win.getValueByIndex(valIndexes));
      } else {
        if (Ext.isObject(val) || (Ext.isString(val) && this._getDisplayValue(val) === '')) {
          this.setRawValue(cm.getDisplayValue(val));
        } else {
          this.setRawValue(this._getDisplayValue(val));
        }
      }
    }
  },
  _getDisplayValue: function(value) {
    var cm, p, result, val, _i, _len;
    if (!Ext.isArray(value)) {
      value = [value];
    }
    cm = Corefw.util.Common;
    result = [];
    for (p in this.valueMap) {
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        val = value[_i];
        if (this.valueMap[p] === cm.getValue(val)) {
          result.push(p);
        }
      }
    }
    return result.join(this.displayValueSeparator);
  },
  showGridData: function(props) {
    var gridProperties, validValues, win;
    gridProperties = props != null ? props.gridPicker : void 0;
    if (gridProperties) {
      this.gridProperties = gridProperties;
    }
    validValues = props != null ? props.validValues : void 0;
    if (validValues) {
      this.setComboValues(validValues);
    }
    win = this.gridwindow;
    win.showData({
      gridPicker: this.gridProperties,
      validValues: this.validValues
    });
  },
  loadData: function(searchString, callbackFn) {
    var callback, me, props, rq, url, win;
    if (!searchString) {
      searchString = '';
    }
    rq = Corefw.util.Request;
    me = this;
    win = me.gridwindow;
    if (!win) {
      return;
    }
    if (this.isLookupable()) {
      callback = function(respObj) {
        me.showGridData(respObj);
        win.setSelectedValue(me.getValue());
        if (callbackFn) {
          callbackFn();
        }
      };
      url = rq.objsToUrl3(this.eventURLs['ONLOOKUP'], null, searchString);
      rq.sendRequest5(url, callback, this.uipath);
    } else {
      props = this.cache._myProperties;
      if (this.firstLookup) {
        this.showGridData(props);
      }
      win.setSelectedValue(me.getValue());
      if (callbackFn) {
        callbackFn();
      }
    }
  },
  hideGridWindow: function() {
    this.gridwindow.hide();
    this.firstLookup = true;
  },
  showGridWindow: function() {
    var me, win;
    me = this;
    win = me.gridwindow;
    if (!(typeof win.isVisible === "function" ? win.isVisible() : void 0)) {
      win.show();
    }
  },
  isLookupable: function() {
    var _ref;
    return (Corefw.view.form.field.ComboboxField.isLookupable(this)) || (Corefw.view.form.field.ComboboxField.isLookupable((_ref = this.cache) != null ? _ref._myProperties : void 0));
  },
  isEditable: function() {
    var _ref;
    return (Corefw.view.form.field.ComboboxField.isEditable(this)) || (Corefw.view.form.field.ComboboxField.isEditable((_ref = this.cache) != null ? _ref._myProperties : void 0));
  },
  onDestroy: function() {
    this.callParent(arguments);
    if (this.gridwindow) {
      this.gridwindow.destroy();
      delete this.gridwindow;
    }
  }
});
