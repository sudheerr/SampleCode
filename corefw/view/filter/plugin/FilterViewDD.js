// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.filter.plugin.FilterViewDD', {
  extend: 'Ext.AbstractPlugin',
  alias: 'plugin.filterviewdragdrop',
  requires: ['Corefw.model.FilterCriteria'],
  ddGroup: 'filterViewDD',
  enableDrag: true,
  enableDrop: true,
  ifCopyDraggedItem: function(parent, droppedParent, record) {
    return parent.getStore().isGlobal && CorefwFilterModel.fiscalRegex.test(record.get('pathString'));
  },
  ifItemDraggable: function(record) {
    return true;
  },
  ifItemDroppable: function(record) {
    return true;
  },
  init: function(parent) {
    var _this;
    this.parent = parent;
    _this = this;
    if (this.enableDrag) {
      parent.on('render', function() {
        _this._enableDragFeature(parent);
      });
    }
    if (this.enableDrop) {
      parent.on('render', function() {
        _this._enableDropFeature(parent);
      });
    }
  },
  _enableDragFeature: function(parent) {
    var _this;
    _this = this;
    this.dragZone = Ext.create('Ext.dd.DragZone', parent.getEl(), {
      ddGroup: this.ddGroup,
      getDragData: function(e) {
        var d, data, sourceEl;
        sourceEl = e.getTarget(parent.itemSelector, 10);
        if (sourceEl) {
          d = document.createElement('div');
          d.id = Ext.id();
          d.innerHTML = parent.getDragContent(parent.indexOf(sourceEl));
          data = {
            ddel: d,
            sourceEl: sourceEl,
            repairXY: Ext.fly(sourceEl).getXY(),
            draggedStore: parent.getStore(),
            draggedRecord: parent.getRecord(sourceEl),
            recordIndex: parent.indexOf(sourceEl)
          };
          return data;
        }
      },
      onBeforeDrag: function(data, e) {
        return _this.ifItemDraggable(data.draggedRecord);
      },
      getRepairXY: function() {
        return this.dragData.repairXY;
      },
      afterValidDrop: function(target, e, id) {
        var me;
        me = this;
        if (_this.ifCopyDraggedItem(parent, target.droppedParent, me.dragData.draggedRecord)) {
          return;
        }
        parent.removeRecord(me.dragData.draggedRecord);
      }
    });
  },
  _enableDropFeature: function(parent) {
    var _this;
    _this = this;
    this.dropZone = Ext.create('Ext.dd.DropZone', parent.getEl(), {
      ddGroup: this.ddGroup,
      droppedParent: parent,
      onContainerOver: function(source, e, data) {
        if (_this.ifItemDroppable(data.draggedRecord) && data.draggedStore !== this.droppedParent.getStore() && source.ddGroup === this.ddGroup) {
          return this.dropAllowed;
        }
        return this.dropNotAllowed;
      },
      onContainerDrop: function(source, e, data) {
        if (data.draggedStore === this.droppedParent.getStore()) {
          return false;
        }
        if (_this.ifItemDroppable(data.draggedRecord)) {
          parent.receiveCriteria(data.draggedStore.getCriteria()[data.recordIndex]);
          return true;
        }
        return false;
      }
    });
  },
  constructor: function() {
    this.callParent(arguments);
  }
});
