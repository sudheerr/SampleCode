// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.filter.menu.Number', {
  extend: 'Corefw.view.component.MenuWin',
  alias: 'widget.filterMenuNumber',
  requires: ['Corefw.model.FilterCriteria'],
  width: 180,
  plain: true,
  config: {
    filterPath: '',
    itemName: '',
    repetitiveRatio: -1
  },
  items: [
    {
      xtype: 'combo',
      name: 'operationCombo',
      store: Ext.create('Ext.data.Store', {
        fields: ['operation', 'desc'],
        data: [
          {
            'operation': 'eq',
            'desc': 'Equals'
          }, {
            'operation': 'ne',
            'desc': 'Not Equals'
          }, {
            'operation': 'lt',
            'desc': 'Less Than'
          }, {
            'operation': 'le',
            'desc': 'Less Than Equal To'
          }, {
            'operation': 'gt',
            'desc': 'Greater Than'
          }, {
            'operation': 'ge',
            'desc': 'Greater Than Equal To'
          }, {
            'operation': 'between',
            'desc': 'Between'
          }, {
            'operation': "isNull",
            'desc': 'IsNull'
          }, {
            'operation': "isNotNull",
            'desc': 'IsNotNull'
          }, {
            'operation': "isNullOrEmpty",
            'desc': 'IsNullOrEmpty'
          }, {
            'operation': "isNotNullOrEmpty",
            'desc': 'IsNotNullOrEmpty'
          }
        ]
      }),
      queryMode: 'local',
      displayField: 'desc',
      editable: false,
      selectOnFocus: false,
      hideLabel: true,
      valueField: 'operation',
      listeners: {
        afterrender: function(combo) {
          combo.setValue(combo.getStore().getAt(0).get('operation'));
        },
        change: function(combo, records, eOpts) {
          var menu;
          menu = combo.up('filterMenuNumber');
          if (CorefwFilterModel.operandNumber(combo.getValue()) === 0) {
            menu.query('field[name=textFieldNormal]')[0].hide();
            menu.query('field[name=textFieldbetween]')[0].hide();
          } else if (combo.getValue() === 'between') {
            menu.query('field[name=textFieldbetween]')[0].show();
            menu.query('field[name=textFieldNormal]')[0].show();
          } else {
            menu.query('field[name=textFieldbetween]')[0].hide();
            menu.query('field[name=textFieldNormal]')[0].show();
          }
        }
      }
    }, {
      name: 'textFieldNormal',
      xtype: 'field',
      allowBlank: true,
      value: ''
    }, {
      name: 'textFieldbetween',
      xtype: 'field',
      allowBlank: true,
      hidden: true,
      value: ''
    }
  ],
  bbar: [
    {
      xtype: 'button',
      scope: this,
      text: 'Apply',
      cls: 'primaryBtn',
      width: 55,
      listeners: {
        render: function(me) {
          var su;
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            me.setUI('primarybutton-small');
          }
        }
      },
      handler: function(button, e) {
        var criObj, criteriaStore, getSpecailNum, isSpecailNum, menu, opNumber, opTextField, opTextField2, path, temp, temp2, triggerOwner;
        menu = button.up('menu');
        opNumber = menu.query('combo[name=operationCombo]')[0].getValue();
        path = menu.filterPath;
        criObj = {};
        temp = '';
        criteriaStore = button.up('filterMenuNumber').criteriaStore;
        opTextField2 = menu.query('field[name=textFieldbetween]')[0];
        opTextField = menu.query('field[name=textFieldNormal]')[0];
        temp2 = '';
        triggerOwner = menu.triggerOwner;
        criObj.pathString = path;
        criObj.itemName = menu.getItemName();
        criObj.operator = opNumber;
        criObj.operandsString = [];
        criObj.disabled = false;
        temp = opTextField.getValue();
        if (CorefwFilterModel.operandNumber(criObj.operator) !== 0) {
          getSpecailNum = function(value) {
            var specailNum, _value;
            _value = (value + '').toUpperCase();
            specailNum = {
              'N/A': 'NaN',
              '+INFINITY': '+Infinity',
              'INFINITY': '+Infinity',
              '-INFINITY': '-Infinity'
            };
            return specailNum[_value];
          };
          isSpecailNum = triggerOwner && triggerOwner.dataTypeString === 'float' && !!getSpecailNum(opTextField.getValue());
          if (isSpecailNum) {
            temp = getSpecailNum(temp);
          }
          if (temp === '' || !Ext.isNumeric(temp) && !isSpecailNum) {
            Corefw.Msg.alert('Alert', 'Please enter a valid value.');
            opTextField.focus();
            return;
          }
          criObj.operandsString.push(temp);
          if (criObj.operator === 'between') {
            temp2 = opTextField2.getValue();
            isSpecailNum = triggerOwner && triggerOwner.dataTypeString === 'float' && !!getSpecailNum(opTextField2.getValue());
            if (isSpecailNum) {
              temp2 = getSpecailNum(temp2);
            }
            if (temp2 === '' || !Ext.isNumeric(temp2) && !isSpecailNum) {
              Corefw.Msg.alert('Alert', 'Please enter a valid value.');
              opTextField2.focus();
              return;
            }
            criObj.operandsString.push(temp2);
          }
        }
        criObj.measure = true;
        criObj.dataTypeString = menu.dataTypeString;
        criObj.repetitiveRatio = menu.repetitiveRatio;
        criteriaStore.addItemCriteriaStore(criObj, triggerOwner);
        menu.setVisible(false);
      }
    }, '-', {
      xtype: 'button',
      text: 'Cancel',
      cls: 'secondaryBtn',
      listeners: {
        render: function(me) {
          var su;
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            me.setUI('primarybutton-small');
          }
        }
      },
      handler: function(button, e) {
        button.up('menu').setVisible(false);
      }
    }
  ],
  listeners: {
    render: function(me) {
      var su;
      su = Corefw.util.Startup;
      if (su.getThemeVersion() === 2) {
        me.setUI('menupanelui');
      }
    },
    beforeshow: function(m, eOp) {
      var a, itemName;
      itemName = m.getItemName();
      if (itemName) {
        m.setTitle(itemName);
      } else {
        a = m.filterPath.split(':');
        m.setTitle(a[a.length - 1]);
      }
      if (this.menuRecord) {
        this.changeMenuFilterValue(this.menuRecord);
      }
    },
    hide: function() {
      this.clearMenu();
    }
  },
  setFilterMenuComboStore: function() {},
  clearMenu: function() {
    this.down('combo[name=operationCombo]').select('eq');
    this.down('field[name=textFieldNormal]').reset();
    this.down('field[name=textFieldbetween]').reset();
    delete this.menuRecord;
  },
  setRecord: function(record) {
    this.menuRecord = record;
  },
  changeMenuFilterValue: function(filterRecord) {
    var filterData, opCombo, textFieldNormal, textFieldbetween;
    if (filterRecord && filterRecord.data) {
      filterData = filterRecord.data;
      textFieldNormal = this.query('field[name=textFieldNormal]')[0];
      textFieldbetween = this.query('field[name=textFieldbetween]')[0];
      opCombo = this.query('combo[name=operationCombo]')[0];
      opCombo.select(filterData.operator);
      textFieldNormal.setValue(filterData.operandsString[0]);
      filterData.operator === 'between' && textFieldbetween.setValue(filterData.operandsString[1]);
    }
  }
});
