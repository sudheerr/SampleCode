// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.filter.menu.String', {
  extend: 'Corefw.view.component.MenuWin',
  alias: 'widget.filterMenuString',
  requires: ['Corefw.view.component.TextLookup', 'Corefw.model.FilterCriteria'],
  width: 190,
  plain: true,
  cls: 'filterMenuStringCls',
  config: {
    filterPath: '',
    itemName: '',
    repetitiveRatio: -1
  },
  title: '',
  items: [
    {
      xtype: 'combo',
      name: 'operationCombo',
      queryMode: 'local',
      displayField: 'desc',
      editable: false,
      selectOnFocus: false,
      hideLabel: true,
      value: 'eq',
      valueField: 'operation',
      store: Ext.create('Ext.data.Store', {
        fields: ['operation', 'desc'],
        data: [
          {
            'operation': 'eq',
            'desc': 'Equals'
          }, {
            'operation': 'ne',
            'desc': 'Not Equals'
          }, {
            'operation': 'like',
            'desc': 'Like'
          }, {
            'operation': "notLike",
            'desc': 'Not Like'
          }, {
            'operation': "isNull",
            'desc': 'IsNull'
          }, {
            'operation': "isNotNull",
            'desc': 'IsNotNull'
          }, {
            'operation': "isNullOrEmpty",
            'desc': 'IsNullOrEmpty'
          }, {
            'operation': "isNotNullOrEmpty",
            'desc': 'IsNotNullOrEmpty'
          }, {
            'operation': 'in',
            'desc': 'In'
          }, {
            'operation': 'notIn',
            'desc': 'Not In'
          }
        ]
      }),
      listeners: {
        change: function(combo, records, eOpts) {
          var cb2, criteriaPanel, lookup, menu;
          menu = combo.up('filterMenuString');
          lookup = menu.down('combo[name=comboTextNormal]');
          cb2 = menu.down('toolbar[name=opToobarIn]');
          criteriaPanel = menu.down('panel[name=criteriaPanel]');
          if (combo.getValue() === 'in' || combo.getValue() === 'notIn') {
            cb2.show();
            lookup.hide();
            criteriaPanel.show();
            Ext.Array.forEach(menu.query('[name=allCriteria]'), function(btn) {
              btn.show();
            });
          } else {
            Ext.Array.forEach(menu.query('[name=allCriteria]'), function(btn) {
              btn.hide();
            });
            cb2.hide();
            lookup.show();
            criteriaPanel.hide();
            lookup.reset();
            lookup.getStore().removeAll();
            if (CorefwFilterModel.operandNumber(combo.getValue()) === 0) {
              lookup.hide();
              cb2.hide();
            } else if (combo.getValue() === 'like' || combo.getValue() === "notLike") {
              Ext.apply(lookup, {
                queryMode: 'local',
                listConfig: {
                  emptyText: ''
                }
              });
            } else {
              Ext.apply(lookup, {
                queryMode: 'remote',
                listConfig: {
                  emptyText: 'No matching data found.'
                }
              });
            }
          }
        }
      }
    }, {
      name: 'comboTextNormal',
      xtype: 'textLookup'
    }, {
      xtype: 'toolbar',
      layout: 'hbox',
      isFormField: true,
      name: 'opToobarIn',
      cls: 'formField',
      hidden: true,
      items: [
        {
          xtype: 'textLookup',
          name: 'comboTextIn',
          flex: 1
        }, {
          xtype: 'button',
          text: '',
          cls: 'addIcon',
          height: 22,
          border: 0,
          handler: function() {
            var criteriaPanel, inputValue, menu, textinputField;
            menu = this.up('menu');
            textinputField = menu.down('combo[name=comboTextIn]');
            inputValue = textinputField.getValue();
            criteriaPanel = menu.down('panel[name=criteriaPanel]');
            if (Corefw.model.FilterCriteria.validateCriteritionOperand(inputValue)) {
              criteriaPanel.addItem(inputValue);
              textinputField.setValue('');
            }
          }
        }, {
          xtype: 'button',
          text: '',
          cls: 'importIcon',
          height: 22,
          border: 0,
          handler: function() {
            var criteria, criteriaInpuArea, menu, uploadMenu;
            menu = this.up('menu');
            uploadMenu = menu.createUploadMenu();
            uploadMenu.filterMenuId = menu.id;
            uploadMenu.pageXY = [this.getX() + 30, this.getY() - 3];
            uploadMenu.showOrHide();
            if (uploadMenu.clickToggle) {
              criteria = menu.getFitlerValues();
              criteriaInpuArea = uploadMenu.down('textareafield');
              criteriaInpuArea.setRawValue(criteria);
            }
          }
        }
      ]
    }, {
      xtype: 'simpleList',
      name: 'criteriaPanel',
      hidden: true,
      width: '100%',
      height: 185,
      isFirstUpload: true
    }
  ],
  bbar: [
    {
      xtype: 'button',
      scope: this,
      text: 'Apply',
      cls: 'primaryBtn',
      width: 55,
      listeners: {
        render: function(me) {
          var su;
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            me.setUI('primarybutton-small');
          }
        }
      },
      handler: function(button, e) {
        var criObj, criteriaFields, criteriaPanel, criteriaStore, i, inputValue, item, menu, opComboBoxStr, opMenuCombo, opMenuCombo2, opString, path, temp, temp2, triggerOwner;
        menu = button.up('menu');
        path = menu.filterPath;
        criObj = {};
        temp = '';
        temp2 = '';
        opMenuCombo = menu.down('combo[name=comboTextNormal]');
        opComboBoxStr = menu.down('combo[name=operationCombo]');
        opMenuCombo2 = menu.down('combo[name=comboTextIn]');
        criteriaPanel = menu.down('panel[name=criteriaPanel]');
        criteriaStore = button.up('filterMenuString').criteriaStore;
        opString = opComboBoxStr.getValue();
        inputValue = opMenuCombo.getValue();
        triggerOwner = menu.triggerOwner;
        criObj.pathString = path;
        criObj.itemName = menu.getItemName();
        criObj.operator = opString;
        criObj.operandsString = [];
        criObj.disabled = false;
        if (criObj.operator === 'in' || criObj.operator === 'notIn') {
          criteriaFields = criteriaPanel.query('field');
          i = 0;
          while (i < criteriaFields.length) {
            item = criteriaFields[i];
            if (item.xtype === 'field' && item.value !== '') {
              if (!Corefw.model.FilterCriteria.validateCriteritionOperand(item.value)) {
                return;
              }
              criObj.operandsString.push(item.value);
            }
            i++;
          }
          if (criObj.operandsString.length < 2) {
            opMenuCombo2.onFocus();
            Corefw.Msg.alert('Alert', 'Please add two values at least.');
            return;
          }
          menu.clearCurrentColumnPathOperands();
          Ext.Array.forEach(criteriaPanel.query('field'), function(item) {
            if (item.xtype === 'field' && item.value !== '') {
              menu.addCurrentColumnPathOperand(item.value);
            }
          });
        } else if (criObj.operator !== 'isNull' && criObj.operator !== 'isNotNull' && criObj.operator !== 'isNullOrEmpty' && criObj.operator !== 'isNotNullOrEmpty') {
          if (!Corefw.model.FilterCriteria.validateCriteritionOperand(inputValue, criObj.operator)) {
            return;
          }
          temp = inputValue;
          if (criObj.operator === 'like' || criObj.operator === 'notLike') {
            if (!Ext.String.startsWith(temp, '*')) {
              temp = '*' + temp;
            }
            if (!Ext.String.endsWith(temp, '*')) {
              temp = temp + '*';
            }
          }
          criObj.operandsString.push(temp);
        }
        criObj.measure = false;
        criObj.dataTypeString = menu.dataTypeString;
        criObj.repetitiveRatio = menu.repetitiveRatio;
        criObj.from = 'filterComobox';
        criteriaStore.addItemCriteriaStore(criObj, triggerOwner);
        menu.setVisible(false);
      }
    }, {
      xtype: 'tbseparator',
      name: 'allCriteria',
      hidden: true
    }, {
      xtype: 'button',
      name: 'allCriteria',
      text: 'Delete All',
      cls: 'primaryBtn',
      hidden: true,
      listeners: {
        render: function(me) {
          var su;
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            me.setUI('primarybutton-small');
          }
        }
      },
      handler: function(button, e) {
        button.up('menu').down('panel[name=criteriaPanel]').removeAll();
      }
    }, '-', {
      xtype: 'button',
      text: 'Cancel',
      cls: 'secondaryBtn',
      listeners: {
        render: function(me) {
          var su;
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            me.setUI('primarybutton-small');
          }
        }
      },
      handler: function(button, e) {
        button.up('menu').setVisible(false);
      }
    }
  ],
  listeners: {
    render: function(me) {
      var su;
      su = Corefw.util.Startup;
      if (su.getThemeVersion() === 2) {
        me.setUI('menupanelui');
      }
    },
    beforeshow: function(m, eOp) {
      var a, itemName;
      itemName = m.getItemName();
      if (itemName) {
        m.setTitle(itemName);
      } else {
        a = m.filterPath.split(':');
        m.setTitle(a[a.length - 1]);
      }
      if (this.menuRecord) {
        this.changeMenuFilterValue(this.menuRecord);
      }
      this.uploadMenu && (this.uploadMenu.clickToggle = false);
    },
    beforehide: function(m, eOp) {
      this.uploadMenu && this.uploadMenu.hide();
    },
    hide: function() {
      this.clearMenu();
    }
  },
  setFilterMenuComboStore: function(menu, pathString, extraParams) {
    var lookup, lookupStore, _i, _len, _ref;
    _ref = menu.query('textLookup');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      lookup = _ref[_i];
      lookupStore = lookup.getStore();
      lookupStore.pathString = pathString;
      if (extraParams) {
        Ext.apply(lookupStore.getProxy().extraParams, extraParams);
      }
    }
  },
  clearMenu: function() {
    var a, lookup, toRem;
    a = this.down('combo[name=operationCombo]');
    toRem = [];
    a.select('eq');
    Ext.Array.each(this.items.items, function(item) {
      if (item.xtype === 'field') {
        toRem.push(item);
      }
    });
    Ext.Array.each(toRem, function(item) {
      item.destroy();
    });
    lookup = this.down('combo[name=comboTextNormal]');
    lookup.reset();
    lookup.lastValue = 'CCQ';
    lookup.lastQuery = 'YXR';
    a = this.down('combo[name=comboTextIn]');
    a.reset();
    a.lastValue = 'CXA';
    a.lastQuery = 'YKX';

    /**delete items in criteriaPanel */
    this.down('panel[name=criteriaPanel]').removeAll();
    delete this.menuRecord;
  },
  setRecord: function(record) {
    this.menuRecord = record;
  },
  createUploadMenu: function() {
    if (!this.uploadMenu) {
      this.uploadMenu = Ext.create('Corefw.view.component.MenuWin', {
        name: 'uploadMenu',
        title: 'Paste your criteria here (split the values by comma or newline)',
        width: 510,
        margin: '0 0 10 0',
        floating: false,
        renderTo: Ext.getBody(),
        plain: true,
        hidden: true,
        clickToggle: false,
        items: [
          {
            xtype: 'textareafield',
            name: 'criteriaArea',
            height: 178
          }
        ],
        bbar: [
          {
            xtype: 'button',
            name: 'import',
            text: 'Create',
            width: 55,
            cls: 'primaryBtn',
            handler: function() {
              var filterMenu, menu, textArea;
              menu = this.up('menu');
              textArea = this.up('menu').down('textareafield');
              filterMenu = Ext.getCmp(menu.filterMenuId);
              filterMenu.createFilterCriteriaByText(textArea.getValue());
              menu.clear();
              menu.showOrHide();
            }
          }, '-', {
            xtype: 'button',
            text: 'Clear',
            width: 55,
            cls: 'primaryBtn',
            handler: function() {
              this.up('menu').clear();
            }
          }, '-', {
            xtype: 'button',
            text: 'Cancel',
            width: 55,
            cls: 'secondaryBtn',
            handler: function() {
              this.up('menu').showOrHide();
            }
          }
        ],
        showOrHide: function() {
          if (!this.clickToggle) {
            this.showAt(this.pageXY);
            this.el.setStyle('z-index', '19999');
            this.clickToggle = true;
          } else {
            this.hide();
            this.clickToggle = false;
          }
        },
        clear: function() {
          this.down('textareafield').setValue('');
        }
      });
    }
    return this.uploadMenu;
  },
  createFilterCriteriaByText: function(fileContent) {
    var cl, criteriaList, criteriaPanel, menu;
    menu = this;
    criteriaList = fileContent.replace(/^,*|,*$/g, '').split('\n');
    criteriaPanel = menu.query('panel[name=criteriaPanel]')[0];
    cl = void 0;
    criteriaPanel.removeAll();
    criteriaList.length === 0 && (criteriaList = fileContent.replace(/^,*|,*$/g, '').split(','));
    Ext.suspendLayouts();
    Ext.Array.forEach(criteriaList, function(c) {
      if (c === '' || typeof c === 'undefined') {
        return;
      }
      cl = c.replace(/^,*|,*$/g, '').split(',');
      if (cl.length > 0) {
        Ext.Array.forEach(cl, function(v) {
          if (v === '' || typeof v === 'undefined') {
            return;
          }
          criteriaPanel.addItem(v);
        });
      } else {
        criteriaPanel.addItem(v);
      }
    });
    Ext.resumeLayouts(true);
  },
  getFitlerValues: function() {
    var spliter, values;
    spliter = '\n';
    values = '';
    Ext.Array.forEach(this.query('panel[name=criteriaPanel] toolbar field'), function(v) {
      if (values === '') {
        values = v.getValue();
      } else {
        values = values + spliter + v.getValue();
      }
    });
    return values;
  },
  changeMenuFilterValue: function(filterRecord) {
    var criteriaPanel, filterData, menu, normalTextField, opCombo;
    menu = this;
    if (filterRecord && filterRecord.data) {
      filterData = filterRecord.data;
      normalTextField = menu.down('combo[name=comboTextNormal]');
      opCombo = menu.down('combo[name=operationCombo]');
      criteriaPanel = menu.down('panel[name=criteriaPanel]');
      if (filterData.operator === 'in' || filterData.operator === 'notIn') {
        opCombo.select(filterData.operator);
        criteriaPanel.removeAll();
        Ext.suspendLayouts();
        Ext.Array.forEach(filterData.operandsString, function(filterValue) {
          criteriaPanel.addItem(filterValue);
        });
        Ext.resumeLayouts(true);
      } else {
        opCombo.select(filterData.operator);
        normalTextField.setValue(filterData.operandsString[0]);
      }
    }
  },
  currentColumnPath: '',
  columnPathOperandsMap: {},
  getCurrentColumnOperands: function() {
    var me;
    me = this;
    return me.columnPathOperandsMap[me.currentColumnPath];
  },
  setCurrentColumnPath: function(pathString) {
    var me;
    me = this;
    me.currentColumnPath = pathString;
    if (!me.columnPathOperandsMap[me.currentColumnPath]) {
      me.columnPathOperandsMap[me.currentColumnPath] = [];
    }
  },
  clearCurrentColumnPathOperands: function() {
    var me;
    me = this;
    me.columnPathOperandsMap[me.currentColumnPath] = [];
  },
  addCurrentColumnPathOperand: function(operand) {
    var me;
    me = this;
    me.getCurrentColumnOperands().push(operand);
  }
});
