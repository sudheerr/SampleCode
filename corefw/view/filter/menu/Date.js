// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.filter.menu.Date', {
  extend: 'Corefw.view.component.MenuWin',
  alias: 'widget.filterMenuDate',
  plain: true,
  config: {
    filterPath: '',
    itemName: '',
    repetitiveRatio: -1
  },
  style: {
    'z-index': '0'
  },
  items: [
    {
      xtype: 'combo',
      name: 'operationCombo',
      queryMode: 'local',
      displayField: 'desc',
      editable: false,
      selectOnFocus: false,
      hideLabel: true,
      valueField: 'operation',
      value: 'eq',
      loadStoreForDate: function() {
        this.getStore().loadData([
          {
            'operation': 'eq',
            'desc': 'Equals'
          }, {
            'operation': 'ne',
            'desc': 'Not Equals'
          }, {
            'operation': 'gt',
            'desc': 'After'
          }, {
            'operation': 'lt',
            'desc': 'Before'
          }, {
            'operation': 'between',
            'desc': 'Between'
          }, {
            'operation': 'in',
            'desc': 'In'
          }, {
            'operation': 'notIn',
            'desc': 'Not In'
          }
        ]);
      },
      store: Ext.create('Ext.data.Store', {
        fields: ['operation', 'desc'],
        data: [
          {
            'operation': 'eq',
            'desc': 'Equals'
          }
        ]
      }),
      operandCnt: function(operator) {
        var cnt;
        cnt = 1;
        if (operator === 'in' || operator === 'notIn') {
          cnt = 3;
        } else if (operator === 'between') {
          cnt = 2;
        }
        return cnt;
      },
      isSingleOperationValue: function() {
        var singleAddOprands;
        singleAddOprands = ['eq', 'ne', 'gt', 'lt'];
        return singleAddOprands.indexOf(this.getValue()) > -1;
      },
      listeners: {
        change: function(combo, newValue, oldValue) {
          var dateView;
          dateView = combo.up('menu').down('[name=dateSelectionView]');
          if (combo.operandCnt(newValue) !== combo.operandCnt(oldValue)) {
            dateView.removeAll();
          }
        }
      }
    }, {
      xtype: 'datepicker',
      showToday: false,
      height: 'auto',
      handler: function(picker, date) {
        var dateView, str;
        dateView = picker.up('menu').down('[name=dateSelectionView]');
        str = Ext.Date.format(date, 'Y-n-j-H-i-s');
        if (this.up('filterMenuDate').down('[name=operationCombo]').isSingleOperationValue()) {
          dateView.removeAll();
          dateView.addItem(str);
        } else if (this.up('filterMenuDate').down('[name=operationCombo]').getValue() === 'between') {
          if (dateView.getSize() >= 2) {
            dateView.removeLast();
          }
          dateView.addItem(str);
        } else {
          if (dateView.find(str) === -1) {
            dateView.addItem(str);
          }
        }
      }
    }, {
      xtype: 'simpleList',
      name: 'dateSelectionView',
      initSize: 0,
      maxSize: 3
    }
  ],
  listeners: {
    render: function(me) {
      var su;
      su = Corefw.util.Startup;
      if (su.getThemeVersion() === 2) {
        me.setUI('menupanelui');
      }
    },
    beforeshow: function(m, eOp) {
      var a, dp, dtSelVw, itemName;
      itemName = m.getItemName();
      dtSelVw = m.down('[name=dateSelectionView]');
      dp = m.down('datepicker');
      if (itemName) {
        m.setTitle(itemName);
      } else {
        a = m.filterPath.split(':');
        m.setTitle(a[a.length - 1]);
      }
      dtSelVw.show();
      dp.show();
      m.down('combo').loadStoreForDate();
      if (this.menuRecord) {
        this.changeMenuFilterValue(this.menuRecord);
      }
    },
    hide: function() {
      this.clearMenu();
    }
  },
  bbar: [
    {
      xtype: 'button',
      scope: this,
      text: 'Apply',
      cls: 'primaryBtn',
      width: 55,
      listeners: {
        render: function(me) {
          var su;
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            me.setUI('primarybutton-small');
          }
        }
      },
      handler: function(button, e) {
        var comb2, convert, criObj, criteriaStore, dtSelView, inputValue, menu, newValue, opValueChangMap, path, triggerOwner;
        menu = button.up('menu');
        path = menu.filterPath;
        criObj = {};
        inputValue = [];
        criteriaStore = button.up('filterMenuDate').criteriaStore;
        dtSelView = menu.down('[name=dateSelectionView]');
        comb2 = menu.down('combo');
        triggerOwner = menu.triggerOwner;
        convert = function(num) {
          var tmp;
          tmp = num.split('-');
          return tmp[0] * 10000 + tmp[1] * 100 + Number(tmp[2]);
        };
        dtSelView.getItems().forEach(function(d) {
          inputValue.push(d);
        });
        criObj.measure = false;
        criObj.pathString = path;
        criObj.itemName = menu.getItemName();
        criObj.operandsString = [];
        criObj.dataTypeString = 'date';
        criObj.disabled = false;
        if (!(inputValue && inputValue.length > 0)) {
          Corefw.Msg.alert('Alert', 'Please choose a value.');
          return;
        } else if (comb2.getValue() === 'between' && inputValue.length !== 2) {
          Corefw.Msg.alert('Alert', 'Please choose two values when Between is selected.');
          return;
        } else {
          if (comb2.getValue() === 'between') {
            inputValue.sort(function(x, y) {
              if (convert(x) > convert(y)) {
                return 1;
              } else {
                return -1;
              }
            });
          } else if (comb2.isSingleOperationValue() && inputValue.length > 1) {
            opValueChangMap = {
              'eq': 'in',
              'ne': 'notIn'
            };
            newValue = opValueChangMap[comb2.getValue()];
            if (newValue) {
              comb2.setValue(newValue);
            }
          }
          criObj.operandsString = inputValue;
          criObj.replaceOps = true;
          criObj.operator = comb2.getValue();
          criObj.repetitiveRatio = menu.repetitiveRatio;
          criteriaStore.addItemCriteriaStore(criObj, triggerOwner);
          menu.setVisible(false);
        }
      }
    }, '-', {
      xtype: 'button',
      text: 'Cancel',
      cls: 'secondaryBtn',
      listeners: {
        render: function(me) {
          var su;
          su = Corefw.util.Startup;
          if (su.getThemeVersion() === 2) {
            me.setUI('primarybutton-small');
          }
        }
      },
      handler: function(button, e) {
        var menu;
        menu = button.up('menu');
        menu.setVisible(false);
      }
    }
  ],
  setFilterMenuComboStore: function(menu, pathString, extraParams) {
    menu.pathString = pathString;
  },
  changeBatchDataType: function() {
    this.down('[name=fiscalDateView]').filterBatchData(this.getBatchDataType());
  },
  clearMenu: function() {
    var dtSelVw;
    dtSelVw = this.down('[name=dateSelectionView]');
    dtSelVw.removeAll();
    this.down('combobox').select('eq');
    delete this.menuRecord;
  },
  setRecord: function(record) {
    this.menuRecord = record;
  },
  isOprandIn: function(oprand) {
    if (!this.menuRecord) {
      return false;
    }
    return this.menuRecord.get('operandsString').indexOf(oprand) > -1;
  },
  changeMenuFilterValue: function(filterRecord) {
    var dtSelVw, filterData, menu, opCombo, operandList;
    menu = this;
    dtSelVw = this.down('[name=dateSelectionView]');
    if (filterRecord && filterRecord.data) {
      filterData = filterRecord.data;
      opCombo = menu.query('combo[name=operationCombo]')[0];
      opCombo.select(filterRecord.get('operator'));
      operandList = filterRecord.get('operandsString');
      Ext.Array.each(operandList, function(item) {
        dtSelVw.addItem(item.split('~D')[0].split('~M')[0]);
      });
    }
  }
});
