// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.filter.ToolBar', {
  extend: 'Ext.toolbar.Toolbar',
  alias: 'widget.filterToolBar',
  mixins: ['Corefw.mixin.Sharable', 'Corefw.mixin.UiPathAware'],
  editable: false,
  layout: 'hbox',
  cls: 'bright',
  items: [
    {
      xtype: 'combo',
      flex: 1,
      valueField: 'criteria',
      cls: 'icon-within new-filter-bg',
      queryMode: 'local',
      store: Ext.create('Ext.data.Store', {
        fields: ['id', 'name', 'criteria', 'sourceId'],
        proxy: {
          type: 'rest',
          url: 'api/pivot/globalConfig/filter',
          batchActions: true,
          actionMethods: {
            create: 'PUT',
            destroy: 'DELETE'
          },
          reader: {
            type: 'json'
          },
          writer: {
            type: 'deepJson',
            root: 'filter'
          }
        }
      }),
      listConfig: {
        maxWidth: 500,
        listeners: {
          beforerender: function() {
            return this.minWidth = this.up('combo').getWidth();
          },
          itemclick: function(list, record, item, index, e) {
            var me;
            me = this;
            if (Ext.fly(e.target).hasCls('icon-delete') && me.store.indexOf(record) > -1) {
              Corefw.Msg.confirm('Confirm', 'Are you sure to remove the filter?', function(button) {
                if (button === 'yes') {
                  return me.up('filterToolBar').deleteFilter(record);
                }
              });
              return false;
            }
          },
          select: function(combo, record) {
            var filterStore;
            filterStore = this.up('domainnavpanel').down('filterCriteriaView').store;
            return filterStore.refreshCriteriaStore(record.get('criteria'));
          }
        }
      },
      matchFieldWidth: false,
      displayField: 'name',
      tpl: Ext.create('Ext.XTemplate', '<tpl for="."><tpl if="this.isNewFilter(name, sourceId)">', '<div class="x-boundlist-item">{name}</div>', '<tpl else>', '<div class="x-boundlist-item removable-filter">{name}<span class="icon-delete"></span></div>', '</tpl></tpl>', {
        isNewFilter: function(name, sourceId) {
          return name === 'New Filter' || sourceId !== null;
        }
      }),
      editable: false,
      currentFilterSavable: function() {
        var isPreDefined, name;
        name = this.rawValue;
        isPreDefined = !!eval(this.findRecord('name', name).data.sourceId + '');
        return name !== 'New Filter' && !isPreDefined;
      }
    }, {
      xtype: 'button',
      iconCls: 'icon-save',
      align: 'center',
      border: 0,
      listeners: {
        click: function(button, ev) {
          var menu, position;
          position = [button.getX() + 20, button.getY() + 20];
          menu = new Ext.menu.Menu({
            plain: true,
            items: [
              {
                text: 'Save',
                hidden: !button.previousSibling('combo').currentFilterSavable(),
                handler: function(th, ev) {
                  return button.up('filterToolBar').addFilter(false, position);
                }
              }, {
                text: 'Save As',
                handler: function(th, ev) {
                  return button.up('filterToolBar').addFilter(true, position);
                }
              }
            ]
          });
          return menu.showAt(position);
        }
      }
    }
  ],
  initComponent: function() {
    this.callParent(arguments);
    return this.onSharedUpdate('filters', this.updateDisplay);
  },
  updateDisplay: function(filters) {
    var combo, record, store;
    combo = this.down('combo');
    this.binduipath();
    combo.store.getProxy().setExtraParam('uipath', this.parentuipath);
    combo.store.getProxy().getWriter().extraJsonData = {
      uipath: this.parentuipath
    };
    store = this.up('domainnavpanel').down('filterCriteriaView').store;
    filters = this.getShared('filters');
    if (filters) {
      if (filters.length === 0) {
        filters = [
          {
            id: -1,
            name: 'New Filter',
            criteria: []
          }
        ];
      }
      combo.store.loadData(filters);
      record = combo.getStore().getAt(0);
      combo.select(record.get('name'));
      store.refreshCriteriaStore(record.get('criteria'));
      return combo.setLoading(false);
    } else {
      return console.log('Unable to create FilterToolBar from filters:' + filters);
    }
  },
  addFilter: function(saveAs, position) {
    var combo, criteria, name, rec, store;
    combo = this.down('combo');
    name = combo.rawValue;
    store = this.up('domainnavpanel').down('filterCriteriaView').getStore();
    criteria = store.getCriteria();
    if (criteria.length) {
      if (!saveAs) {
        rec = combo.getStore().findRecord('name', name);
        combo.setLoading('Saving...');
        combo.store.create({
          id: rec.get('id'),
          name: rec.get('name'),
          criteria: criteria,
          sourceId: rec.get('sourceId')
        }, {
          callback: function(record, operation, success) {
            return combo.setLoading(false);
          }
        });
      } else {
        if (!this.menuI) {
          this.menuI = Ext.create('Corefw.view.component.MenuWin', {
            width: 200,
            title: 'Name of the filter',
            plain: true,
            cls: 'topShadow',
            items: [
              {
                xtype: 'textfield',
                listeners: {
                  specialkey: function(me, e) {
                    var btn;
                    if (e.getKey() === e.ENTER) {
                      btn = me.up('menu').down('[name=submit]');
                      btn.fireHandler();
                    }
                  }
                }
              }
            ],
            bbar: [
              {
                xtype: 'button',
                text: 'Ok',
                width: 55,
                cls: 'primaryBtn',
                name: 'submit',
                handler: function(btn, e) {
                  var filterName, m, newRec;
                  m = btn.up('menu');
                  filterName = m.down('textfield').getValue();
                  rec = combo.getStore().findExact('name', filterName, 0, false, false, true);
                  m.hide();
                  if (rec > -1) {
                    Corefw.Msg.alert('Rename Filter', 'Filter name already existed.');
                    return;
                  }
                  if (!filterName.replace(/\s/g, '')) {
                    Corefw.Msg.alert('Rename Filter', 'Filter name can not be blank!', function() {
                      m.show();
                    });
                    return;
                  }
                  if (filterName !== null) {
                    filterName = Corefw.util.Common.stripHtml(filterName);
                    if (filterName.length > 49) {
                      Corefw.Msg.alert('Alert', 'Name too long! Exceeds 50 Characters.');
                    } else {
                      combo.setLoading('Saving...');
                      newRec = combo.store.create({
                        id: -1,
                        name: filterName,
                        criteria: criteria,
                        sourceId: null
                      }, {
                        callback: function(records, operation) {
                          var record;
                          if (operation.wasSuccessful()) {
                            record = records[0];
                            record.set('id', parseInt(Ext.decode(operation.response.responseText).id));
                            combo.store.add(record);
                            combo.select(record.get('name'));
                          }
                          return combo.setLoading(false);
                        }
                      });
                    }
                  }
                }
              }, '-', {
                xtype: 'button',
                text: 'Cancel',
                cls: 'secondaryBtn',
                width: 55,
                handler: function(btn, e) {
                  btn.up('menu').hide();
                }
              }
            ]
          });
        } else {
          this.menuI.down('textfield').setValue('');
        }
        this.menuI.showAt(position);
      }
    } else {
      Corefw.Msg.alert('Save', 'Please add criteria before saving.');
      return;
    }
  },
  deleteFilter: function(record) {
    var combo;
    combo = this.down('combo');
    combo.setLoading('Deleting...');
    combo.store.remove(record);
    combo.store.destroy({
      callback: function(records, operation) {
        if (operation.wasSuccessful()) {
          combo.setLoading(false);
          if (records[0].get('name') === combo.rawValue) {
            return combo.select(combo.store.getAt(0).get('name'));
          }
        }
      }
    });
  }
});
