// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.filter.ViewBase', {
  extend: 'Ext.view.View',
  alias: 'widget.filterViewBase',
  requires: ['Corefw.util.Formatter'],
  componentCls: 'cv-filter',
  itemSelector: 'div.cv-filter-item',
  deferEmptyText: false,
  emptyText: 'No Criterion Applied',
  minHeight: 25,
  autoScroll: true,
  singleCriterionStyle: '',
  singleCriterionCls: '',
  selectedRecords: [],
  showOnlyCls: 'showOnly',
  itemSelectedCls: 'selected',
  itemUnselectedCls: '',
  itemCls: '',
  isCriteriaGlobal: true,
  showOnly: false,
  headerText: '',
  getDragContent: function(itemIndex) {
    var contentEle, node;
    node = this.getNode(itemIndex);
    contentEle = node.getElementsByTagName('span')[0];
    return contentEle.innerHTML;
  },
  initComponent: function() {
    var me, spanCls, tplArr;
    me = this;
    Ext.apply(this.listeners, this.extraListeners);
    tplArr = this.headerText ? ['<div class="cv-filter-header">' + this.headerText + '</div>'] : [];
    tplArr = tplArr.concat(['<tpl for=".">', '<div class="cv-filter-item' + this.singleCriterionCls + ' ' + this.itemCls + ' {[this.getAdditionCls()]}" style="' + this.singleCriterionStyle + '">']);
    spanCls = this.showOnlyCls;
    this.dragContents = [];
    if (!this.showOnly) {
      tplArr.push('<span align="right" data-qtip="Remove" style="{[this.displayDeleteIcon(values)]}"  class="f-action icon-delete"> </span>');
      tplArr.push('<span align="right" data-qtip="Filter" style="{[this.displayFilterIcon(values)]}"  class="f-action icon-filter"> </span>');
      spanCls = '';
    }
    tplArr = tplArr.concat(['{[this.getHeader(values)]}', '</div>', '</tpl>']);
    this.tpl = Ext.create('Ext.XTemplate', tplArr.join(''), {
      compiled: true,
      getAdditionCls: function() {
        return '';
      },
      getHeader: function(criObject) {
        var criObj, getSingle, info, isGray, obj, store, tips, txts, _i, _len;
        store = me.getStore();
        criObj = store.getCriObjByPath(criObject.pathString);
        tips = [];
        txts = [];
        info = null;
        getSingle = function(criObj) {
          var domainPathInfo, newTips, ops, pathString, re4FindDDR, replaceReg, result, retValue;
          result = Corefw.model.FilterCriteria.getCriteriaLabel(criObj);
          retValue = result ? result[0] : null;
          ops = result ? result[1] : null;
          replaceReg = /(.+)<sub>(.+)<\/sub>(.+)/i;
          newTips = retValue.replace(replaceReg, '$1[$2]$3');
          pathString = criObj.pathString;
          domainPathInfo = '';
          domainPathInfo += /^\/D:([^-]*)/.exec(pathString)[1];
          domainPathInfo += ' --> ';
          re4FindDDR = /R:([^-]*)\/D:[^-]*/;
          while (re4FindDDR.test(pathString)) {
            domainPathInfo += re4FindDDR.exec(pathString)[1];
            pathString = pathString.replace(re4FindDDR, '');
            domainPathInfo += ' --> ';
          }
          domainPathInfo += /I:([^-]*)$/.exec(pathString)[1];
          domainPathInfo = domainPathInfo.replace(/@[A-Za-z]*/g, '');
          newTips = newTips.replace(criObj.itemName, domainPathInfo);
          return {
            tip: newTips,
            text: retValue
          };
        };
        isGray = function(criObj) {
          return criObj.disabled || criObj.elementAggregationColumnNotExisted || criObj.elementComparisonColumnNotExisted;
        };
        if (Ext.isArray(criObj)) {
          for (_i = 0, _len = criObj.length; _i < _len; _i++) {
            obj = criObj[_i];
            info = getSingle(obj);
            tips.push(info.tip);
            txts.push(info.text);
          }
        } else {
          info = getSingle(criObj);
          tips.push(info.tip);
          txts.push(info.text);
        }
        if (isGray(criObject)) {
          return '<span style="color:#999999;font-style:italic;" title="' + tips.join('\n') + '" class="' + spanCls + '">' + txts.join(';') + '</span>';
        } else {
          return '<span title="' + tips.join('\n') + '" class="' + spanCls + '">' + txts.join(';') + '</span>';
        }
      },
      displayFilter: function(criObj) {
        if (!criObj) {
          return '';
        }
        if (criObj.disabled || criObj.elementAggregationColumnNotExisted || criObj.elementComparisonColumnNotExisted) {
          return 'display:none;';
        } else {
          return '';
        }
      },
      displayDeleteIcon: function(criObj) {
        if (me.getStore().isGlobal && me.getStore().isTimeMarkPath(criObj.pathString)) {
          return 'display:none;';
        } else {
          return '';
        }
      },
      displayFilterIcon: function(criObj) {
        if (criObj.disabled || criObj.elementAggregationColumnNotExisted || criObj.elementComparisonColumnNotExisted) {
          return 'display:none;';
        } else {
          return 'margin:0px 3px 0px 0px;';
        }
      }
    });
    this.store = Ext.create('Corefw.store.FilterCriteria', {
      storeId: Ext.id(),
      isGlobal: this.isCriteriaGlobal,
      dataView: this
    });
    this.callParent(arguments);
  },
  _converArgToArray: function(input) {
    if (!input instanceof Array) {
      input = [input];
    }
    return input;
  },
  reLoadCriteria: function(criteria) {
    this.store.loadData(criteria);
  },
  removeRecord: function(itemRecords) {
    var rec, toRemain;
    itemRecords = this._converArgToArray(itemRecords);
    toRemain = [];
    while (itemRecords.length) {
      rec = itemRecords.pop();
      this.store.each(function(storeRec) {
        if (!storeRec.equals(rec)) {
          return toRemain = toRemain.concat(this.store.getCriteriaFromRecord(storeRec));
        }
      });
    }
    this.store.refreshCriteriaStore(toRemain);
  },
  receiveCriteria: function(criteria) {
    var old_criteria;
    old_criteria = this.store.getCriteria();
    criteria = this._converArgToArray(criteria);
    if (!old_criteria) {
      this.store.refreshCriteriaStore(criteria);
    } else {
      this.store.refreshCriteriaStore(this._composeCriteria(old_criteria, criteria));
    }
  },
  _composeCriteria: function(oldCriteria, newCriteria) {
    var criteria, index, isAddToResult, result, results, _i, _j, _len, _len1;
    results = [];
    results = result.concat(oldCriteria);
    for (_i = 0, _len = newCriteria.length; _i < _len; _i++) {
      criteria = newCriteria[_i];
      isAddToResult = true;
      for (index = _j = 0, _len1 = results.length; _j < _len1; index = ++_j) {
        result = results[index];
        if (Corefw.model.FilterCriteria.isTwoCriteriaFilterFieldSame(result, criteria)) {
          isAddToResult = false;
          results[index] = criteria;
          break;
        }
      }
      if (isAddToResult) {
        results.push(criteria);
      }
    }
    return results;
  },
  getFilteredStore: Ext.emptyFn,
  afterItemDelete: Ext.emptyFn,
  afterClickCloseIcon: function(record) {
    var recd, _i, _len, _ref;
    if (!Ext.Array.contains(this.selectedRecords, record)) {
      this.selectedRecords.push(record);
    }
    if (this.getStore().isGlobal) {
      _ref = this.selectedRecords;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        recd = _ref[_i];
        if (recd.get('dataTypeString') === 'date' && Corefw.model.FilterCriteria.fiscalRegex.test(recd.get('pathString'))) {
          this.selectedRecords = Ext.Array.remove(this.selectedRecords, recd);
        }
      }
    }
    this.store.remove(this.selectedRecords);
    this.selectedItems = [];
    this.afterItemDelete();
  },
  afterClickFilterIcon: function(record, item, position, underCollection) {},
  setMenuPosition: function(e) {
    return [e.getX() - 140, e.getY() + 20];
  },
  _deselectAll: function() {
    var selectedItem, _i, _len, _ref;
    if (this.selectedItems) {
      _ref = this.selectedItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selectedItem = _ref[_i];
        Ext.fly(selectedItem).removeCls(this.itemSelectedCls).addCls(this.itemUnselectedCls);
      }
    }
    this.selectedItems = [];
    this.selectedRecords = [];
  },
  _select: function(dom, record) {
    dom.selected = true;
    Ext.fly(dom).addCls(this.itemSelectedCls).removeCls(this.itemUnselectedCls);
    if (this.selectedItems) {
      this.selectedItems.push(dom);
      this.selectedRecords.push(record);
    } else {
      this.selectedItems = [dom];
      this.selectedRecords = [record];
    }
  },
  _deselect: function(dom, record) {
    dom.selected = false;
    Ext.fly(dom).removeCls(this.itemSelectedCls).addCls(this.itemUnselectedCls);
    Ext.Array.remove(this.selectedItems, dom);
    Ext.Array.remove(this.selectedRecords, record);
  },
  _clickWithShift: function(item, index) {
    var delt, dom, first, i;
    first = this.shiftSelected[0];
    this._deselectAll();
    if (first || first === 0) {
      i = first;
      delt = first > index ? -1 : 1;
      while (true) {
        dom = item.parentNode.childNodes[i];
        this._select(dom, this.dataSource.data.getByKey(dom.viewRecordId));
        if (i === index) {
          break;
        }
        i += delt;
      }
    } else {
      this._select(item, record);
    }
    if (this.shiftSelected) {
      this.shiftSelected.push(index);
    } else {
      this.shiftSelected = [index];
    }
  },
  _clickWithCtrl: function(item, record, index) {
    if (item.selected) {
      this._deselect(item, record);
    } else {
      this._select(item, record);
    }
    this.shiftSelected = [index];
  },
  _singleItemSelect: function(item, record, index) {
    this._deselectAll();
    this._select(item, record);
    this.shiftSelected = [index];
  },
  selectCriteria: function(item, record, index, e) {
    if (!(e.ctrlKey || e.shiftKey)) {
      this._singleItemSelect(item, record, index);
    } else if (e.shiftKey) {
      this._clickWithShift(item, index);
    } else if (e.ctrlKey) {
      this._clickWithCtrl(item, record, index);
    }
  },
  afertClickOperationIcon: function(targetEl, item, record, e) {
    var criteria, underCollection;
    if (targetEl.hasCls('icon-delete')) {
      this.afterClickCloseIcon(record);
    } else {
      criteria = record.get('operandsString');
      underCollection = false;
      criteria = criteria.length === 0 ? [''] : criteria;
      if (criteria[0].operator) {
        underCollection = true;
      }
      this.afterClickFilterIcon(record, item, this.setMenuPosition(e), underCollection);
    }
  },
  listeners: {
    itemmouseleave: function(view, record, item, index, e, eOpts) {
      if (Ext.fly(item).is(this.itemUnselectedCls)) {
        Ext.fly(item).removeCls(this.itemUnselectedCls);
      }
    },
    itemclick: function(th, record, item, index, e, eOpts) {
      var elem;
      elem = Ext.fly(e.target);
      if (elem.hasCls('f-action')) {
        th.afertClickOperationIcon(elem, item, record, e);
      } else {
        th.selectCriteria(item, record, index, e);
      }
      th.preClicked = {
        index: index,
        shiftKey: e.shiftKey
      };
      e.stopEvent();
      e.preventDefault();
      return false;
    }
  }
});
