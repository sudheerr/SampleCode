// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.ComplexToolbar', {
  extend: 'CitiRiskLibrary.view.CitiRiskFormPanel',
  mixins: ['Corefw.mixin.FieldContainer'],
  xtype: 'corecomplextoolbar',
  layout: 'absolute',
  header: false,
  style: {
    border: 'none'
  },
  bodyStyle: {
    border: 'none'
  },
  initComponent: function() {
    var layout, props;
    props = this.cache._myProperties;
    this.coretype = props.coretype;
    this.uipath = props.uipath;
    layout = Corefw.view.layout.Layout;
    this.layoutManager = layout.create(this);
    this.callParent(arguments);
  },
  updateUIData: function(toolbarCache) {
    Ext.suspendLayouts();
    this.removeAll();
    this.cache = toolbarCache;
    this.renderItemsWithTableLayout(this.layoutManager);
    Corefw.util.Render.appendPendingLayout(this);
    Ext.resumeLayouts(true);
  },
  onRender: function() {
    this.callParent(arguments);
    this.renderItemsWithTableLayout(this.layoutManager);
  },
  renderItemsWithTableLayout: function(layoutManager) {
    var field, fieldDef, fieldDefs, fieldProps, fields, me, nav, props, _i, _j, _len, _len1, _ref, _ref1;
    me = this;
    props = this.cache._myProperties;
    if (!layoutManager.validate()) {
      return;
    }
    fields = me.getFormCacheFields();
    if (fields && fields.length) {
      me.initializeConstants();
      fieldDefs = [];
      me.contentDefs = fieldDefs;
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        fieldProps = field != null ? field._myProperties : void 0;
        if (!(fieldProps != null ? fieldProps.isRemovedFromUI : void 0) && (fieldProps != null ? fieldProps.visible : void 0)) {
          fieldDef = me.genFieldDef(field);
          if (fieldDef) {
            fieldDefs.push(fieldDef);
          }
        }
      }
      layoutManager.initLayout();
      me.renderTooltips(fieldDefs);
      me.renderMessages();
      me.renderFieldMessages();
      me.deleteConstants();
      me.disableFormEvents = true;
      Corefw.util.Data.displayFormData(this, this.cache);
      me.disableFormEvents = false;
    }
    _ref1 = (_ref = props.navs) != null ? _ref._ar : void 0;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      nav = _ref1[_j];
      delete nav.isToolBar;
    }
    Corefw.util.Render.renderNavs(props, this);
  },
  onResize: function() {
    if (this.layoutManager) {
      this.layoutManager.resize(this);
    }
  }
});
