// Generated by CoffeeScript 1.8.0
Ext.define("Corefw.view.StatusView", {
  extend: "Ext.view.View",
  xtype: 'statusview',
  itemSelector: "div.statusView",
  statusMsgs: [],
  initComponent: function() {
    var addlListener;
    this.tpl = new Ext.XTemplate("<tpl for=\".\">", "<div class='statusView {[this.getLevel(values)]}'>", "<img align='right' class='StausClose'/>", "{[this.getMessage(values)]}", "</div>", "</tpl>", {
      compiled: true,
      getMessage: function(values) {
        return "<span >" + values.text + "</span>";
      },
      getLevel: function(values) {
        return values.level;
      }
    });
    this.store = Ext.create("Ext.data.Store", {
      fields: ['text', 'level'],
      data: this.statusMsgs,
      storeId: Ext.id()
    });
    addlListener = {
      itemclick: function(th, record, item, index, e, eOpts) {
        var element, store, _ref, _ref1;
        if ((e != null ? (_ref = e.target) != null ? _ref.tagName : void 0 : void 0) === "IMG") {
          store = th.getStore();
          store.removeAt(index);
          if (!store.getCount()) {
            this.hide();
          }
          th.fireEvent('statusremoved', th, store);
          element = th.up('coreelementform');
          if (element) {
            element.alreadyResize = false;
          }
          if ((element != null ? (_ref1 = element.layout) != null ? _ref1.type : void 0 : void 0) === 'absolute') {
            element.layoutManager.resize();
          }
        }
      },
      removed: function(comp) {
        return comp.fireEvent('statusviewremoved', comp);
      },
      viewready: function(comp, eOpts) {
        this.autoSizeMsgContent(comp.store);
      }
    };
    this.listeners = this.listeners || {};
    Ext.apply(this.listeners, addlListener);
    this.callParent(arguments);
  },
  autoSizeMsgContent: function() {
    var dom, i, items, j, msg, msgBarDom, msgBarMaxWidth, msgDom, msgDoms, s, testText, text, _i, _j, _len, _len1;
    items = this.store.data.items;
    msgBarMaxWidth = this.getWidth() - 40;
    msgBarDom = this.el.dom;
    msgDoms = Ext.DomQuery.select('span', msgBarDom);
    testText = [];
    for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
      msg = items[i];
      text = msg.raw.text;
      msgDom = msgDoms[i];
      if (msgDom.offsetWidth <= msgBarMaxWidth) {
        continue;
      } else {
        for (j = _j = 0, _len1 = text.length; _j < _len1; j = ++_j) {
          s = text[j];
          testText.push(s);
          msg.set('text', testText.join(''));
          dom = Ext.DomQuery.select('span', msgBarDom)[i];
          if (dom.offsetWidth > msgBarMaxWidth) {
            break;
          }
        }
        msg.set('text', text.substr(0, j - 2) + '...');
        Ext.create('Ext.tip.ToolTip', {
          target: Ext.DomQuery.select('span', msgBarDom)[i],
          html: msg.raw.text
        });
      }
    }
  }
});
