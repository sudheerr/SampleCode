// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.layout.TabLayoutManager', {
  extend: 'Corefw.view.layout.LayoutManager',
  constructor: function(config) {
    var comp, innerTabPanel, props, su, titleLabel, _ref;
    this.callParent(arguments);
    su = Corefw.util.Startup;
    comp = this.comp;
    this.tabPanelContainer = comp;
    comp.layout = 'fit';
    innerTabPanel = {
      xtype: 'tabpanel',
      ui: "tabnavigator-" + comp.xtype
    };
    if (su.getThemeVersion() === 2) {
      innerTabPanel.ui = 'secondary-tabs-elements';
      innerTabPanel.plugins = {
        ptype: 'topTabPanelMenu'
      };
    }
    props = comp != null ? (_ref = comp.cache) != null ? _ref._myProperties : void 0 : void 0;
    if (su.getThemeVersion() === 2 && (!Ext.isEmpty(props != null ? props.title : void 0))) {
      titleLabel = {
        xtype: 'label',
        text: props.title,
        cls: 'compEl-tab-tabBar-header'
      };
      innerTabPanel.listeners = {
        afterRender: function() {
          this.tabBar.insert(0, titleLabel);
        }
      };
    }
    comp.items = [innerTabPanel];
  },
  removeAll: function() {
    var comp;
    comp = this.comp;
    comp.removeAll();
  },
  initLayout: function() {
    var comp, contentDef, contentDefs, tabPanel, _i, _len;
    comp = this.tabPanelContainer;
    contentDefs = comp.contentDefs;
    for (_i = 0, _len = contentDefs.length; _i < _len; _i++) {
      contentDef = contentDefs[_i];
      this.applyContentConfig(contentDef);
    }
    tabPanel = comp.down('tabpanel');
    tabPanel.contentDefs = contentDefs;
    this.comp = tabPanel;
    tabPanel.add(contentDefs);
    tabPanel.setActiveTab(0);
    if (this.tabPanelContainer.flex) {
      this.enableContentsVScrollbar();
    }
  },
  enableContentsVScrollbar: function() {
    var comp, tabChilds;
    comp = this.comp;
    tabChilds = comp.query(">coreelementform");
    Ext.each(tabChilds, function(child) {
      child.setAutoScroll(true);
      return child.setOverflowXY('hidden', 'auto');
    });
  },
  beforeAddContent: function(contentDef) {
    this.applyContentConfig(contentDef);
  },
  applyContentConfig: function(contentDef) {
    var props, _ref;
    props = (_ref = contentDef.cache) != null ? _ref._myProperties : void 0;
    if (props) {
      props.expanded = true;
      props.collapsible = false;
    }
  },
  afterAddContent: function(content, contentDef, index, isAncestorUpdating) {
    var comp;
    if (!isAncestorUpdating) {
      comp = this.comp;
      comp.setActiveTab(index);
    }
  },
  getActiveTabPath: function() {
    var _ref, _ref1;
    return (_ref = this.comp) != null ? (_ref1 = _ref.activeTab) != null ? _ref1.uipath : void 0 : void 0;
  },
  setActiveTab: function(activeTabPath) {
    var activeTab, uip;
    uip = Corefw.util.Uipath;
    activeTab = uip.uipathToComponent(activeTabPath);
    if (activeTab) {
      this.comp.setActiveTab(activeTab);
    }
  }
});
