// Generated by CoffeeScript 1.8.0

/*
Create splitter when it is TIME.
TIME is:
when
	container is vbox layout
or
	container is hbox layout, but no grid child components
or
	container is hbox layout, and all its grid view children has loaded
 */
Ext.define('Corefw.view.layout.SplitterWrapper', {
  constructor: function(config) {
    var compToSplit;
    compToSplit = config.compToSplit;
    compToSplit.on('boxready', Ext.bind(this.prepareSplitters, this));
    this.compToSplit = compToSplit;
    this.layoutType = config.layoutType;
    this.splitters = config.splitters;
    this.splitterCreated = false;
  },
  setVerticalScrollBar: function(comp) {
    var tabChilds;
    if (comp.layoutManager.type === 'tab') {
      tabChilds = comp.query(">>coreelementform");
      Ext.each(tabChilds, function(child) {
        child.setAutoScroll(true);
        return child.setOverflowXY('hidden', 'auto');
      });
      return;
    }
    comp.autoScroll = '';
    comp.setOverflowXY('hidden', 'auto');
  },
  prepareSplitters: function() {
    var compToSplit, gridfieldbases, layoutType;
    layoutType = this.layoutType;
    compToSplit = this.compToSplit;
    compToSplit.listenGridViewReady = true;
    gridfieldbases = compToSplit.query("coregridfieldbase[rendered]");
    this.gridCount = gridfieldbases.length;
    if (layoutType === 'hbox' && this.gridCount > 0) {
      this.loadedGrid = 0;
      compToSplit.on('gridviewready', Ext.bind(this.onGridViewReady, this));
    } else {
      this.createSplitters();
    }
  },
  onGridViewReady: function() {
    if (++this.loadedGrid === this.gridCount) {
      this.createSplitters();
    }
  },
  createSplitters: function() {
    var compToSplit, componenetAfterSplitter, componenetBeforeSplitter, index, insertIndex, layoutManager, layoutType, splitter, splitters, uipath, _i, _len;
    compToSplit = this.compToSplit;
    layoutType = this.layoutType;
    splitters = this.splitters;
    layoutManager = compToSplit.layoutManager;
    if (!layoutManager) {
      return;
    }
    for (index = _i = 0, _len = splitters.length; _i < _len; index = ++_i) {
      uipath = splitters[index];
      componenetBeforeSplitter = compToSplit.down("[uipath=" + uipath + "]");
      if (!componenetBeforeSplitter) {
        continue;
      }
      componenetAfterSplitter = componenetBeforeSplitter.nextSibling();
      if (!componenetAfterSplitter) {
        continue;
      }
      insertIndex = layoutManager.getContentIndex(componenetBeforeSplitter);
      splitter = {
        xtype: 'splitter',
        size: 6
      };
      if (layoutType === 'vbox') {
        componenetBeforeSplitter.addCls('component-before-horizontal-splitter');
        this.setVerticalScrollBar(componenetBeforeSplitter);
        this.setVerticalScrollBar(componenetAfterSplitter);
      } else {
        componenetBeforeSplitter.addCls('component-before-vertical-splitter');
      }
      compToSplit.insert(insertIndex + 1, splitter);
      compToSplit.listenGridViewReady = false;
    }
    this.splitterCreated = true;
  },
  recordWH: function(content) {
    var layoutType, nextCmp, prevCmp;
    if (!this.splitterCreated) {
      return;
    }
    layoutType = this.layoutType;
    prevCmp = typeof content.previousSibling === "function" ? content.previousSibling() : void 0;
    nextCmp = typeof content.nextSibling === "function" ? content.nextSibling() : void 0;
    if ((prevCmp != null ? prevCmp.xtype : void 0) === 'splitter' || (nextCmp != null ? nextCmp.xtype : void 0) === 'splitter') {
      if (layoutType === 'vbox') {
        this.contentHeight = content.getHeight();
      }
      if (layoutType === 'hbox') {
        this.contentWidth = content.getWidth();
      }
    }
  },
  applyWH: function(content) {
    if (!this.splitterCreated) {
      return;
    }
    if (!this.contentHeight && !this.contentWidth) {
      return;
    }
    if (this.contentHeight) {
      content.height = this.contentHeight;
    }
    if (this.contentWidth) {
      content.width = this.contentWidth;
    }
    delete this.contentHeight;
    delete this.contentWidth;
    delete content.flex;
  }
});
