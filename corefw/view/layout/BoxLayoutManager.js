// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.view.layout.BoxLayoutManager', {
  extend: 'Corefw.view.layout.LayoutManager',
  flexCaches: {},
  splitters: [],
  constructor: function(config) {
    var comp, su, type;
    this.callParent(arguments);
    comp = config.comp;
    type = config.type;
    if (!(comp.layout instanceof Ext.layout.container.Container)) {
      comp.layout = {
        type: type
      };
    }
    su = Corefw.util.Startup;
    this.extractLayoutAttrs();
    if (this.splitters.length > 0) {
      this.splitterWrapper = Ext.create('Corefw.view.layout.SplitterWrapper', {
        compToSplit: comp,
        layoutType: type,
        splitters: this.splitters
      });
    }
    if (type === 'hbox' && !this.splitters.length) {
      comp.layout.align = 'stretch';
    }
  },
  removeAll: function() {
    var comp;
    comp = this.comp;
    comp.removeAll();
  },
  initLayout: function() {
    var comp, contentDef, contentDefs, contents, index, layoutType, rdr, su, _i, _len;
    rdr = Corefw.util.Render;
    su = Corefw.util.Startup;
    comp = this.comp;
    contentDefs = comp.contentDefs;
    layoutType = this.type;
    for (index = _i = 0, _len = contentDefs.length; _i < _len; index = ++_i) {
      contentDef = contentDefs[index];
      this.applyContentConfig(contentDef, index);
    }
    contents = comp.add(contentDefs);
  },
  applyContentConfig: function(contentDef, index) {
    var su, type;
    type = this.type;
    su = Corefw.util.Startup;
    if (type === 'vbox') {
      contentDef.cls = contentDef.cls ? "" + contentDef.cls + " vbox-item" : 'vbox-item';
      if (!contentDef.width) {
        contentDef.width = '100%';
      }
    } else if (type === 'hbox') {
      contentDef.cls = contentDef.cls ? "" + contentDef.cls + " hbox-item" : 'hbox-item';
    }
    this.applyFlex(contentDef);
  },
  beforeAddContent: function(contentDef, index) {
    var splitterWrapper;
    this.applyContentConfig(contentDef, index);
    splitterWrapper = this.splitterWrapper;
    if (splitterWrapper) {
      splitterWrapper.applyWH(contentDef);
    }
  },
  afterAddContent: function(comp, contentDef) {
    var nextCmp, prevCmp;
    if (!this.splitterWrapper || this.type === 'hbox') {
      return;
    }
    prevCmp = typeof comp.previousSibling === "function" ? comp.previousSibling() : void 0;
    nextCmp = typeof comp.nextSibling === "function" ? comp.nextSibling() : void 0;
    if ((prevCmp != null ? prevCmp.xtype : void 0) === 'splitter' || (nextCmp != null ? nextCmp.xtype : void 0) === 'splitter') {
      this.splitterWrapper.setVerticalScrollBar(comp);
    }
  },
  beforeRemoveContent: function(content) {
    var splitterWrapper;
    splitterWrapper = this.splitterWrapper;
    if (!splitterWrapper) {
      return;
    }
    splitterWrapper.recordWH(content);
  },
  applyFlex: function(contentDef) {
    var flex, props, uipath;
    props = contentDef.cache._myProperties;
    uipath = props.uipath;
    flex = this.flexCaches[uipath];
    if (flex) {
      contentDef.flex = flex;
      if (props.hasOwnProperty('expanded')) {
        props.expanded = true;
      }
      if (props.hasOwnProperty('collapsible')) {
        props.collapsible = false;
      }
    }
  },
  addStatus: function(statusDef) {
    statusDef.width = '100%';
    this.comp.insert(0, statusDef);
  },
  addToolbar: function(toolbarDef) {
    var su;
    su = Corefw.util.Startup;
    toolbarDef.width = '100%';
    if (!(su.getThemeVersion() === 2 && toolbarDef.bottomContainer === true)) {
      toolbarDef.padding = 10;
    }
    this.comp.add(toolbarDef);
  },
  extractLayoutAttrs: function() {
    var cache, flexCaches, index, itemName, layoutItem, layoutItems, splitters, uipath, _i, _len, _ref, _ref1, _ref2, _ref3;
    cache = this.comp.cache;
    layoutItems = cache != null ? (_ref = cache._myProperties) != null ? (_ref1 = _ref.layout) != null ? _ref1.items : void 0 : void 0 : void 0;
    flexCaches = {};
    splitters = [];
    for (index = _i = 0, _len = layoutItems.length; _i < _len; index = ++_i) {
      layoutItem = layoutItems[index];
      itemName = layoutItem.name;
      uipath = (_ref2 = cache[itemName]) != null ? (_ref3 = _ref2._myProperties) != null ? _ref3.uipath : void 0 : void 0;
      if (!uipath) {
        continue;
      }
      if (layoutItem.flex) {
        flexCaches[uipath] = layoutItem.flex;
      }
      if (layoutItem.hasSplitter) {
        splitters.push(uipath);
      }
    }
    this.flexCaches = flexCaches;
    this.splitters = splitters;
  }
});
