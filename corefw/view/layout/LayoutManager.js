// Generated by CoffeeScript 1.8.0

/* 
LayoutManager is an abstract class for managing layouts of Core widget container. So far uses as below
View - BoxLayoutManager(VBox)
ElementForm - BoxLayoutManager(VBox)/AbsoluteLayoutManager
FieldSet - AbsoluteLayoutManager
Toolbar - AbsoluteLayoutManager/Ext build-in toolbar layout
CompositeElement - BoxLayoutManager/TabLayoutManager/AccordionLayoutManager
 */
Ext.define('Corefw.view.layout.LayoutManager', {
  comp: null,
  type: null,
  constructor: function(config) {
    var cls, collapsible, comp, _ref, _ref1;
    comp = config.comp;
    cls = ["core-" + config.type + "-layout", comp.xtype];
    collapsible = (_ref = comp.cache) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.collapsible : void 0 : void 0;
    if (collapsible) {
      cls.push("collapsible-ct");
    }
    comp.addCls(cls);
    this.comp = config.comp;
    this.type = config.type;
  },
  validate: function() {
    return true;
  },
  initLayout: function() {},
  add: function(contentDef, index, isAncestorUpdating) {
    var comp, content, contentDefs, contentProps, existedContentDef, me, _ref;
    me = this;
    comp = me.comp;
    contentDefs = comp.contentDefs || [];
    existedContentDef = Ext.Array.findBy(contentDefs, function(conDef) {
      return conDef.cache === contentDef.cache;
    });
    if (existedContentDef && index === void 0) {
      index = Ext.Array.indexOf(contentDefs, existedContentDef);
    } else {
      if (index > -1) {
        Ext.Array.insert(contentDefs, index, contentDef);
      } else {
        contentDefs.push(contentDef);
      }
    }
    contentProps = contentDef != null ? (_ref = contentDef.cache) != null ? _ref._myProperties : void 0 : void 0;
    if (contentProps != null ? contentProps.isRemovedFromUI : void 0) {
      return;
    }
    if (Ext.isFunction(me.beforeAddContent)) {
      me.beforeAddContent(contentDef, index);
    }
    comp = me.comp;
    if (index > -1) {
      content = comp.insert(index, contentDef);
    } else {
      content = comp.add(contentDef);
    }
    if (Ext.isFunction(me.afterAddContent)) {
      me.afterAddContent(content, contentDef, index, isAncestorUpdating);
    }
    this.resize();
  },
  addToolbar: function(toolbarDef) {},
  remove: function(content) {
    var comp, contentDef, contentDefs, me;
    if (!content) {
      return;
    }
    me = this;
    comp = me.comp;
    contentDefs = comp.contentDefs;
    contentDef = Ext.Array.findBy(contentDefs, function(contentDef) {
      return contentDef.cache._myProperties.uipath === content.uipath;
    });
    Ext.Array.remove(contentDefs, contentDef);
    if (Ext.isFunction(me.beforeRemoveContent)) {
      me.beforeRemoveContent(content);
    }
    comp.remove(content);
  },
  removeAll: function() {},
  resize: function() {},
  updateContentDefs: function(contentDefs) {
    this.comp.contentDefs = contentDefs;
  },
  getContentIndex: function(content) {
    return this.comp.items.indexOf(content);
  }
});
