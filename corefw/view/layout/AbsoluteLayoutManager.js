// Generated by CoffeeScript 1.8.0
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Ext.define('Corefw.view.layout.AbsoluteLayoutManager', {
  extend: 'Corefw.view.layout.LayoutManager',
  constructor: function(config) {
    var comp;
    this.callParent(arguments);
    comp = config.comp;
    comp.layout = 'absolute';
    this.setLayoutVariables(comp);
  },
  validate: function() {
    var cache, comp, content, contents, fieldsNeedValidation, layout, nav, navs, props, _i, _j, _len, _len1;
    comp = this.comp;
    cache = comp.cache;
    props = cache._myProperties;
    layout = props.layout;
    contents = this.getContentsFromCache(cache);
    navs = this.getNavsFromProps(props);
    if (!(layout && layout.columnCount && layout.rowCount)) {
      return false;
    }
    fieldsNeedValidation = [];
    for (_i = 0, _len = contents.length; _i < _len; _i++) {
      content = contents[_i];
      fieldsNeedValidation.push(content);
    }
    for (_j = 0, _len1 = navs.length; _j < _len1; _j++) {
      nav = navs[_j];
      fieldsNeedValidation.push(nav);
    }
    if (!fieldsNeedValidation.length || !this.checkForCollisions(props, fieldsNeedValidation)) {
      return false;
    }
    return true;
  },
  removeAll: function() {
    var comp;
    comp = this.comp;
    comp.removeAll();
  },
  initLayout: function() {
    var comp, contentDef, contentDefs, _i, _len;
    comp = this.comp;
    contentDefs = comp.contentDefs;
    for (_i = 0, _len = contentDefs.length; _i < _len; _i++) {
      contentDef = contentDefs[_i];
      this.applyContentConfig(contentDef);
    }
    comp.add(contentDefs);
    this.lv.navrow = [];
    this.addShim();
  },
  getMessageBannerHeight: function() {
    var div, height;
    height = 30;
    div = document.createElement('div');
    div.classList.add('statusView');
    document.body.appendChild(div);
    height || (height = div.clientHeight);
    document.body.removeChild(div);
    return height;
  },
  addShim: function() {
    var comp, numRows, shimobj, su;
    su = Corefw.util.Startup;
    numRows = this.lv.numRows;
    comp = this.comp;
    shimobj = {
      xtype: 'component',
      html: '',
      style: {
        marginBottom: '1px'
      },
      shim: true,
      orig: {
        x: 0,
        y: numRows,
        xsize: 0.1,
        ysize: 0
      }
    };
    this.setXY({
      content: shimobj,
      coord: shimobj.orig
    });
    if (su.getThemeVersion() !== 2) {
      if (shimobj.y) {
        shimobj.y = shimobj.y - 5;
      }
    }
    comp.add(shimobj);
  },
  applyContentConfig: function(contentDef) {
    var coord, props, _ref;
    props = (_ref = contentDef.cache) != null ? _ref._myProperties : void 0;
    coord = props.coordinate;
    contentDef.orig = {
      x: coord.x,
      y: coord.y,
      xsize: coord.xsize,
      ysize: coord.ysize
    };
    this.setXY({
      content: contentDef,
      coord: coord,
      buttonHeight: contentDef.buttonHeight
    });
  },
  beforeAddContent: function(contentDef) {
    this.applyContentConfig(contentDef);
  },
  addStatus: function(statusDef) {
    var me;
    me = this;
    statusDef.orig = {
      x: 0,
      y: 0,
      xsize: me.lv.numCols,
      ysize: 1
    };
    statusDef.listeners = {
      statusremoved: function(comp, store) {
        me.adjustFieldPositions(store.getCount());
        me.comp.doComponentLayout();
      },
      statusviewremoved: function() {
        me.adjustFieldPositions(0);
        me.comp.doComponentLayout();
      }
    };
    me.adjustFieldPositions(statusDef.statusMsgs.length);
    me.setXY({
      content: statusDef,
      coord: statusDef.orig
    });
    me.comp.add(statusDef);
  },
  addToolbar: function(toolbarDef) {
    var lv, me, su, toolbarContainer, toolbarCoord;
    me = this;
    lv = me.lv;
    su = Corefw.util.Startup;
    toolbarCoord = {
      x: 0,
      y: lv.numRows,
      xsize: lv.numCols,
      ysize: 1
    };
    toolbarContainer = {
      xtype: 'container',
      items: [toolbarDef],
      orig: toolbarCoord
    };
    if (su.getThemeVersion() === 2 && toolbarDef.bottomContainer) {
      toolbarContainer.bottomContainer = true;
    }
    me.setXY({
      content: toolbarContainer,
      coord: toolbarCoord
    });
    me.comp.add(toolbarContainer);
  },
  adjustFieldPositions: function(numMsgs) {
    var cm, item, items, lv, oldCoords, orig, _i, _len;
    cm = Corefw.util.Common;
    lv = this.lv;
    lv.numRows = lv.origNumRows + numMsgs;
    items = this.comp.items.items;
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      orig = item.orig;
      oldCoords = cm.objectClone(item.orig);
      if (!orig.restore) {
        orig.restore = oldCoords;
      }
      orig.y = orig.restore.y + numMsgs;
      if (item.xtype === 'button') {
        this.setXY({
          content: item,
          coord: orig,
          buttonHeight: item.height
        });
      } else if (item.xtype === 'statusview') {
        continue;
      } else {
        this.setXY({
          content: item,
          coord: orig
        });
      }
      if (item.el) {
        item.setLocalX(item.x);
        item.setLocalY(item.y);
      }
    }
  },
  getNavsFromProps: function(props) {
    var field, key, navs, _ref;
    navs = [];
    _ref = props.navs;
    for (key in _ref) {
      field = _ref[key];
      if (key !== '_ar' && field.visible) {
        navs.push(field);
      }
    }
    return navs;
  },
  getContentsFromCache: function(cache) {
    var field, fieldProps, fields, key;
    fields = [];
    for (key in cache) {
      field = cache[key];
      fieldProps = field != null ? field._myProperties : void 0;
      if (key !== '_myProperties' && fieldProps && fieldProps.widgetType !== 'TOOLBAR' && !fieldProps.isRemovedFromUI && fieldProps.visible) {
        fields.push(field);
      }
    }
    return fields;
  },
  checkForCollisions: function(props, fields) {
    var coord, field, inBounds, layoutObj, me, tempobj, x, xindex, xsize, y, yindex, yobj, ysize, _i, _j, _k, _len, _ref, _ref1;
    me = this;
    inBounds = me.checkBounds(props, fields);
    if (!inBounds) {
      return false;
    }
    layoutObj = {};
    for (_i = 0, _len = fields.length; _i < _len; _i++) {
      field = fields[_i];
      props = field._myProperties != null ? field._myProperties : field;
      coord = props.coordinate;
      if (!coord && field.widgetType === 'NAVIGATION') {
        continue;
      }
      x = coord.x;
      xsize = coord.xsize;
      y = coord.y;
      ysize = coord.ysize;
      for (yindex = _j = y, _ref = y + ysize; y <= _ref ? _j < _ref : _j > _ref; yindex = y <= _ref ? ++_j : --_j) {
        yobj = layoutObj[yindex];
        if (!yobj) {
          yobj = {};
          layoutObj[yindex] = yobj;
        }
        for (xindex = _k = x, _ref1 = x + xsize; x <= _ref1 ? _k < _ref1 : _k > _ref1; xindex = x <= _ref1 ? ++_k : --_k) {
          tempobj = yobj[xindex];
          if (tempobj) {
            console.log('ERROR: Location conflicts');
            console.log('You are trying to place two objects into the same location');
            console.log('Previous object: ', tempobj.uipath);
            console.log('Current object : ', props.uipath);
            return false;
          } else {
            yobj[xindex] = props;
          }
        }
      }
    }
    return true;
  },
  checkBounds: function(props, fields) {
    var coord, defaults, field, numColsTotal, numRowsTotal, _i, _len;
    numColsTotal = props.layout.columnCount;
    numRowsTotal = props.layout.rowCount;
    defaults = {
      xsize: 1,
      ysize: 1,
      x: 0,
      y: 0
    };
    for (_i = 0, _len = fields.length; _i < _len; _i++) {
      field = fields[_i];
      props = field._myProperties != null ? field._myProperties : field;
      coord = props.coordinate;
      if (!coord) {
        if (props.widgetType === 'NAVIGATION') {
          continue;
        }
        coord = {};
        props.coordinate = coord;
      }
      Ext.applyIf(coord, defaults);
      if ((coord.x + coord.xsize > numColsTotal) || (coord.x < 0) || (coord.xsize <= 0)) {
        console.log("ERROR: Label \"" + props.name + "\" dimensions wrong.");
        console.log("Attempting to declare: X:" + coord.x + ", xsize:" + coord.xsize + ", number of columns: " + numColsTotal);
        return false;
      }
      if ((coord.y + coord.ysize > numRowsTotal) || (coord.y < 0) || (coord.ysize <= 0)) {
        console.log("ERROR: Label \"" + props.name + "\" dimensions wrong.");
        console.log("Attempting to declare: Y:" + coord.y + ", ysize:" + coord.ysize + ", number of rows: " + numRowsTotal);
        return false;
      }
    }
    return true;
  },
  setLayoutVariables: function(comp) {
    var allNavigations, cache, cm, compWidth, coordinate, fielditem, layout, length, lv, nav, normalrows, num, numCols, numRows, numofitems, props, rdr, su, valofindex, value, widgetType, x, y, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    rdr = Corefw.util.Render;
    cm = Corefw.util.Common;
    su = Corefw.util.Startup;
    lv = cm.objectClone(rdr.layoutVars);
    layout = comp != null ? (_ref = comp.cache) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.layout : void 0 : void 0 : void 0;
    if (layout) {
      numCols = layout.columnCount;
      numRows = layout.rowCount;
      lv.numCols = numCols;
      lv.numRows = numRows;
      lv.origNumCols = numCols;
      lv.origNumRows = numRows;
    }
    if (su.getThemeVersion() === 2) {
      if (lv.fieldHMargin) {
        lv.fieldHMargin = 8;
      }
      if (lv.panelRowHeight) {
        lv.panelRowHeight = 63;
      }
      if (lv.fieldHeight) {
        lv.fieldHeight = 48;
      }
      lv.buttoncontainerheight = 43;
      lv.labelrow = [];
      lv.checkboxrow = [];
      lv.navrow = [];
      lv.rows = [];
      normalrows = [];
      if (numCols && numRows) {
        cache = comp.cache;
        numofitems = [];
        for (fielditem in cache) {
          value = cache[fielditem];
          if (fielditem !== '_myProperties') {
            props = value._myProperties;
            coordinate = props.coordinate;
            if (coordinate && coordinate.y !== 'undefined' && normalrows[coordinate.y] === void 0) {
              lv.rows[coordinate.y] = true;
              if (_ref2 = props.type, __indexOf.call(rdr.labelTypes, _ref2) >= 0) {
                lv.labelrow[coordinate.y] = 49;
              } else {
                if (_ref3 = props.type, __indexOf.call(rdr.checkboxTypes, _ref3) >= 0) {
                  lv.checkboxrow[coordinate.y] = 49;
                  if (lv.labelrow) {
                    delete lv.labelrow[coordinate.y];
                  }
                } else {
                  if (lv.checkboxrow) {
                    delete lv.checkboxrow[coordinate.y];
                  }
                  if (lv.labelrow) {
                    delete lv.labelrow[coordinate.y];
                  }
                  normalrows[coordinate.y] = true;
                }
              }
            } else {
              continue;
            }
          }
        }
        for (fielditem in cache) {
          value = cache[fielditem];
          if (fielditem !== '_myProperties') {
            props = value._myProperties;
            if (!(props.visible && props.coordinate)) {
              continue;
            }
            x = props.coordinate.x;
            y = props.coordinate.y;
            lv.navrow[y] = -1;
            if ((_ref4 = props.type, __indexOf.call(rdr.labelTypes, _ref4) >= 0) && !Ext.isNumber(lv.labelrow[y]) && !Ext.isNumber(lv.checkboxrow[y])) {
              Corefw.util.InternalVar.setByUipathProperty(props.uipath, 'mixed-form-element', true);
            }
            if (numofitems.length) {
              for (num in numofitems) {
                value = numofitems[num];
                if (x === value) {
                  break;
                }
                valofindex = Ext.Array.indexOf(numofitems, value);
                if ((valofindex + 1) === numofitems.length) {
                  numofitems.push(x);
                }
              }
            } else {
              numofitems.push(x);
            }
          }
        }
        if (numofitems.length >= numCols) {
          lv.fieldHMargin = 22;
        }
        for (fielditem in cache) {
          value = cache[fielditem];
          if (fielditem === '_myProperties') {
            allNavigations = value.allNavigations;
            if (allNavigations) {
              length = allNavigations.length;
            }
            if (length) {
              for (_i = 0, _len = allNavigations.length; _i < _len; _i++) {
                nav = allNavigations[_i];
                y = nav != null ? (_ref5 = nav.coordinate) != null ? _ref5.y : void 0 : void 0;
                if (y && lv.navrow[y] !== -1) {
                  lv.navrow[y] = lv.buttoncontainerheight;
                }
              }
            }
          } else {
            props = value._myProperties;
            if (props) {
              widgetType = props.widgetType;
            }
            if (widgetType && widgetType === 'FIELD') {
              if (comp.padding) {
                lv.leftMargin = 0;
                lv.topMargin = 0;
                comp.padding = '15 15 0 15';
                break;
              } else {
                lv.leftMargin = 15;
                lv.topMargin = 15;
                lv.rightMargin = 15;
              }
            }
          }
        }
        Ext.Object.each(lv.navrow, function(index, item) {
          if (item === -1) {
            return delete lv.navrow[index];
          }
        });
      }
    }
    numRows || (numRows = 0);
    lv.fieldHeightExtra = lv.panelRowHeight - lv.fieldHeight;
    lv.totalHeight = lv.panelRowHeight * numRows + lv.panelHeaderHeight * 2 + lv.topMargin * 2 + 100;
    if (comp.getEl()) {
      compWidth = comp.getWidth() || 0;
    } else {
      compWidth = comp.width || 0;
    }
    lv.fieldTotalWidth = (compWidth - 2) / numCols;
    lv.fieldWidth = lv.fieldTotalWidth - lv.leftMargin - lv.rightMargin;
    comp.lv = lv;
    this.lv = lv;
  },
  setXY: function(config) {
    var buttonHeight, checkboxrow, content, coordObj, diffHeight, extraMarginHeight, labelrow, lv, navrow, rdr, reduceheight, su, tempheight;
    su = Corefw.util.Startup;
    rdr = Corefw.util.Render;
    content = config.content;
    coordObj = config.coord;
    buttonHeight = config.buttonHeight;
    lv = this.lv;
    content.x = lv.leftMargin;
    content.width = 0;
    if (su.getThemeVersion() === 2) {
      labelrow = lv.labelrow;
      checkboxrow = lv.checkboxrow;
      navrow = lv.navrow;
      if (labelrow.length || checkboxrow.length || navrow.length) {
        reduceheight = this.reduceY(lv.rows, labelrow, checkboxrow, navrow, config);
        content.y = coordObj.y * lv.panelRowHeight + lv.topMargin - reduceheight;
      } else {
        content.y = coordObj.y * lv.panelRowHeight + lv.topMargin;
      }
    } else {
      content.y = coordObj.y * lv.panelRowHeight + lv.topMargin;
    }
    extraMarginHeight = 0;
    if (coordObj.ysize > 1) {
      extraMarginHeight = (lv.panelRowHeight - lv.fieldHeight) * Math.ceil(Math.abs(coordObj.ysize - 1));
    }
    tempheight = lv.fieldHeight * coordObj.ysize + extraMarginHeight;
    if (buttonHeight) {
      diffHeight = lv.fieldHeight - buttonHeight;
      if (su.getThemeVersion() === 2) {
        if (!lv.navrow[coordObj.y]) {
          content.y += diffHeight;
        }
      } else {
        content.y += diffHeight + 2;
      }
      content.height = buttonHeight;
      content.maxHeight = buttonHeight;
    } else {
      if (su.getThemeVersion() === 2 && content.bottomContainer) {
        content.height = 43;
        delete content.bottomContainer;
      } else {
        content.height = tempheight;
        content.maxHeight = tempheight;
      }
    }
  },
  resize: function() {
    var comp, compBody, compBodySize, fieldHMargin, fieldTotalWidth, fieldWidth, item, itemX, itemXSize, items, leftMargin, localX, lv, numCols, numRows, rightMargin, tempwidth, _i, _len;
    comp = this.comp;
    lv = comp.lv;
    numCols = lv.numCols;
    numRows = lv.numRows;
    leftMargin = lv.leftMargin;
    rightMargin = lv.rightMargin;
    fieldHMargin = lv.fieldHMargin;
    if (!comp.rendered || !comp.body) {
      return;
    }
    compBody = comp.body;
    if (compBody.getWidth() === 0 && comp.xtype === 'corefieldset' && comp.width > 0) {
      compBody.setWidth(comp.width);
    }
    compBodySize = compBody.getSize(true);
    fieldTotalWidth = compBodySize.width - leftMargin - rightMargin;
    fieldWidth = (fieldTotalWidth - fieldHMargin * (numCols - 1)) / numCols;
    items = comp.items.items;
    if (items) {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (item.rendered) {
          itemX = item.orig.x;
          itemXSize = item.orig.xsize;
          localX = itemX * fieldWidth + leftMargin + fieldHMargin * Math.floor(itemX);
          tempwidth = fieldWidth * itemXSize;
          if (itemXSize > 1) {
            tempwidth += fieldHMargin * Math.ceil(itemXSize - 1);
          }
          item.setLocalX(localX);
          item.setWidth(tempwidth);
        }
      }
    }
  },
  reduceY: function(rows, labelrow, checkboxrow, navrow, config) {
    var coordObj, decreaseheight, panelRowHeight, y;
    coordObj = config.coord;
    panelRowHeight = 63;
    decreaseheight = 0;
    for (y in rows) {
      if (y < coordObj.y) {
        if (checkboxrow[y]) {
          decreaseheight = decreaseheight + panelRowHeight - checkboxrow[y];
          continue;
        } else {
          if (labelrow[y]) {
            decreaseheight = decreaseheight + panelRowHeight - labelrow[y];
          } else if (navrow[y]) {
            decreaseheight = decreaseheight + panelRowHeight - navrow[y];
          }
        }
      }
    }
    return decreaseheight;
  }
});
