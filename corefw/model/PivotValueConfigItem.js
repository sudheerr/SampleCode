// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.model.PivotValueConfigItem', {
  extend: 'Corefw.model.PivotConfigItem',
  fields: [
    {
      name: 'aggregation',
      type: 'string',
      defaultValue: "Sum"
    }, {
      name: 'variance',
      type: 'boolean',
      defaultValue: false
    }, {
      name: 'varianceType',
      type: 'string'
    }, {
      name: 'varianceTimeMark',
      type: 'string'
    }, {
      name: 'valueItemId',
      convert: function(value, record) {
        if (record.get('variance')) {
          if (!record.getTimeMarkObj()) {
            return '';
          }
          return [record.get('path'), record.get('varianceType'), record.getTimeMarkObj().key].join('~');
        } else {
          return record.get('path');
        }
      }
    }, {
      name: 'timeMarks',
      persist: false
    }, {
      name: 'fullText',
      persist: false,
      convert: function(value, record) {
        var varianceTypeName;
        if (record.get('variance')) {
          if (!record.getTimeMarkObj()) {
            return '';
          }
          varianceTypeName = CorefwFormatter.varianceNameMap[record.get('varianceType')];
          return "" + (record.get('name')) + " (" + varianceTypeName + " " + (record.getTimeMarkObj().formatted) + ")";
        } else {
          return record.get('name');
        }
      }
    }
  ],
  idProperty: 'valueItemId',
  getTimeMarkObj: function() {
    var freq, freqObj, timeMark, timeMarkText, timePoint, _ref;
    timeMarkText = this.get('varianceTimeMark');
    _ref = this.get('timeMarks');
    for (freq in _ref) {
      freqObj = _ref[freq];
      for (timePoint in freqObj) {
        timeMark = freqObj[timePoint];
        if (timePoint === timeMarkText) {
          return timeMark;
        }
      }
    }
  },
  calcFields: function() {
    this.set('valueItemId', '');
    return this.set('fullText', '');
  },
  copyFrom: function() {
    this.callParent(arguments);
    return this.calcFields();
  }
});
