// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.mixin.Sharable', {
  isSharable: true,
  _sharable: function(key) {
    if (!this.hasOwnProperty(key)) {
      this[key] = {};
    }
    return this[key];
  },
  updateShared: function(key, value) {
    var child, sharableChildren, updatedKeys, _i, _len, _results;
    updatedKeys = [];
    if (Ext.isObject(key) && value === void 0) {
      Ext.apply(this._sharable('_shared'), key);
      updatedKeys = Ext.Object.getKeys(key);
    } else {
      this._sharable('_shared')[key] = value;
      updatedKeys = [key];
    }
    sharableChildren = Ext.ComponentQuery.query('[isSharable=true]', this);
    _results = [];
    for (_i = 0, _len = sharableChildren.length; _i < _len; _i++) {
      child = sharableChildren[_i];
      Ext.apply(child._sharable('_shared'), this._sharable('_shared'));
      _results.push(updatedKeys.forEach(function(updatedKey) {
        var cbDefs;
        cbDefs = child._sharable('_sharedUpdateCallbacks')[updatedKey];
        if (cbDefs) {
          return cbDefs.forEach(function(cbDef) {
            var cb, scope;
            cb = cbDef[0], scope = cbDef[1];
            return cb.call(scope, child._sharable('_shared')[updatedKey]);
          });
        }
      }));
    }
    return _results;
  },
  getShared: function(key) {
    if (key) {
      return this._sharable('_shared')[key];
    } else {
      return this._sharable('_shared');
    }
  },
  onSharedUpdate: function(key, cb, scope) {
    if (scope == null) {
      scope = this;
    }
    this._sharable('_sharedUpdateCallbacks')[key] = this._sharable('_sharedUpdateCallbacks')[key] || [];
    return this._sharable('_sharedUpdateCallbacks')[key].push([cb, scope]);
  }
});
