// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.controller.Nav', {
  extend: 'Ext.app.Controller',
  init: function() {
    this.control({
      "[navONCLICKevent]": {
        click: this.onThrottledNavClick
      },
      "[coretype=contextmenubutton]": {
        click: this.contextMenuButtonClick
      },
      "[coretype=gridheaderdropdownmenubutton]": {
        click: this.gridheaderDropdownMenuButtonClick
      },
      "[coretype=navmenuitembutton]": {
        click: this.navMenuButtonClick
      },
      "[coretype=formgridaddrow]": {
        click: this.gridAddRow
      },
      "[coretype=formgriddeleterow]": {
        click: this.gridDeleteRow
      },
      "[navONDOWNLOADevent]": {
        click: this.downloadFile
      },
      "[navONREDIRECTevent]": {
        click: this.redirectFile
      }
    });
  },
  onThrottledNavClick: function(button, ev) {
    var me, navClickEvent, throttledNavClick;
    me = this;
    throttledNavClick = this.throttledNavClick;
    navClickEvent = function(button, ev) {
      me.onNavClickEvent(button, ev);
    };
    if (!throttledNavClick) {
      throttledNavClick = Ext.Function.createInterceptor(navClickEvent, function(button) {
        var curTime, lastNavClickTime;
        curTime = Ext.Date.now();
        lastNavClickTime = button.lastNavClickTime;
        if (!lastNavClickTime || curTime > lastNavClickTime + 1000) {
          button.lastNavClickTime = curTime;
          return true;
        }
        return false;
      });
      this.throttledNavClick = throttledNavClick;
    }
    throttledNavClick(button, ev);
  },
  onNavClickEvent: function(button, ev) {
    var cm, comp, eventstr, hasFileUpload, opts, parent, parentCache, perspectiveWindowOfTriggerNav, postData, props, rq, searchXtype, uip, uipath, url, _ref;
    cm = Corefw.util.Common;
    rq = Corefw.util.Request;
    uip = Corefw.util.Uipath;
    uipath = button.uipath;
    parentCache = uip.uipathToParentCacheItem(uipath);
    eventstr = 'ONCLICK';
    hasFileUpload = function(cmp) {
      if (cmp.getForm) {
        return cmp.getForm().hasUpload();
      }
      if (cmp.hasUpload) {
        return cmp.hasUpload();
      }
      return false;
    };
    props = parentCache._myProperties;
    if (props.coretype === 'view') {
      parent = button.up('form');
      if (parent != null) {
        props = parent.cache._myProperties;
      }
    }
    searchXtype = cm.getSearchXtypeForDownload(props);
    url = rq.objsToUrl3(button.eventURLs[eventstr], button.localUrl);
    perspectiveWindowOfTriggerNav = (_ref = uip.uipathToComponent(uipath)) != null ? _ref.up('coreperspectivewindow') : void 0;
    if (searchXtype) {
      comp = button.up(searchXtype);
      if (!comp) {
        if (props.widgetType === 'TOOLBAR') {
          comp = uip.uipathToPostContainer(uipath);
        } else {
          comp = uip.uipathToComponent(uipath);
        }
      }
    }
    postData = comp.generatePostData();
    opts = {
      needFormSubmit: hasFileUpload(comp),
      filefields: comp.query('filefield')
    };
    if (perspectiveWindowOfTriggerNav) {
      rq.sendRequest5(url, perspectiveWindowOfTriggerNav.processResponseObject, uipath, postData, void 0, void 0, perspectiveWindowOfTriggerNav, ev, opts);
    } else {
      rq.sendRequest5(url, rq.processResponseObject, uipath, postData, void 0, void 0, void 0, ev, opts);
    }
  },
  contextMenuButtonClick: function(button, ev) {
    var cm, comp, contextOwner, eventURLs, postData, props, record, rq, url;
    rq = Corefw.util.Request;
    cm = Corefw.util.Common;
    contextOwner = button.contextOwner;
    comp = button.component;
    console.log('context button click: inside this button, grid or tree, component: ', button, contextOwner, comp);
    eventURLs = button.eventURLs;
    if (!eventURLs) {
      return;
    }
    record = button.record || {};
    record.isEditing = true;
    postData = comp.generatePostData();
    if (comp.grid) {
      props = comp.cache._myProperties;
      postData.rowindex = props.rowindex;
      postData.columnUipath = props.columnUipath;
      postData.columnPath = props.columnPath;
    }
    if (eventURLs.ONREDIRECT) {
      url = rq.objsToUrl3(eventURLs.ONREDIRECT, null);
      cm.redirect(comp, url);
    }
    if (eventURLs.ONDOWNLOAD) {
      url = rq.objsToUrl3(eventURLs.ONDOWNLOAD, null);
      cm.download(comp, url);
    } else {
      url = rq.objsToUrl3(eventURLs.ONCLICK, null);
      rq.sendRequest5(url, rq.processResponseObject, comp.uipath, postData, void 0, void 0, void 0, ev);
    }
    record.isEditing = false;
  },
  gridheaderDropdownMenuButtonClick: function(button, ev) {
    var eventURLs, grid, postData, record, rq, url;
    rq = Corefw.util.Request;
    grid = button.grid;
    console.log('dropdown menu button click: inside this button, grid: ', button, grid);
    eventURLs = button.eventURLs;
    if (!eventURLs) {
      return;
    }
    url = rq.objsToUrl3(eventURLs.ONCLICK, null);
    record = button.record || {};
    record.isEditing = true;
    postData = grid.generatePostData();
    rq.sendRequest5(url, rq.processResponseObject, grid.uipath, postData, void 0, void 0, void 0, ev);
    record.isEditing = false;
  },
  navMenuButtonClick: function(button, ev) {
    var cm, coretype, eventArray, eventItem, eventURL, parentCache, parentComp, parentProps, postData, rq, uip, uipath, url, _i, _len, _ref, _ref1, _ref2;
    rq = Corefw.util.Request;
    uip = Corefw.util.Uipath;
    cm = Corefw.util.Common;
    parentCache = button.parentCache;
    parentProps = parentCache._myProperties;
    uipath = parentProps.uipath;
    parentComp = uip.uipathToComponent(uipath);
    coretype = parentProps.coretype;
    if (coretype === 'perspective' || coretype === 'view') {
      postData = parentComp.generatePostData();
    } else {
      return;
    }
    eventArray = (_ref = button.cache) != null ? _ref.events : void 0;
    if (!eventArray) {
      eventArray = (_ref1 = button.cache) != null ? (_ref2 = _ref1._myProperties) != null ? _ref2.events : void 0 : void 0;
      if (!eventArray) {
        return;
      }
    }
    for (_i = 0, _len = eventArray.length; _i < _len; _i++) {
      eventItem = eventArray[_i];
      eventURL = eventItem.url;
      url = rq.objsToUrl3(eventURL);
      if (eventItem.type === 'ONCLICK') {
        rq.sendRequest5(url, rq.processResponseObject, uipath, postData, void 0, void 0, void 0, ev);
      } else if (eventItem.type === 'ONDOWNLOAD') {
        cm.download(parentComp, url);
      } else if (eventItem.type === 'ONREDIRECT') {
        cm.redirect(parentComp, url);
      }
    }
  },
  gridAddRow: function(button) {
    var grid;
    grid = button.up('grid');
    grid.addRowToGrid();
  },
  gridDeleteRow: function(button) {
    var grid;
    grid = button.up('grid');
    grid.deleteRowsFromGrid();
  },
  downloadFile: function(button) {
    var cm, comp, parentCache, props, rq, searchXtype, uip, uipath, url;
    rq = Corefw.util.Request;
    cm = Corefw.util.Common;
    uip = Corefw.util.Uipath;
    uipath = button.uipath;
    parentCache = uip.uipathToParentCacheItem(uipath);
    props = parentCache._myProperties;
    url = rq.objsToUrl3(button.eventURLs['ONDOWNLOAD']);
    searchXtype = cm.getSearchXtypeForDownload(props);
    if (searchXtype) {
      comp = button.up(searchXtype);
      if (!comp) {
        if (props.widgetType === 'TOOLBAR') {
          comp = uip.uipathToPostContainer(uipath);
        } else {
          comp = uip.uipathToComponent(button.uipath);
        }
      }
      cm.download(comp, url);
    }
  },
  redirectFile: function(button) {
    var cm, comp, parentCache, props, rq, searchXtype, uip, uipath, url;
    rq = Corefw.util.Request;
    cm = Corefw.util.Common;
    uip = Corefw.util.Uipath;
    uipath = button.uipath;
    parentCache = uip.uipathToParentCacheItem(uipath);
    props = parentCache._myProperties;
    url = rq.objsToUrl3(button.eventURLs['ONREDIRECT']);
    searchXtype = cm.getSearchXtypeForDownload(props);
    if (searchXtype) {
      comp = button.up(searchXtype);
      if (!comp) {
        if (props.widgetType === 'TOOLBAR') {
          comp = uip.uipathToPostContainer(uipath);
        } else {
          comp = uip.uipathToComponent(button.uipath);
        }
      }
    }
    cm.redirect(comp, url);
  }
});
