// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.controller.Field', {
  extend: 'Ext.app.Controller',
  init: function() {
    this.control({
      'combobox[isLookup]': {
        change: this.onIsLookupComboBoxChange,
        focus: this.onIsLookupComboBoxFocus,
        beforeselect: this.toogleComboBoxChangeEvent,
        select: this.toogleComboBoxChangeEvent
      },
      'combobox[fieldONSELECTevent]': {
        select: this.onComboBoxSelect
      },
      'combobox[fieldONDOUBLECLICKevent]': {
        itemdblclick: this.onComboBoxDblClick
      },
      'coretreesimple[fieldONDOUBLECLICKevent] treepanel': {
        itemdblclick: this.onDBLClickSimpleTreeItem
      },
      'coretreesimple[fieldONCLICKevent] treepanel': {
        itemclick: this.onClickSimpleTreeItem
      },
      'coretreesimple[fieldONREDIRECTevent] treepanel': {
        itemclick: this.onClickSimpleTreeItemLink
      },
      'coretreesimple[fieldONDOWNLOADevent] treepanel': {
        itemclick: this.onClickSimpleTreeItemLink
      },
      'coretreemixedgrid treepanel': {
        itemclick: this.onClickTreeMixedGrid,
        itemexpand: this.onExpandOrCollapseMixedGrid,
        itemcollapse: this.onExpandOrCollapseMixedGrid
      },
      'coretreemixedgrid treepanel grid': {
        itemclick: this.onClickTreeMixedGridItem
      },
      '[fieldONLOADevent], [fieldONREFRESHevent]': {
        afterrender: this.onFieldRenderEvent
      },
      'textfield[fieldONBLURevent]': {
        blur: this.onFieldBlur
      },
      'textfield[fieldONCHANGEevent]': {
        change: this.onFieldChange
      },
      'coreduallistbox[fieldONCHANGEevent]': {
        change: this.onFieldChange
      },
      'textfield[fieldONFOCUSevent]': {
        focus: this.onFieldFocus
      },
      'textfield[fieldONENTERKEYevent]': {
        specialkey: this.onFieldEnterKey
      },
      'coreelementform field:not([fieldONFOCUSevent])': {
        focus: this.recordFieldFocusStatus
      },
      'checkbox[fieldONCHANGEevent]': {
        change: this.onFieldCheckChange
      },
      'checkbox': {
        beforerender: this.onBeforeCheck
      },
      '[fieldONTREEEXPANDevent] treepanel': {
        beforeitemexpand: this.onTreeItemExpand
      },
      'corelinkfield[fieldONCLICKevent]': {
        linkclick: this.onClickLink
      },
      'corelinkfield[fieldONDOWNLOADevent]': {
        linkclick: this.onClickLinkToDownload
      },
      'corelinkfield[fieldONREDIRECTevent]': {
        linkclick: this.onClickLinkToRedirect
      },
      'coreiframefield[fieldONCLICKevent]': {
        click: this.onClickIframe
      },
      'coreiconfield[fieldONICONCLICKevent] button': {
        click: this.onClickButtonIcon
      },
      'filefield': {
        change: this.onFileFieldChange
      },
      'coreradiogroup[fieldONCHANGEevent]': {
        change: this.onRadioGroupCheckChange
      },
      'coreSwitchBtn[fieldONCHANGEevent]': {
        change: this.onRadioGroupCheckChange
      },
      'corecheckboxgroup[fieldONCHANGEevent]': {
        change: this.onCheckGroupCheckChange
      },
      'coremonthpicker': {
        change: this.onMonthPickerChange
      },
      'coretreepickerwindow treepanel': {
        itemclick: this.onTreePickerItemClick,
        select: this.onTreePickerSelect
      },
      'textfield[inputMask]': {
        keypress: this.filterUserInputs
      },
      'field': {
        afterrender: this.validateChanging
      },
      'corechartfield': {
        resize: this.updateLegendLayout
      }
    });
    this.initialTasks();
  },
  fieldEventFireTask: null,
  initialTasks: function() {
    return this.fieldEventFireTask = new Ext.util.DelayedTask(this.fieldEvent, this);
  },
  onBeforeCheck: function(field, eOpts) {
    var su;
    su = Corefw.util.Startup;
    if (su.getThemeVersion() === 2) {
      if (field.boxLabel) {
        field.boxLabelCls = 'boxLabelCls';
      }
    }
  },
  onFieldEnterKey: function(field, e) {
    var evt;
    if (e.getKey() === e.ENTER) {
      evt = Corefw.util.Event;
      this.fieldEvent('ONENTERKEY', field);
      evt.enableUEvent(field.uipath, 'ONENTERKEY');
    }
  },
  filterUserInputs: function(field, event) {
    var eventTarget, inputMask, newRawVal, pattern, rawVal, regex, selectionEnd, selectionStart;
    inputMask = field.inputMask;
    regex = inputMask.regex;
    if (!regex) {
      return;
    }
    rawVal = field.getRawValue();
    eventTarget = event.getTarget();
    selectionStart = eventTarget.selectionStart;
    selectionEnd = eventTarget.selectionEnd;
    newRawVal = rawVal.substring(0, selectionStart) + String.fromCharCode(event.charCode) + rawVal.substring(selectionEnd);
    if (field.xtype === 'corenumberfield') {
      newRawVal = field.parseValueAsStr(newRawVal);
    }
    pattern = new RegExp(regex);
    if (!pattern.test(newRawVal)) {
      event.preventDefault();
    }
  },
  updateLegendLayout: function(chartfield, width, height) {
    var chart, legendConfig, position, su;
    chart = chartfield.chart;
    position = chart.legendPosition;
    su = Corefw.util.Startup;
    if ((Ext.isEmpty(chart.surface.width)) || (Ext.isEmpty(chart.surface.height))) {
      return;
    }
    if (position && !chart.hasResized) {
      chart.hasResized = true;
      chart.legend = Ext.create('Ext.ux.chart.SmartLegend', {
        position: position,
        chart: chart,
        boxStrokeWidth: 1,
        rebuild: true
      });
      if (su.getThemeVersion() === 2) {
        legendConfig = {
          boxStrokeWidth: 0,
          boxFill: '#EBEBEB',
          itemSpacing: 0,
          labelFont: '11px arial, sans-serif'
        };
        Ext.apply(chart.legend, legendConfig);
      }
      chart.legend.redraw();
      chart.redraw();
    }
  },
  onTreepickerClickOrSelect: function(parentWindow, record) {
    var delayHide, displayField, displayValue, form, parentField, rq, sendValue, sendValueField, seqDisplayText, url;
    parentField = parentWindow.parentField;
    form = parentField.up('form');
    displayField = parentWindow.tree.displayField;
    displayValue = record.get(displayField);
    sendValueField = parentWindow.tree.valueField;
    sendValue = record.get(sendValueField);
    parentField = parentWindow.parentField;
    delete parentField.forceLoad;
    parentField.disableChangeEvents = true;
    seqDisplayText = parentWindow.generateSeqDisplayText(record, displayField, displayValue);
    parentField.setValue(seqDisplayText);
    parentField.sendValue = sendValue || displayValue;
    parentField.lastDisplayValue = seqDisplayText;
    parentField.lastSendValue = sendValue;
    console.log('saving last values: ', parentField, parentField.lastDisplayValue, parentField.lastSendValue);
    delayHide = Ext.Function.createDelayed(function() {
      parentWindow.hide();
    }, 1);
    delayHide();
    console.log('clicked on a tree item: ', displayValue, record, parentWindow);
    parentField.valueChanged = true;
    rq = Corefw.util.Request;
    url = rq.objsToUrl3(parentField.eventURLs['ONSELECT']);
    return rq.sendRequest5(url, rq.processResponseObject, parentField.uipath, form.generatePostData());
  },
  onTreePickerItemClick: function(tree, record) {
    var parentWindow;
    if (tree.up('coretreebase').isNodeDisabled(record)) {
      return false;
    }
    parentWindow = tree.up('coretreepickerwindow');
    this.onTreepickerClickOrSelect(parentWindow, record);
  },
  onTreePickerSelect: function(rowModel, record, index, eOpts) {
    var parentField, parentWindow;
    parentWindow = rowModel.view.up('coretreepickerwindow');
    parentField = parentWindow.parentField;
    if (!parentField.isFirstEvent) {
      parentField.isFirstEvent = true;
      if (parentField.lastDisplayValue) {
        return;
      }
    }
    this.onTreepickerClickOrSelect(parentWindow, record);
  },
  onMonthPickerChange: function(field, newValue, oldValue) {
    if (field.suspendChangeEvents) {
      return;
    }
    this.fieldEvent('ONCHANGE', field);
  },
  monitorFieldChange: function(field) {
    var fieldContainer;
    fieldContainer = this.getFieldContainer(field);
    if (fieldContainer && fieldContainer.disableFormEvents) {
      return;
    }
    field.valueChanged = true;
  },
  toogleComboBoxChangeEvent: function(comp) {
    comp.disableChangeEvent = !comp.disableChangeEvent;
  },
  onClickLink: function(field) {
    var evt;
    evt = Corefw.util.Event;
    this.fieldEvent('ONCLICK', field);
    evt.enableUEvent(field.uipath, 'ONCLICK');
  },
  onClickButtonIcon: function(button) {
    var coreicon;
    coreicon = button.up('coreiconfield');
    this.fieldEvent('ONICONCLICK', coreicon);
  },
  onClickLinkToDownload: function(field) {
    var cm, comp, rq, url;
    rq = Corefw.util.Request;
    cm = Corefw.util.Common;
    url = rq.objsToUrl3(field.eventURLs['ONDOWNLOAD']);
    comp = field.up('form');
    cm.download(comp, url);
  },
  onClickLinkToRedirect: function(field) {
    var cm, comp, rq, url;
    rq = Corefw.util.Request;
    cm = Corefw.util.Common;
    url = rq.objsToUrl3(field.eventURLs['ONREDIRECT']);
    comp = field.up('form');
    cm.redirect(comp, url);
  },
  onRadioGroupCheckChange: function(radioGroup, newValue, oldValue) {
    this.onFieldCheckChange(radioGroup);
  },
  onCheckGroupCheckChange: function(checkGroup) {
    this.onFieldCheckChange(checkGroup);
  },
  onTreeItemExpand: function(node) {
    var appendTreeFragment, errMsg, eventURLs, field, me, method, parent, postData, rq, treepanel, url, _ref;
    treepanel = node.getOwnerTree();
    if (node.data.leaf || node.childNodes.length || !treepanel.rendered) {
      return;
    }
    parent = treepanel.up();
    if (parent.xtype === 'coretreefielddisplayvalue') {
      parent = parent.up('coretreepickerwindow').parentField;
    }
    parent.expandingNodeId = node.data.id;
    postData = parent.generatePostData != null ? parent.generatePostData() : this.getFieldContainer(parent).generatePostData();
    me = this;
    appendTreeFragment = function(respObj) {
      var model, respNode, _i, _len;
      for (_i = 0, _len = respObj.length; _i < _len; _i++) {
        respNode = respObj[_i];
        model = {
          id: respNode.index,
          leaf: respNode.leaf,
          checked: treepanel.selectType !== 'NONE' && treepanel.selectType ? respNode.selected : void 0,
          disabled: respNode.disabled,
          matching: respNode.matching,
          expanded: false,
          origSelected: respNode.selected
        };
        Ext.apply(model, respNode.value);
        node.appendChild(model);
      }
      me.remarkParentNodeState(node, respObj);
    };
    rq = Corefw.util.Request;
    field = treepanel.up('coretreefieldbase') || treepanel.up();
    eventURLs = field.eventURLs || ((_ref = field.cache) != null ? _ref._myProperties.events : void 0) || {};
    url = rq.objsToUrl3(eventURLs['ONTREEEXPAND']);
    errMsg = 'Did not receive a valid response for the tree';
    method = 'POST';
    rq.sendRequest5(url, appendTreeFragment, parent.uipath, postData, errMsg, method);
  },
  remarkParentNodeState: function(currentNode, newChildrenNodes) {
    var isAllNodesSelected, isAnyNodeSemiSelected, parentNode, selectedNodes, semiSelectedNodes;
    selectedNodes = newChildrenNodes.filter(function(n) {
      return n.selected;
    });
    semiSelectedNodes = newChildrenNodes.filter(function(n) {
      var _ref;
      return (_ref = n.raw) != null ? _ref.semiSelected : void 0;
    });
    isAllNodesSelected = selectedNodes.length === newChildrenNodes.length;
    isAnyNodeSemiSelected = semiSelectedNodes.length > 0;
    if (isAnyNodeSemiSelected || (selectedNodes.length > 0 && !isAllNodesSelected)) {
      currentNode.selected = false;
      currentNode.raw.semiSelected = true;
      currentNode.set('checked', true);
    } else if (isAllNodesSelected) {
      currentNode.selected = true;
      currentNode.raw.semiSelected = false;
      currentNode.set('checked', true);
    }
    parentNode = currentNode.parentNode;
    if (parentNode) {
      this.remarkParentNodeState(parentNode, parentNode.childNodes);
    }
  },
  simpleTreeItemClickHandler: function(dataview, record, treenodeDom, index, e, isDblClick) {
    var callback, coretree, scrollTop;
    coretree = dataview.up('coretreesimple');
    scrollTop = dataview.el.dom.scrollTop;
    callback = function(respObj, ev, uipath, preProcess) {
      var ft, iv;
      ft = Corefw.util.Uipath.uipathToComponent(uipath);
      ft.tree.getView().el.dom.scrollTop = scrollTop;
      iv = Corefw.util.InternalVar;
      iv.deleteByNameProperty(uipath, 'treeItemClickEventsBlocked');
      console.log('block removed');
    };
    if (dataview.xtype === 'treeradioview') {
      dataview.isCheckChanged = true;
      dataview.onCheckChange(record);
    }
    coretree.treeItemClickHandler(record, treenodeDom, index, e, callback, isDblClick);
  },
  simpleTreeItemLinkClickHandler: function(dataview, record, treenodeDom, index, e, isDblClick) {
    var callback, coretree, scrollTop;
    coretree = dataview.up('coretreesimple');
    scrollTop = dataview.el.dom.scrollTop;
    callback = function(respObj, ev, uipath, preProcess) {
      var ft, iv;
      ft = Corefw.util.Uipath.uipathToComponent(uipath);
      ft.tree.getView().el.dom.scrollTop = scrollTop;
      iv = Corefw.util.InternalVar;
      iv.deleteByNameProperty(uipath, 'treeItemClickEventsBlocked');
      console.log('block removed');
    };
    if (dataview.xtype === 'treeradioview') {
      dataview.isCheckChanged = true;
      dataview.onCheckChange(record);
    }
    coretree.treeItemLinkClickHandler(record, treenodeDom, index, e, callback, isDblClick);
  },
  onDBLClickSimpleTreeItem: function(dataview, record, treenodeDom, index, e) {
    this.simpleTreeItemClickHandler(dataview, record, treenodeDom, index, e, true);
  },
  onClickSimpleTreeItem: function(dataview, record, treenodeDom, index, e) {
    this.simpleTreeItemClickHandler(dataview, record, treenodeDom, index, e, false);
  },
  onClickSimpleTreeItemLink: function(dataview, record, treenodeDom, index, e) {
    this.simpleTreeItemLinkClickHandler(dataview, record, treenodeDom, index, e, false);
  },
  onClickTreeMixedGridItem: function(dataview, record, treenodeDom, index, e) {
    console.log('**** onClickTreeMixedGridItem');
    e.stopEvent();
  },
  onClickTreeMixedGrid: function(dataview, record, treenodeDom, index, e) {
    var coretree;
    coretree = dataview.up('coretreemixedgrid');
    coretree.onClickTreeMixedGrid(record, treenodeDom, index, e);
  },
  onExpandOrCollapseMixedGrid: function(node) {
    var childNode, coretree, treenodeDom, treepanel;
    treepanel = node.getOwnerTree();
    coretree = treepanel.up('coretreemixedgrid');
    childNode = node.childNodes[0];
    if (childNode) {
      node.removeChild(childNode);
    }
    childNode = node.childNodes[0];
    if (childNode) {
      Ext.removeNode(Ext.DomQuery.selectNode('[data-recordid=' + childNode.internalId + ']', coretree.el.dom));
      Ext.removeNode(Ext.DomQuery.selectNode('tr:not([data-recordid]) tr:not([data-recordid])', coretree.el.dom));
    }
    node.ignoreExpandEvent = false;
    treenodeDom = Ext.DomQuery.selectNode('[data-recordid=' + node.internalId + ']', coretree.el.dom);
    coretree.onTreeItemExpand(node, node.internalId, treenodeDom);
    return true;
  },
  comboBoxLookup: function(field, isChange, newValue, oldValue) {
    var errMsg, fieldComboCallback, inputValue, method, rq, url, val;
    if (field.xtype === 'coretreepicker' && (typeof oldValue === 'undefined' || newValue === oldValue || (!newValue || newValue.length < 1))) {
      return;
    }
    if (field.isStop) {
      return;
    }
    rq = Corefw.util.Request;
    fieldComboCallback = function(respObj, uipath) {
      var historyInfo, historyValues, node, _ref;
      if (respObj == null) {
        respObj = [];
      }
      field.setComboValues(respObj);
      historyInfo = field.cache ? field.cache._myProperties.historyInfo : field.historyInfo;
      historyValues = historyInfo != null ? historyInfo.historyValues : void 0;
      field.addHistoryData(historyValues, true);
      field.expand();
      node = field.findRecordByValue(field.getValue());
      if (node) {
        field.picker.onItemSelect(node);
        if ((_ref = field.picker) != null) {
          _ref.focusNode(node);
        }
      }
      field.focus();
    };
    if (!field.isNotFirstLookUp) {
      field.isNotFirstLookUp = true;
      inputValue = '';
    } else {
      inputValue = field.getRawValue();
    }
    val = inputValue === void 0 || inputValue === null ? '' : inputValue;
    url = rq.objsToUrl3(field.eventURLs['ONLOOKUP'], null, val);
    errMsg = 'Did not receive a valid response for the combobox';
    method = 'POST';
    rq.sendRequest5(url, fieldComboCallback, field.uipath, null, errMsg, method);
  },
  onIsLookupComboBoxChange: function(field, newValue, oldValue) {
    var fieldContainer;
    fieldContainer = this.getFieldContainer(field);
    if (fieldContainer.disableFormEvents || field.disableChangeEvent) {
      return;
    }
    this.comboBoxLookup(field, true, newValue, oldValue);
  },
  onIsLookupComboBoxFocus: function(field) {
    var lookupCacheable, _ref, _ref1;
    lookupCacheable = (_ref = field.cache) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.lookupCacheable : void 0 : void 0;
    if (lookupCacheable) {
      field.isNotFirstLookUp = true;
      field.expand();
      return;
    }
    field.isNotFirstLookUp = false;
    this.comboBoxLookup(field);
  },
  onComboBoxSelect: function(field) {
    var evt, uipath;
    evt = Corefw.util.Event;
    uipath = field.uipath;
    evt.enableUEvent(uipath, 'ONSELECT');
    this.fieldEvent('ONSELECT', field);
  },
  onComboBoxDblClick: function(field) {
    var evt, uipath;
    evt = Corefw.util.Event;
    uipath = field.uipath;
    evt.enableUEvent(uipath, 'ONDOUBLECLICK');
    this.fieldEvent('ONDOUBLECLICK', field);
  },
  onFieldBlur: function(field) {
    var evt, fieldContainer;
    evt = Corefw.util.Event;
    fieldContainer = this.getFieldContainer(field);
    if (fieldContainer.disableFormEvents) {
      return;
    }
    this.clearCursorPosition(field);
    this.removeFieldFocus(field);
    this.fieldEvent('ONBLUR', field);
    evt.enableUEvent(field.uipath, 'ONBLUR');
  },
  onFieldChange: function(field) {
    var evt, fieldContainer;
    evt = Corefw.util.Event;
    fieldContainer = this.getFieldContainer(field);
    if (fieldContainer.disableFormEvents) {
      return;
    }
    evt.enableUEvent(field.uipath, 'ONCHANGE');
    this.saveCursorPosition(field);
    this.saveFieldFocus(field);
    this.fieldEventFireTask.delay(500, null, null, ['ONCHANGE', field]);
  },
  onFieldCheckChange: function(field) {
    var evt, fieldContainer;
    evt = Corefw.util.Event;
    fieldContainer = this.getFieldContainer(field);
    if (fieldContainer.disableFormEvents) {
      return;
    }
    evt.enableUEvent(field.uipath, 'ONCHANGE');
    field.valueChanged = true;
    this.fieldEvent('ONCHANGE', field);
  },
  onFieldFocus: function(field) {
    var fieldContainer;
    if ((field != null ? field.xtype : void 0) === 'combobox') {
      return;
    }
    fieldContainer = this.getFieldContainer(field);
    if (fieldContainer.disableFormEvents) {
      return;
    }
    this.saveCursorPosition(field);
    this.saveFieldFocus(field);
    this.fieldEvent('ONFOCUS', field);
  },
  onClickIframe: function(comp, data) {
    var arg, postData, rq, temp, uipath, url;
    rq = Corefw.util.Request;
    uipath = comp.uipath;
    url = rq.objsToUrl3(comp.eventURLs['ONCLICK'], '');
    for (arg in data) {
      temp = arg + '=' + data[arg];
      url += '&' + temp;
    }
    postData = comp.up('form').generatePostData();
    rq.sendRequest5(url, rq.processResponseObject, uipath, postData, void 0, void 0, void 0, void 0);
  },
  onFileFieldChange: function(field, value, eOpts) {
    var disabledButton, fileHolder, files, prop, _ref;
    fileHolder = field.up();
    prop = (_ref = fileHolder.cache) != null ? _ref._myProperties : void 0;
    files = field.fileInputEl.dom.files;
    disabledButton = function(fieldField, disable) {
      var button, nav, parentCache, parentprop, uip, _i, _len, _ref1, _ref2, _ref3;
      fileHolder = field.up();
      uip = Corefw.util.Uipath;
      prop = (_ref1 = fileHolder.cache) != null ? _ref1._myProperties : void 0;
      parentCache = uip.uipathToParentCacheItem(prop.uipath);
      parentprop = parentCache != null ? parentCache._myProperties : void 0;
      _ref3 = (_ref2 = parentprop.navs) != null ? _ref2._ar : void 0;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        nav = _ref3[_i];
        button = uip.uipathToComponent(nav != null ? nav.uipath : void 0);
        button.setDisabled(disable);
      }
    };
    if (files && files.length > 0) {
      if (field.validator() === true) {
        disabledButton(field, false);
        fileHolder.isStopUpload = false;
      } else {
        disabledButton(field, true);
        fileHolder.isStopUpload = true;
      }
    }
  },
  removeFieldFocus: function(field) {
    var fieldContainer, formFocusFieldUipath, iv, uipath;
    iv = Corefw.util.InternalVar;
    fieldContainer = this.getFieldContainer(field);
    uipath = fieldContainer.uipath;
    formFocusFieldUipath = iv.getByUipathProperty(uipath, 'formfieldfocus');
    if (uipath === formFocusFieldUipath) {
      iv.deleteUipathProperty(uipath, 'formfieldfocus');
    }
  },
  saveFieldFocus: function(field) {
    var fieldContainer, iv;
    iv = Corefw.util.InternalVar;
    fieldContainer = this.getFieldContainer(field);
    iv.setByUipathProperty(fieldContainer.uipath, 'formfieldfocus', field.uipath);
  },
  saveCursorPosition: function(field) {
    var cursPos, dom, iv, node, _ref;
    iv = Corefw.util.InternalVar;
    if ((_ref = field.xtype) === 'checkbox' || _ref === 'checkboxfield' || _ref === 'combobox' || _ref === 'combo') {
      return;
    }
    dom = field.getEl().dom;
    node = Ext.dom.Query.selectNode('input', dom);
    if (!node) {
      node = Ext.dom.Query.selectNode('textarea', dom);
      if (!node) {
        return;
      }
    }
    try {
      cursPos = node.selectionStart;
      console.log('saving cursor position: ', cursPos);
      iv.setByUipathProperty(field.uipath, 'fieldcursorposition', cursPos);
    } catch (_error) {
      console.log('Exception occured while selectionStart is invoked on node ', node);
    }
  },
  clearCursorPosition: function(field) {
    var iv;
    iv = Corefw.util.InternalVar;
    iv.deleteUipathProperty(field.uipath, 'fieldcursorposition');
  },
  recordFieldFocusStatus: function(field) {
    var iv, radioGroup;
    if (field.xtype === 'radiofield') {
      iv = Corefw.util.InternalVar;
      iv.setByNameProperty('specialField', 'radio', field.inputValue);
      radioGroup = field.up('radiogroup');
      this.saveFieldFocus(radioGroup);
    } else {
      if (field.xtype === 'coretreepickernew' || field.xtype === 'coregridpicker') {
        return;
      }
      this.saveFieldFocus(field);
      this.saveCursorPosition(field);
    }
  },
  fieldEvent: function(eventName, field) {
    var container, editor, eventEnabledFlag, evt, postData, rq, toolbarContainer, uip, uipath, url, viewComp;
    editor = field.up('roweditor');
    if (editor) {
      return;
    }
    rq = Corefw.util.Request;
    evt = Corefw.util.Event;
    uip = Corefw.util.Uipath;
    uipath = field.uipath;
    eventEnabledFlag = evt.getEnableUEventFlag(uipath, eventName);
    if (!eventEnabledFlag) {
      return;
    }
    evt.disableUEvent(uipath, eventName);
    field.valueChanged = true;
    if (eventName === 'ONLOAD') {
      postData = null;
    } else {
      if (field.xtype === 'coretreefieldbase' && field.xtype !== 'coretreepickernew') {
        postData = field.generatePostData();
      } else {
        container = this.getFieldContainer(field);
        if (!container) {
          return;
        }
        if (container.xtype === 'coretoolbar' || container.xtype === 'corecomplextoolbar') {
          toolbarContainer = uip.uipathToParentComponent(container.uipath);
          postData = toolbarContainer.generatePostData();
        } else {
          postData = container.generatePostData();
        }
      }
    }
    viewComp = field.up('[coretype=view]');
    if (viewComp && viewComp.saveScrollPosition) {
      viewComp.saveScrollPosition();
    }
    url = rq.objsToUrl3(field.eventURLs[eventName], field.localUrl);
    rq.sendRequest5(url, rq.processResponseObject, uipath, postData);
  },
  onFieldRenderEvent: function(component) {
    var evt;
    evt = Corefw.util.Event;
    if (component.fieldONLOADevent || component.fieldONREFRESHevent) {
      evt.fireRenderEvent(component);
    }
  },
  getFieldContainer: function(field) {
    return field.up('fieldset') || field.up('form') || field.up('coretoolbar');
  },
  validateChanging: function(comp, opts) {
    var enforceMaxLength, errorMessage, maxLength, minLength, shouldValidate, _ref;
    if (comp.isInlineFilter) {
      return;
    }
    _ref = this.getMinAndMaxInfo(comp), minLength = _ref.minLength, maxLength = _ref.maxLength, enforceMaxLength = _ref.enforceMaxLength, errorMessage = _ref.errorMessage, shouldValidate = _ref.shouldValidate;
    if (!shouldValidate) {
      return;
    }
    comp.inputEl.on('keydown', function(e, dom) {
      var value;
      if (e.keyCode !== e.BACKSPACE) {
        value = comp.getValue() || '';
        if ('number' === typeof value) {
          value = value + '';
        }
        if ((maxLength - 1) < value.length) {
          if (enforceMaxLength) {
            e.preventDefault();
          }
        }
      }
    });
    comp.inputEl.on('keyup', function(e, dom) {
      var isValid, value;
      value = comp.getValue() || '';
      isValid = true;
      if (minLength > 0 && value.length < minLength) {
        isValid = false;
      }
      if (maxLength > 0 && maxLength < value.length) {
        isValid = false;
      }
      if (isValid === false) {
        comp.markInvalid(errorMessage);
      }
    });
  },
  getMinAndMaxInfo: function(comp) {
    var constraint, constraintMap, constraintName, header, headers, info, parent, pathString, validations, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    info = {
      shouldValidate: false
    };
    if (!comp.up('roweditor')) {
      validations = (comp != null ? (_ref = comp.cache) != null ? (_ref1 = _ref._myProperties) != null ? _ref1.validations : void 0 : void 0 : void 0) || [];
    } else {
      parent = comp.up('fieldcontainer');
      pathString = comp.name;
      parent = parent != null ? (_ref2 = parent.cache) != null ? _ref2._myProperties : void 0 : void 0;
      headers = parent.allContents;
      for (_i = 0, _len = headers.length; _i < _len; _i++) {
        header = headers[_i];
        if (header.pathString === pathString) {
          break;
        }
      }
      validations = header != null ? header.validations : [];
    }
    constraintName = 'FieldLength';
    for (_j = 0, _len1 = validations.length; _j < _len1; _j++) {
      constraint = validations[_j];
      if (constraint.constraintName === constraintName) {
        break;
      }
    }
    if (constraint && constraint.constraintMap) {
      constraintMap = constraint.constraintMap;
      info.minLength = constraintMap.minLength;
      info.maxLength = constraintMap.maxLength;
      info.enforceMaxLength = constraintMap.enforceMaxLength;
      info.errorMessage = constraint.constraintMessage;
      info.shouldValidate = info.minLength || info.maxLength;
    }
    return info;
  }
});
