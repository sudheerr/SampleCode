// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.controller.Tooltip', {
  extend: 'Ext.app.Controller',
  init: function() {
    this.control({
      "gridview": {
        refresh: this.onGridViewRefresh
      }
    });
  },
  onGridViewRefresh: function(gridview, eOpts) {
    var fieldContainer, grid, pFieldCtProps, tooltipData, widgetType;
    fieldContainer = gridview.up('fieldcontainer');
    pFieldCtProps = fieldContainer != null ? fieldContainer.cache._myProperties : void 0;
    grid = gridview.up('grid');
    if (!pFieldCtProps) {
      return;
    }
    widgetType = pFieldCtProps.widgetType;
    switch (widgetType) {
      case 'OBJECT_GRID':
        tooltipData = pFieldCtProps.items;
        this.createToolTipOnGrid(grid, pFieldCtProps, tooltipData);
        break;
      case 'TREE_GRID':
        this.createToolTipOnTreeGrid(fieldContainer);
        break;
      case 'RCGRID':
        tooltipData = pFieldCtProps.tooltipValue || {};
        this.createToolTipOnGrid(grid, pFieldCtProps, tooltipData);
        this.bindStyleToGrid(grid, pFieldCtProps);
    }
  },
  createToolTipOnGrid: function(grid, pFieldCtProps, tooltipData) {
    var columns, delayToolTips, index, loopCells, rowRecord, rowRecords, st, su, tooltipValue, view, _i, _len, _ref, _ref1;
    if (!tooltipData) {
      return;
    }
    st = grid.store;
    if (!st || !st.data) {
      return;
    }
    su = Corefw.util.Startup;
    delayToolTips = su.getStartupObj().delayTooltips === true;
    columns = grid.columns;
    view = grid.getView();
    rowRecords = view.getViewRange();
    loopCells = this.loopCells;
    for (index = _i = 0, _len = rowRecords.length; _i < _len; index = ++_i) {
      rowRecord = rowRecords[index];
      tooltipValue = (_ref = tooltipData[index]) != null ? _ref.tooltipValue : void 0;
      if (!tooltipValue) {
        tooltipValue = (_ref1 = tooltipData[index]) != null ? _ref1.cells : void 0;
      }
      if (!tooltipValue) {
        continue;
      }
      loopCells(view, rowRecord, columns, function(column, cell) {
        var pathString, tooltip, _ref2;
        pathString = column.pathString;
        tooltip = (_ref2 = tooltipValue[pathString]) != null ? _ref2.tooltip : void 0;
        if ((cell != null ? cell.dom : void 0) && !Ext.isEmpty(tooltip)) {
          if (cell != null) {
            cell.dom.tooltip = tooltip;
          }
        }
      });
    }
    Ext.create('Ext.tip.ToolTip', {
      dismissDelay: 0,
      target: view.el,
      delegate: view.cellSelector,
      renderTo: Ext.getBody(),
      hideDelay: delayToolTips === true ? 1200 : 200,
      listeners: {
        beforeshow: function(tip) {
          var cellValue, cmp, id, tooltip, txtC, visibleTooltip, visibleTooltips, _j, _len1, _ref2;
          tooltip = (_ref2 = tip.triggerElement) != null ? _ref2.tooltip : void 0;
          if (!tooltip) {
            cmp = Ext.get(tip.triggerElement.id);
            if (cmp && !cmp.isTooltipCreated) {
              txtC = tip.triggerElement.textContent;
              if (!this.textMetrics) {
                this.textMetrics = new Ext.util.TextMetrics();
              }
              cellValue = ((this.textMetrics.getSize(txtC).width) + 2) || 0;
              if (cmp.getWidth() < cellValue) {
                tooltip = tip.triggerElement.textContent;
              }
            }
          }
          if (!tooltip) {
            return false;
          }
          visibleTooltips = Ext.ComponentQuery.query("tooltip[hidden=false]");
          for (id = _j = 0, _len1 = visibleTooltips.length; _j < _len1; id = ++_j) {
            visibleTooltip = visibleTooltips[id];
            visibleTooltip.hide();
          }
          tip.update(tooltip);
        },
        click: {
          element: 'el',
          fn: function(el) {
            Ext.getCmp(this.id).showAt(this.getXY);
          }
        }
      }
    });
  },
  createToolTipOnTreeGrid: function(fieldContainer) {
    var cm, columns, createToolTip, createToolTipOnCell, key, loopCells, node, nodeHash, pFieldCtProps, rowsData, tooltipValueObj, tree, treeStore, view, _ref;
    tree = fieldContainer.tree;
    treeStore = tree.store.tree;
    if (treeStore.root.childNodes.length === 0) {
      return;
    }
    nodeHash = treeStore.nodeHash;
    pFieldCtProps = fieldContainer.cache._myProperties;
    if (!pFieldCtProps.data) {
      return;
    }
    cm = Corefw.util.Common;
    rowsData = cm.converTreeGridDataToDataList(pFieldCtProps.data);
    columns = tree.columns;
    view = tree.getView();
    createToolTipOnCell = this.createToolTipOnCell;
    loopCells = this.loopCells;
    createToolTip = this.createToolTip;
    for (key in nodeHash) {
      node = nodeHash[key];
      if (key === 'root') {
        continue;
      }
      tooltipValueObj = (_ref = rowsData[node.raw.__index]) != null ? _ref.tooltipValue : void 0;
      if (!tooltipValueObj) {
        continue;
      }
      loopCells(view, node, columns, function(column, cell) {
        createToolTipOnCell(column, cell, tooltipValueObj, createToolTip);
      });
    }
  },
  loopCells: function(view, row, columns, processor) {
    var cell, column, _i, _len;
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      column = columns[_i];
      if (!view.getNode(row, true)) {
        continue;
      }
      cell = view.getCell(row, column);
      if (cell) {
        if (typeof processor === "function") {
          processor(column, cell);
        }
      }
    }
  },
  createToolTipOnCell: function(column, cell, tooltipValueObj, createToolTipFn) {
    var pathString, tooltip, _ref;
    pathString = column.pathString;
    tooltip = (_ref = tooltipValueObj[pathString]) != null ? _ref.tooltip : void 0;
    cell.isTooltipCreated = cell.isTooltipCreated || false;
    if (cell && cell.isTooltipCreated === false && !Ext.isEmpty(tooltip)) {
      createToolTipFn(cell, tooltip);
      cell.isTooltipCreated = true;
    }
  },
  createToolTip: function(target, html) {
    return Ext.create('Ext.tip.ToolTip', {
      dismissDelay: 0,
      target: target,
      html: html
    });
  },
  bindStyleToGrid: function(grid, pFieldCtProps) {
    var fn, st;
    st = grid.store;
    if (!st || !st.data) {
      return;
    }
    fn = Ext.Function.createDelayed(function() {
      var cell, cells, col, cols, dataIndex, index, lockedview, record, rowArray, rowData, style, tr, view, _i, _j, _len, _len1, _ref;
      view = grid.getView();
      cols = grid.columns;
      rowData = pFieldCtProps.tooltipValue;
      rowArray = ((_ref = st.data) != null ? _ref.items : void 0) != null;
      if (rowArray) {
        for (index = _i = 0, _len = rowArray.length; _i < _len; index = ++_i) {
          record = rowArray[index];
          cells = rowData[index].cells;
          for (_j = 0, _len1 = cols.length; _j < _len1; _j++) {
            col = cols[_j];
            dataIndex = col.dataIndex;
            style = cells != null ? cells[dataIndex] : void 0;
            if (!style) {
              continue;
            }
            cell = view.getCell(record, col);
            if (cell) {
              if (style.cellStyle) {
                cell.addCls(style.cellStyle);
              }
              if (style.rowStyle) {
                cell.parent().addCls(style.rowStyle);
                lockedview = grid.getView().lockedView;
                if (lockedview) {
                  cell = lockedview.getCell(record, cols[0]);
                  if (cell) {
                    tr = cell.parent().dom;
                    tr.className = tr.className + ' ' + style.rowStyle;
                  }
                }
              }
            }
          }
        }
      }
    }, 800);
    fn();
  }
});
