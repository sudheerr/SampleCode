// Generated by CoffeeScript 1.8.0
Ext.define('Corefw.controller.Perspective', {
  extend: 'Ext.app.Controller',
  init: function() {
    this.control({
      'toptabpanel >> tab': {
        click: this.tabClick
      },
      'coreperspectivewindow gridpanel': {
        viewready: this.whenGridViewOnPerspectiveWindow
      },
      'coreperspective tab[coreview][disabled!=true]': {
        click: this.tabClick
      },
      'tab[disabled!=true][hidden=false]': {
        click: this.tabClickForDeactive,
        activate: this.activateTab
      },
      'corecompositeelement tab[disabled!=true]': {
        click: this.tabClick
      },
      'coreiframefield ^ coreperspective': {
        activate: this.activateIframeField
      }
    });
  },
  activateTab: function(tab) {
    var activateEnabled, activateUrl, comp, evt, postData, rq, uipath;
    rq = Corefw.util.Request;
    evt = Corefw.util.Event;
    comp = tab.card;
    uipath = comp.uipath;
    if (!uipath || !comp.isVisible()) {
      return;
    }
    if (comp.up('[replacingChild=true]')) {
      return;
    }
    activateUrl = comp.eventURLs['ONACTIVATE'];
    if (!activateUrl) {
      return;
    }
    activateEnabled = activateUrl && evt.getEnableUEventFlag(uipath, 'ONACTIVATE');
    if (!activateEnabled) {
      evt.enableUEvent(uipath, 'ONACTIVATE');
      return;
    }
    postData = comp.generatePostData();
    activateUrl = rq.objsToUrl3(activateUrl);
    rq.sendRequest5(activateUrl, rq.processResponseObject, uipath, postData);
  },
  activateIframeField: function(tabPanel, newCard, oldCard, eOpts) {
    var iframe;
    iframe = tabPanel.down('coreiframefield');
    Ext.defer((function() {
      var _ref;
      if (iframe != null ? (_ref = iframe.el) != null ? _ref.dom : void 0 : void 0) {
        iframe.setWidth(iframe.getWidth());
      }
    }), 200);
  },
  tabClick: function(tab, ev) {
    var _ref, _ref1;
    if (ev && (((_ref = tab.closeEl) != null ? (_ref1 = _ref.el) != null ? _ref1.dom : void 0 : void 0) === ev.target)) {
      tab.tabBar.closeTab(tab);
      return;
    }
    if (!tab.doBuffered) {
      tab.doBuffered = Ext.Function.createBuffered(function() {
        var comp, evt, notLoaded, onClickEventUrl, postData, rq, uipath;
        rq = Corefw.util.Request;
        evt = Corefw.util.Event;
        comp = tab.card;
        uipath = comp != null ? comp.uipath : void 0;
        notLoaded = (comp != null ? comp.eventURLs['ONLOAD'] : void 0) && evt.getEnableUEventFlag(uipath, 'ONLOAD');
        if (notLoaded) {
          return;
        }
        onClickEventUrl = comp != null ? comp.eventURLs['ONCLICK'] : void 0;
        if (!onClickEventUrl) {
          return;
        }
        postData = comp.generatePostData();
        onClickEventUrl = rq.objsToUrl3(onClickEventUrl);
        return rq.sendRequest5(onClickEventUrl, rq.processResponseObject, uipath, postData);
      }, 200);
    }
    tab.doBuffered();
  },
  whenGridViewOnPerspectiveWindow: function(grid) {
    var perspectiveWindow, position;
    perspectiveWindow = grid.up('coreperspectivewindow');
    position = perspectiveWindow.cache._myProperties.position;
    if (position === 'SCREEN_CENTER') {
      perspectiveWindow.center();
    }
  },
  tabClickForDeactive: function(tab, ev) {
    var activeContainer, card, nextContainerName, onDeactivateUrl, parentContainer, postData, rq, uipath, url, _ref;
    rq = Corefw.util.Request;
    card = tab.card;
    if (!(card && card.cache)) {
      return;
    }
    nextContainerName = card.cache._myProperties.name;
    uipath = card.uipath;
    parentContainer = card.up();
    activeContainer = parentContainer.getActiveTab();
    onDeactivateUrl = (_ref = activeContainer.eventURLs) != null ? _ref.ONDEACTIVATE : void 0;
    if (!onDeactivateUrl) {
      return;
    }
    postData = activeContainer.generatePostData();
    switch (card.xtype) {
      case 'coreelementform':
        postData.nextActiveElementName = nextContainerName;
        break;
      case 'coreviewstacked':
        postData.nextActiveViewName = nextContainerName;
        break;
      case 'coreperspective':
        postData.nextActivePerspectiveName = nextContainerName;
    }
    url = rq.objsToUrl3(onDeactivateUrl);
    rq.sendRequest5(url, rq.processResponseObject, uipath, postData, void 0, void 0, void 0, ev);
  }
});
